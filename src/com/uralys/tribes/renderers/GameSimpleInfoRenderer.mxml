<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				useHandCursor="true"
				contentBackgroundAlpha="0"
				buttonMode="true"
				click="onClick(event)"
				creationComplete="initGame()">
	
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.uralys.tribes.commons.Numbers;
			import com.uralys.tribes.commons.Session;
			import com.uralys.tribes.commons.Translations;
			import com.uralys.tribes.entities.Game;
			import com.uralys.tribes.entities.Player;
			import com.uralys.utils.Utils;
			
			import mx.events.ItemClickEvent;
			import mx.utils.ObjectUtil;
			
			[Bindable] private var color:Number;
			[Bindable] private var colorHovered:Number;
			[Bindable] private var colorSelected:Number;
			
			private function onClick(event:MouseEvent):void{
				
				var e:ItemClickEvent = new ItemClickEvent(ItemClickEvent.ITEM_CLICK, true);
				
				Session.gameColor = color;
				Session.remainingTime = getRemainingTime();
				e.item = data;
				e.index = itemIndex;

				dispatchEvent(e);
			}

			private function initGame():void{
				
				var game:Game = (data as Game);
				
				for each (var player:Player in game.players){
					player.hasAlreadyPlayedHisTurn = player.lastTurnPlayed == game.currentTurn;
				}
				
				if(data.status == Game.IN_CREATION){
					color = 0x33AAFF;
					colorHovered = 0x33AAFF;
					colorSelected = 0x33AAFF;
				}
				else{
					for each (var player:Player in Session.profil.players){
						if(player.gameUID == data.gameUID){
							
							if(player.lastTurnPlayed < game.currentTurn){
								//vert clair
								color = 0x00FF33;
								colorHovered = 0x00FF33;
								colorSelected = 0x00FF33;
								player.hasAlreadyPlayedHisTurn = false;
							}
							else{
								// tour joue, mais tour toujours en cours
								// vert fonce
								color = 0x008b45;
								colorHovered = 0x008b45;
								colorSelected = 0x008b45;
								player.hasAlreadyPlayedHisTurn = true;
							}
							
							break;
						}
					}
				}
				
			}
			
			private function getRemainingTime():String{
				var now:Number = new Date().getTime();
				var tempsEcoule:Number = now - (data as Game).beginTurnTimeMillis;
				var tempsParTour:Number = (data as Game).nbMinByTurn*60*1000;
				
				// game.currentTurn a ete recalcule dans l'initGame()
				// donc si personne n'a joue et que les tours sont passes, le nouveau beginTurnTimeMillis n'a pas encore ete calcule
				// et il sera mis a + k*nbMinByTurn, k entier = nb de tour passes
				// on enleve les tranches des k tours passes entre temps
				while(tempsEcoule > tempsParTour)
					tempsEcoule -= tempsParTour;
				
				var heures:int = Math.floor((tempsParTour-tempsEcoule)/3600000);
				var min:int = Utils.round((tempsParTour-tempsEcoule-(heures*3600000))/60000,0);

				return "Il reste : " + (heures > 0 ? (heures + " h ") : '') + min + " min";
			}
		]]>
	</fx:Script>
	
	<s:transitions>
		<mx:Transition fromState="*" toState="hovered">
			<s:Animate target="{groupDetails}" duration="200">
				<s:SimpleMotionPath property="width" />
			</s:Animate>
		</mx:Transition>
		<mx:Transition fromState="hovered" toState="*">
			<s:Animate target="{groupDetails}" duration="200" >
				<s:SimpleMotionPath property="width" />
			</s:Animate>
		</mx:Transition>
		<mx:Transition fromState="selected" toState="*">
			<s:Animate target="{groupDetails}" duration="200" >
				<s:SimpleMotionPath property="width" />
			</s:Animate>
		</mx:Transition>
	</s:transitions>
	
	<s:Group id="groupDetails" height="20" width="300" width.hovered="340" width.selected="340">
		<s:Rect left="0" right="0" top="0" bottom="0" radiusX="5" radiusY="5">
			<s:fill>
				<s:SolidColor color="{color}" color.hovered="{colorHovered}" color.selected="{colorSelected}" alpha="0.6"/>
			</s:fill>
		</s:Rect>
		<s:Label id="labelName" 
				 color="#FFFFFF" 
				 left="20" 
				 verticalCenter="2"
				 text="{data.name}"/>
		<s:Label id="labelStatus" 
				 color="#FFFFFF" 
				 right="20" 
				 verticalCenter="2"
				 text="{data.status == Game.IN_CREATION ? Translations.CREATION.getItemAt(Session.LANGUAGE) : Translations.RUNNING.getItemAt(Session.LANGUAGE)}"/>
	</s:Group>
	
</s:ItemRenderer>
