<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:renderers="com.uralys.tribes.renderers.*"
		 xmlns:windows="com.uralys.tribes.windows.*" 
		 width="100%" height="100%"
		 creationComplete="init()" xmlns:components="com.uralys.tribes.components.*" >
	
	<fx:Declarations>
		<s:State name="board"/>
		<s:State name="city"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			//---------------------------------------------------------------------------------------//
			
			import com.uralys.tribes.commons.Numbers;
			import com.uralys.tribes.commons.Session;
			import com.uralys.tribes.commons.Translations;
			import com.uralys.tribes.core.BoardClickAnalyser;
			import com.uralys.tribes.core.BoardDrawer;
			import com.uralys.tribes.core.Pager;
			import com.uralys.tribes.core.UnitMover;
			import com.uralys.tribes.entities.Cell;
			import com.uralys.tribes.entities.City;
			import com.uralys.tribes.entities.Game;
			import com.uralys.tribes.entities.Move;
			import com.uralys.tribes.entities.Player;
			import com.uralys.tribes.entities.Unit;
			import com.uralys.tribes.main.ImageContainer;
			import com.uralys.tribes.managers.GameManager;
			import com.uralys.tribes.renderers.Pawn;
			import com.uralys.tribes.skins.ClassicProgressBarSkin;
			import com.uralys.tribes.skins.CustomProgressTrackSkin;
			import com.uralys.utils.Utils;
			
			import mx.containers.TitleWindow;
			import mx.core.FlexGlobals;
			import mx.effects.easing.Quadratic;
			import mx.events.ItemClickEvent;
			
			//---------------------------------------------------------------------------------------//
			
			[Bindable] public var selectedCity:City;
			
			//----------------------------------------------------------//

			protected function init():void
			{
				Session.timer.start();

				limitLeft = Session.MAP_WIDTH - mapPositioner.width;
				limitUp = Session.MAP_HEIGHT - mapPositioner.height;
				
				initBoard();
			}
			
			//---------------------------------------------------------------------------------------------------//
			// click sur une ville dans la barre laterale
			public function onCityClick(event:ItemClickEvent):void
			{
				var city:City = event.currentTarget.selectedItem;
				
				placeBoard(city.x, city.y);
				var caseBeingLoaded:Boolean = reloadCurrentCells();
				
				if(!caseBeingLoaded){
					BoardClickAnalyser.getInstance().clickOnCase(Session.map[city.x][city.y]);
				}
				
				return;
			}
			
			// click sur une unitÃ© dans la barre laterale
			public function onMyUnitClick(event:ItemClickEvent):void
			{
				var unit:Unit = event.currentTarget.selectedItem;
				unit.currentCaseUID = (unit.moves.getItemAt(0) as com.uralys.tribes.entities.Move).cellUID;
				
				placeBoard(Utils.getXFromCellUID(unit.currentCaseUID), Utils.getYFromCellUID(unit.currentCaseUID));
				var caseBeingLoaded:Boolean = reloadCurrentCells();
				
				if(!caseBeingLoaded){
					BoardClickAnalyser.getInstance().clickOnCase(Session.map[Utils.getXFromCellUID(unit.currentCaseUID)][Utils.getYFromCellUID(unit.currentCaseUID)]);
				}
				
				return;
			}
			
			//---------------------------------------------------------------------------------------------------//

			public function reloadCurrentCells(force:Boolean = false, refreshLandOwners:Boolean = false):Boolean{
				return checkToLoadCases(Utils.getXPixel(Session.CENTER_X), Utils.getYPixel(Session.CENTER_Y), force, refreshLandOwners);
			}
			
			private function checkToLoadCases(x:int, y:int, force:Boolean = false, refreshLandOwners = false):Boolean
			{
//				trace("-------------------------------------");
//				trace("checkToLoadCases | force : " + force);
//				trace("------");
//				trace("x : " + x);
//				trace("y : " + y);
//				trace("------");
//				trace("Session.LEFT_LIMIT_LOADED : " + Session.LEFT_LIMIT_LOADED);
//				trace("Session.RIGHT_LIMIT_LOADED : " + Session.RIGHT_LIMIT_LOADED);
//				trace("Session.TOP_LIMIT_LOADED : " + Session.TOP_LIMIT_LOADED);
//				trace("Session.BOTTOM_LIMIT_LOADED : " + Session.BOTTOM_LIMIT_LOADED);
//				trace("------");
//				trace("Session.CENTER_X : " + Session.CENTER_X);
//				trace("Session.CENTER_Y : " + Session.CENTER_Y);
//				trace("------");
				
				if(x < Session.LEFT_LIMIT_LOADED
				|| x > Session.RIGHT_LIMIT_LOADED 
				|| y < Session.TOP_LIMIT_LOADED 
				|| y > Session.BOTTOM_LIMIT_LOADED
				|| force)
				{
					trace("-------------------------------------");
					trace("checkToLoadCases  ==>  LOAD");
					GameManager.getInstance().loadCells(Session.CENTER_X, Session.CENTER_Y, refreshLandOwners);
					return true;
				}
				
				return false;
			}
			
			//-----------------------------------------------------------//
			
			// set params est appelee avant creationComplete (init())
			public function set params(args:Array):void
			{
				FlexGlobals.topLevelApplication.loginWindow.closeWindow();
				selectedCity = Session.player.cities.getItemAt(0) as City;
				
				if(Session.player.name == "New Player"){
					showChangeName.play();
				}
			}
			
			//-----------------------------------------------------------//
			
			protected function initCitiesList():void{
				citiesList.addEventListener(ItemClickEvent.ITEM_CLICK, onCityClick);
			}

			protected function initUnitsList():void{
				unitsList.addEventListener(ItemClickEvent.ITEM_CLICK, onMyUnitClick);
			}
			
			// ------------------------------------------------------------------------// 
			// 		map scrolling
			
			private var mayDrag:Boolean = false;
			private var isDragging:Boolean = false;
			private var draggingImageXFrom:int;
			private var draggingImageYFrom:int;
			private var limitLeft:int;
			private var limitUp:int;
			
			protected function mouseDown(event:MouseEvent):void
			{
				mayDrag = true;
				draggingImageXFrom = event.currentTarget.mouseX; // le x de la souris sur le mapContainer
				draggingImageYFrom = event.currentTarget.mouseY; // le y de la souris sur le mapContainer
				
				if(Session.MOVE_A_UNIT){
					// manipulation d'une unite
				}
			}
			
			protected function mouseMove(event:MouseEvent):void
			{
				if(mayDrag)
					isDragging = true;
				
				if(Session.MOVE_A_UNIT){
					// manipulation d'une unite
				}
				
				if(isDragging)
				{
					// on decale l'image du nombre de pixels du dernier mouvement
					// donc elle suit bien la souris et event.localXY a bien lieu au meme endroit sur l'image apres chaque mouseMove
					mapPositioner.x += (event.currentTarget.mouseX - draggingImageXFrom);
					mapPositioner.y += (event.currentTarget.mouseY - draggingImageYFrom);
					
					Session.CENTER_X = Utils.getXCoordinate(Session.MAP_WIDTH/2 - mapPositioner.x);
					Session.CENTER_Y = Utils.getYCoordinate(Session.MAP_HEIGHT/2 - mapPositioner.y);
					
					if(Math.abs(Session.CENTER_X-Session.CENTER_Y)%2 !=0){
						// la difference entre x et y n'est pas paire
						// c'est une 'non case' : un hexagone intermediaire qui ne fait pas partie du plateau
						// on prend l'hexagone du dessus
						Session.CENTER_Y -= 1;
					}
				}
			}
			
			public function simulateClick():void{
				mouseUp();
			}
			
			protected function mouseUp(event:MouseEvent = null):void
			{
				trace("mouseUp");
				mayDrag = false;
				
				enterCityForm.visible = false;
				enterCityForm.includeInLayout = false;
				
				if(!isDragging && Session.MOVE_A_UNIT){
					//newMoveAdded = UnitMover.getInstance().recordMove();
				}
				else{
					try{
						Session.CURRENT_SELECTION_X = Session.COORDINATE_X;
						Session.CURRENT_SELECTION_Y = Session.COORDINATE_Y;
						
						Session.CURRENT_CELL_SELECTED = Session.map[Session.CURRENT_SELECTION_X][Session.CURRENT_SELECTION_Y];
					}
					catch(e:Error){
						// au chargement Session.map peut etre null, et la souris etre sur une image de bord
					}
				}
				
				isDragging = false;
				Mouse.show();
				reloadCurrentCells();
			}
			
			// ------------------------------------------------------------------------// 
			// 	minimap scrolling
			
			protected function mouseUpMiniMap(event:MouseEvent):void{
				isDragging = false;
			}

			protected function mouseDownMiniMap(event:MouseEvent):void{
				mapPositioner.x = 250 - event.localX*15;
				mapPositioner.y = 250 - event.localY*15;
				
				isDragging = true;
			}

			protected function mouseMoveMiniMap(event:MouseEvent):void{
				if(isDragging){
					mapPositioner.x = Session.MAP_WIDTH/2 - event.localX*15;
					mapPositioner.y = Session.MAP_WIDTH/2 - event.localY*15;
				}
			}
				
			//==============================================================================================================//
			// 	Game management
			
			private function initBoard():void
			{
				currentState = "board";
				
				if(selectedCity == null){
					FlexGlobals.topLevelApplication.message('GAME OVER ON THIS SERVER', 700);
					Session.GAME_OVER = true;
					
					selectedCity = new City();
					selectedCity.x = 100;
					selectedCity.y = 100;
					
					GameManager.getInstance().initMap(100, 100);
				}
				
				//------------------------------------------------------------//

				Session.board = this;
				placeBoard(selectedCity.x, selectedCity.y, false);
				
				GameManager.getInstance().refreshPlayer(Session.player);

				//------------------------------------------------------------//
			
				try{
					FlexGlobals.topLevelApplication.createConflicts();	
				}
				catch(error:Error){}

				//------------------------------------------------------------//
				
			}
	
			//----------------------------------------------------------------------------------------//

			/**
			 * le BoardClickListener regarde si il y a une ville dans la case clickee et arrive ici
			 */ 
			public function showEnterCity(city:City):void
			{
				trace("SHOW ENTER CITY");
				if(Session.MOVE_A_UNIT){
					return;
				}
				
				for each(var cityInSession:City in Session.player.cities)
				{
					if(cityInSession.cityUID == city.cityUID){
						selectedCity = cityInSession;
						trace("found selectedCity");
						break;
					}
				}
				
				// on calcule si ce n'a pas Ã©tÃ© fait avant
				GameManager.getInstance().refreshCityWorkersOnResources(false, selectedCity, false);
				
				enterCityForm.includeInLayout = true;
				enterCityForm.visible = true;				
				enterCityButton.enabled = selectedCity.beginTime < new Date().getTime();
				
				setBuildingCityProgressBar();
			}
				

			private function setBuildingCityProgressBar():void
			{
				var millisRemaining:Number = selectedCity.beginTime - new Date().getTime(); 
				
				var millisSpent:Number = Numbers.TIME_TO_BUILD_A_CITY - millisRemaining;
				
				var hours:int = millisRemaining/60/60/1000;
				var minutes:int = (millisRemaining-hours*60*60*1000)/60/1000;
				
				buildingCityProgessBar.setProgress( millisSpent, Numbers.TIME_TO_BUILD_A_CITY );
				labelBuildingCity.text = Translations.CITY_BUILDING_DONE.getItemAt(Session.LANGUAGE) + " " +(hours>9 ? "" : "0") + hours + "h"+ (minutes>9 ? "" : "0") + minutes;
			}
			
			private function enterCity(event:MouseEvent):void
			{
				cityForm.refreshCity();
				goLeft.play();
				appearCity.play();
				
				currentState = "city";
			}
			
			

			//-----------------------------------------------------------//

			private function saveCityAndGoBackToBoard():void
			{				
				trace("-----");
				trace("saveCityAndGoBackToBoard");
				// on force la validation du marchand si il existe et qu'il reste dans la ville
				// si il est en mouvement, on ne peut pas l'editer donc pas besoin d'appeler le validateMerchants (qui casserait tout en placant le timeTo Ã  -1) 
				if(selectedCity.caravan != null 
				&& (selectedCity.caravan.moves.length == 1 || selectedCity.caravan.status == Unit.INTERCEPTED_ON_THIS_CASE))
				{
					Session.CURRENT_CELL_SELECTED.caravan = selectedCity.caravan;
					GameManager.getInstance().validateUnit(selectedCity.caravan);
	
					if(selectedCity.caravan.status == Unit.TO_BE_CREATED)
						selectedCity.population -= selectedCity.caravan.size; 
				}

				// IDEM pour army
				if(selectedCity.army != null 
				&& (selectedCity.army.moves.length == 1 || selectedCity.army.status == Unit.INTERCEPTED_ON_THIS_CASE))
				{
					Session.CURRENT_CELL_SELECTED.army = selectedCity.army;
					GameManager.getInstance().validateUnit(selectedCity.army);
					
					if(selectedCity.army.status == Unit.TO_BE_CREATED)
						selectedCity.population -= selectedCity.army.size; 
				}
				
				GameManager.getInstance().saveCity(selectedCity);
				hideCity.play();
				comeBack.play();
				
				currentState = "board";
			}
			
//			
//			private function saveTurn():void{
//				
//				Session.TURN_SAVING_DONE = false;
//				
//				//------------------------------------------------------------------//
//
//				for each(var city:City in Session.currentPlayer.cities){
//					
//					city.wheat += city.wheatEarned - city.wheatSpent;
//					city.wood += city.woodEarned - city.woodSpent;
//					city.iron += city.ironEarned - city.ironSpent;
//					city.population += city.armyReleased - city.armyRaised;
//					
//					for each(var equipment:Equipment in city.equipmentStock){
//						switch(equipment.item.name){
//							case "bow" :
//								equipment.size = city.bowStock
//												+ city.bowsRestored
//												- city.bowsEquiped
//												+ city.bowWorkers * equipment.item.peopleRequired;
//								
//								break;
//							case "sword" :
//								equipment.size = city.swordStock
//												+ city.swordsRestored
//												- city.swordsEquiped
//												+ city.swordWorkers * equipment.item.peopleRequired;
//								break;
//							case "armor" :
//								equipment.size = city.armorStock
//											+ city.armorsRestored
//											- city.armorsEquiped
//											+ city.armorWorkers * equipment.item.peopleRequired;
//								break;
//						}
//					}
//
//					for each(var smith:Smith in city.smiths){
//						switch(smith.item.name){
//							case "bow" :
//								smith.people = city.bowWorkers;
//								break;
//							case "sword" :
//								smith.people = city.swordWorkers;
//								break;
//							case "armor" :
//								smith.people = city.armorWorkers;
//								break;
//						}
//					}
//				}
//				
//				for each(var army:Army in Session.currentPlayer.armies){
//					if(army.armyUID == "new"){
//						var bows:Equipment = new Equipment();
//						var swords:Equipment = new Equipment();
//						var armors:Equipment = new Equipment();
//						
//						bows.size = army.bows;
//						swords.size = army.swords;
//						armors.size = army.armors;
//						
//						for each(var equipment:Equipment in city.equipmentStock){
//							switch(equipment.item.name){
//								case "bow" :
//									bows.item = equipment.item;
//									break;
//								case "sword" :
//									swords.item = equipment.item;
//									break;
//								case "armor" :
//									armors.item = equipment.item;
//									break;
//							}
//						}
//						
//						army.equipments.addItem(bows);
//						army.equipments.addItem(swords);
//						army.equipments.addItem(armors);
//					}
//					else{
//						for each(var equipment:Equipment in army.equipments){
//							switch(equipment.item.name){
//								case "bow" :
//									equipment.size = army.bows;
//									break;
//								case "sword" :
//									equipment.size = army.swords;
//									break;
//								case "armor" :
//									equipment.size = army.armors;
//									break;
//							}
//						}
//					}
//					
//					// on ne passe pas les info graphiques par BlazesDS : inutile et surtout ca casse tout (objets enormes passes en AMF, ce qui casse le transfert)
//					army.armyCircle = null;
//					army.ellipseTo = null;
//					army.lineTo = null;
//					army.tmpLandSquare = null;
//				}
//				
//				for each(var merchant:Army in Session.currentPlayer.merchants){
//					
//					// on ne passe pas les info graphiques par BlazesDS : inutile et surtout ca casse tout (objets enormes passes en AMF, ce qui casse le transfert)
//					merchant.armyCircle = null;
//					merchant.ellipseTo = null;
//					merchant.lineTo = null;
//					merchant.tmpLandSquare = null;
//				}
//				
//				//------------------------------------------------------------------//
//				
//				FlexGlobals.topLevelApplication.conflictsWindow.conflictsGroup.removeAllElements();
//				Session.currentPlayer.lastTurnPlayed ++;
//				GameManager.getInstance().saveTurn(Session.currentPlayer);
//				Pager.getInstance().goToPage(Home, Home.CURRENT_GAMES, Session.GAMES_PLAYING);
//			}
// 
			//================================================================================//
//			
//			private function calculateLands():void{
//				for each (var player:Player in game.players){
//					var lands:ArrayCollection = new ArrayCollection();
//					for each (var city:City in player.cities){
//						
//						// de 0 a 29
//						var cityLandXmin:int = Math.floor((city.x - city.radius)/Numbers.LAND_WIDTH);	
//						var cityLandXmax:int = Math.floor((city.x + city.radius)/Numbers.LAND_WIDTH);	
//						var cityLandYmin:int = Math.floor((city.y - city.radius)/Numbers.LAND_HEIGHT);	
//						var cityLandYmax:int = Math.floor((city.y + city.radius)/Numbers.LAND_HEIGHT);
//						
//						for(var i:int=cityLandXmin; i <= cityLandXmax; i++){
//							for(var j:int=cityLandYmin; j <= cityLandYmax; j++){
//								var landNumber:int = mapPositioner.width/Numbers.LAND_WIDTH * j + i;
//								lands.addItem(landNumber);
//							}
//						}
//					}
//
//					for each(var landNumberOwnedYet:int in player.lands){
//						var found:Boolean = false;
//						
//						for each(var landNumberFromPreviousCities:int in lands){
//							if(landNumberFromPreviousCities == landNumberOwnedYet){
//								found = true;
//								break;
//							}
//						}
//						
//						if(!found){
//							lands.addItem(landNumberOwnedYet);
//						}
//					}
//					
//					player.lands = lands;
//					if(Session.player.uralysUID == player.uralysUID) // refresh
//						Session.player.lands = player.lands;
//					
//				}
//			}
//			

			public function placeBoard(x:int, y:int, simulateMouseClick:Boolean = true):void
			{
				trace("placeBoard  : " + x + " | " + y);
				mapPositioner.x = Session.MAP_WIDTH/2 
					- Utils.getXPixel(x)
					- Utils.getLandWidth()/2;
				mapPositioner.y = Session.MAP_HEIGHT/2 
					- Utils.getYPixel(y)
					- Utils.getLandHeight()/2;
				trace("mapPositioner  : " + mapPositioner.x + " | " + mapPositioner.y);

				
				Session.CENTER_X = x;
				Session.CENTER_Y = y;
				
				Session.COORDINATE_X = x;
				Session.COORDINATE_Y = y;
				
				if(simulateMouseClick)
					mouseUp(); // simule le click sur la case x,y
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:Move id="goLeft"
				 xTo="-1500"
				 target="{main}"
				 duration="350"
				 easingFunction="{Quadratic.easeIn}"/>
		<mx:Move id="comeBack"
				 xTo="0"
				 target="{main}"
				 easingFunction="{Quadratic.easeIn}"/>

		<mx:Move id="appearCity"
				 xTo="0"
				 target="{cityGroup}"
				 easingFunction="{Quadratic.easeIn}"/>
		<mx:Move id="hideCity"
				 xTo="1500"
				 target="{cityGroup}"
				 easingFunction="{Quadratic.easeIn}"/>
		
		
		<s:Move id="hideChangeName" target="{changeNameWindow}" xTo="-375"/>
		<s:Move id="showChangeName" target="{changeNameWindow}" xTo="0"/>

		<s:Move id="hideCityChangeName" target="{changeCityNameWindow}" xTo="-375"/>
		<s:Move id="showCityChangeName" target="{changeCityNameWindow}" xTo="0"/>
		
	</fx:Declarations>
	
	<s:Group id="main" width="100%" height="100%">
		
		<s:VGroup horizontalAlign="left" top="70" left="15">
			<s:Label text="{Translations.MY_CITIES.getItemAt(Session.LANGUAGE)}"/>
			<s:Scroller height="200">
				<s:Group>
					<s:List id="citiesList"
							itemRenderer="com.uralys.tribes.renderers.CityListRenderer"
							dataProvider="{Session.player.cities}"
							borderVisible="false"
							width="240"
							contentBackgroundAlpha="0"
							creationComplete="initCitiesList()">
						<s:layout>
							<s:VerticalLayout gap="1" useVirtualLayout="true" />
						</s:layout>
					</s:List>
				</s:Group>
			</s:Scroller>
			<s:Label text="{Translations.MY_UNITS.getItemAt(Session.LANGUAGE)}"
					 visible="{Session.player.units.length > 0}"/>
			<s:Scroller height="200">
				<s:Group>
					<s:List id="unitsList"
							itemRenderer="com.uralys.tribes.renderers.UnitListRenderer"
							dataProvider="{Session.player.units}"
							borderVisible="false"
							width="240"
							contentBackgroundAlpha="0"
							creationComplete="initUnitsList()">
						<s:layout>
							<s:VerticalLayout gap="1" useVirtualLayout="true" />
						</s:layout>
					</s:List>
				</s:Group>
			</s:Scroller>
		</s:VGroup>
		
		<!-- =============================================================================================== -->
		<!-- Units Tab -->
		
		<s:VGroup id="enterCityForm"
				  top="70" 
				  x="{boardImage.x+Session.MAP_WIDTH + 65}"
				  visible="false"
				  includeInLayout="false"
				  horizontalAlign="center"
				  paddingTop="5"
				  width="200">
			<s:HGroup>
				<s:Label text="{Translations.CITY.getItemAt(Session.LANGUAGE)} : {Session.CURRENT_CELL_SELECTED.city.name} ({Session.CURRENT_CELL_SELECTED.city.population})"
						  click="if(Session.player.playerUID == Session.CURRENT_CELL_SELECTED.landOwner.playerUID)showCityChangeName.play()"/>
				<mx:Image source="{ImageContainer.getImage(ImageContainer.EDIT)}"
					  click="showCityChangeName.play()"
					  visible="{Session.player.playerUID == Session.CURRENT_CELL_SELECTED.landOwner.playerUID}"/>
			</s:HGroup>
			<renderers:PlayerName player="{Session.player.playerUID == Session.CURRENT_CELL_SELECTED.landOwner.playerUID ? Session.player : Session.CURRENT_CELL_SELECTED.landOwner}"/>
			
			<s:Button label="{Translations.ENTER_CITY.getItemAt(Session.LANGUAGE)}" 
					  id="enterCityButton"
					  click="enterCity(event)"
					  skinClass="com.uralys.tribes.skins.CustomButtonSkin"
					  visible="{Session.player.playerUID == Session.CURRENT_CELL_SELECTED.landOwner.playerUID}"/>
			<mx:ProgressBar id="buildingCityProgessBar"
							width="120"
							right="0" top="0"
							mode="manual"
							trackSkin="{CustomProgressTrackSkin}"
							barSkin="{ClassicProgressBarSkin}"
							label="" 
							includeInLayout="{!enterCityButton.enabled}"
							visible="{!enterCityButton.enabled}"
							labelPlacement="top"/>
			<s:Label id="labelBuildingCity"
					 includeInLayout="{!enterCityButton.enabled}"
					 visible="{!enterCityButton.enabled}"/>
			
			<s:Button label="{Translations.REFRESH.getItemAt(Session.LANGUAGE)}" 
					  id="refreshOpponentButton"
					  click="{GameManager.getInstance().getPlayer(Session.CURRENT_CELL_SELECTED.landOwner)}"
					  skinClass="com.uralys.tribes.skins.CustomButtonSkin"
					  visible="{Session.player.playerUID != Session.CURRENT_CELL_SELECTED.landOwner.playerUID
					  		&amp;&amp; Session.CURRENT_CELL_SELECTED.landOwner.lastStep &lt; Session.player.lastStep}"/>
		</s:VGroup>
		
		<s:VGroup id="unitForm"
				  top="210" 
				  x="{boardImage.x+Session.MAP_WIDTH + 65}"
				  visible="{Session.CURRENT_CELL_SELECTED != null 
						  &amp;&amp; 
						  ((Session.CURRENT_CELL_SELECTED.army !=null 
						  &amp;&amp; Session.CURRENT_CELL_SELECTED.army.size > 0)
						  ||
				  		  (Session.CURRENT_CELL_SELECTED.caravan !=null 
						  &amp;&amp; Session.CURRENT_CELL_SELECTED.caravan.size > 0))}"
				  horizontalAlign="center"
				  paddingTop="5"
				  width="200">
			
			<mx:HRule width="180"/>
			<components:UnitRenderer unit="{Session.CURRENT_CELL_SELECTED.army}" 
									visible="{Session.CURRENT_CELL_SELECTED != null &amp;&amp; Session.CURRENT_CELL_SELECTED.army !=null &amp;&amp; Session.CURRENT_CELL_SELECTED.army.size > 0}"/>
			<mx:HRule width="180"/>
			<components:UnitRenderer unit="{Session.CURRENT_CELL_SELECTED.caravan}" 
									visible="{Session.CURRENT_CELL_SELECTED != null &amp;&amp; Session.CURRENT_CELL_SELECTED.caravan !=null &amp;&amp; Session.CURRENT_CELL_SELECTED.caravan.size > 0}"/>
		</s:VGroup>

		<s:CheckBox id="checkboxBars"
					selected="@{Session.LANDS_VISIBLE}" 
					label="{Translations.SHOW_LANDS.getItemAt(Session.LANGUAGE)}"
					right="95"
					bottom="70"/>
		<s:CheckBox id="checkboxLands"
					selected="@{Session.SHOW_MOVES_PROGRESS_BARS}" 
					label="{Translations.PROGRESS_BARS.getItemAt(Session.LANGUAGE)}"
					right="95"
					bottom="44"/>

		<!-- =============================================================================================== -->
		
		<s:HGroup width="100%" horizontalAlign="center" paddingTop="5">
			<s:Label text="X : {Session.COORDINATE_X}"/>
			<mx:Spacer width="200"/>
			<s:Label text="Y : {Session.COORDINATE_Y}"/>
		</s:HGroup>

		<!-- =============================================================================================== -->

		<s:Group width="100%">
			<s:HGroup width="100%" horizontalAlign="center" paddingTop="50">
				<s:Group width="{Session.MAP_WIDTH}" height="{Session.MAP_HEIGHT}"
						 id="boardImage"
						 clipAndEnableScrolling="true"	  
						 useHandCursor="true">
					<s:Group id="mapPositioner" 
						  buttonMode="true"
						  width="{Numbers.LAND_WIDTH*400}"
						  height="{Numbers.LAND_HEIGHT*400}"
						  mouseDown="mouseDown(event)"
						  mouseMove="mouseMove(event)"
						  mouseUp="mouseUp(event)"/>
					<s:Group id="landLayer"
							 visible="{Session.LANDS_VISIBLE}"
							 width="{Numbers.LAND_WIDTH*400}"
							 height="{Numbers.LAND_HEIGHT*400}"
							 x="{mapPositioner.x}"
							 y="{mapPositioner.y}"
							 mouseEnabled="false"
							 mouseChildren="false"
							 mouseEnabledWhereTransparent="false"/>
					<s:Group id="pawnLayer"
							 width="{Numbers.LAND_WIDTH*400}"
							 height="{Numbers.LAND_HEIGHT*400}"
							 x="{mapPositioner.x}"
							 y="{mapPositioner.y}"
							 mouseEnabled="false"
							 mouseChildren="false"
							 mouseEnabledWhereTransparent="false"/>
					<s:Group id="highlighters"
							 width="{Numbers.LAND_WIDTH*400}"
							 height="{Numbers.LAND_HEIGHT*400}"
							 x="{mapPositioner.x}"
							 y="{mapPositioner.y}"
							 mouseEnabled="false"
							 mouseChildren="true"
							 mouseEnabledWhereTransparent="false">
						
						<mx:Image id="currentMouseHighLightNormal"
								  source="{ImageContainer.getImage(ImageContainer.HIGHLIGHT_BLANC)}"
								  visible="{!Session.MOVE_A_UNIT}"
								  x="{Session.COORDINATE_X * (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4) * BoardDrawer.getInstance().scale}"
								  y="{Session.COORDINATE_Y * (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2) * BoardDrawer.getInstance().scale}"
								  scaleX="{BoardDrawer.getInstance().scale}"
								  scaleY="{BoardDrawer.getInstance().scale}"
								  mouseEnabled="false"/>

						<mx:Image id="currentMouseHighLight4UnitMoves"
								  source="{ImageContainer.getImage(ImageContainer.HIGHLIGHT_BLANC)}"
								  visible="{Session.MOVE_A_UNIT}"
								  x="{Session.COORDINATE_X * (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4) * BoardDrawer.getInstance().scale}"
								  y="{Session.COORDINATE_Y * (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2) * BoardDrawer.getInstance().scale}"
								  scaleX="{BoardDrawer.getInstance().scale}"
								  scaleY="{BoardDrawer.getInstance().scale}"
								  mouseEnabled="false"/>

						<mx:Image id="currentSelectionHighLight"
								  source="{ImageContainer.getImage(ImageContainer.HIGHLIGHT_BLANC)}"
								  x="{Session.CURRENT_SELECTION_X * (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4) * BoardDrawer.getInstance().scale}"
								  y="{Session.CURRENT_SELECTION_Y * (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2) * BoardDrawer.getInstance().scale}"
								  scaleX="{BoardDrawer.getInstance().scale}"
								  scaleY="{BoardDrawer.getInstance().scale}"
								  mouseEnabled="false"/>
						
					</s:Group>
 				</s:Group>
					
			</s:HGroup>
			<mx:Image source="{ImageContainer.MAP_BORDER_TOP}"
					  x="{boardImage.x-31}"
					  y="{boardImage.y-31}"
					  mouseOver="if(isDragging)mouseUp(event)"/>
			<mx:Image source="{ImageContainer.MAP_BORDER_BOTTOM}"
					  x="{boardImage.x-31}"
					  y="{boardImage.y+Session.MAP_HEIGHT - 31}"
					  mouseOver="if(isDragging)mouseUp(event)"/>
			<mx:Image source="{ImageContainer.MAP_BORDER_LEFT}"
					  x="{boardImage.x-31}"
					  y="{boardImage.y + 31}"
					  mouseOver="if(isDragging)mouseUp(event)"/>
			<mx:Image source="{ImageContainer.MAP_BORDER_RIGHT}"
					  x="{boardImage.x+Session.MAP_WIDTH - 31}"
					  y="{boardImage.y + 31}"
					  mouseOver="if(isDragging)mouseUp(event)"/>
			
			<mx:Image source="{ImageContainer.ZOOM_IN}"
					  id="zoomInButton"
					  visible="{!Session.MOVE_A_UNIT &amp;&amp; !Session.WAIT_FOR_SERVER}"
					  x="{boardImage.x + 25}"
					  y="{boardImage.y - 15}"
					  click="{BoardDrawer.getInstance().zoom()}"/>
			<mx:Image source="{ImageContainer.ZOOM_OUT}"
					  id="zoomOutButton"
					  visible="{!Session.MOVE_A_UNIT &amp;&amp; !Session.WAIT_FOR_SERVER}"
					  x="{boardImage.x + 60}"
					  y="{boardImage.y - 14}"
					  click="BoardDrawer.getInstance().unzoom()"/>
			<mx:Image source="{ImageContainer.REFRESH}"
					  id="refreshButton"
					  visible="{!Session.MOVE_A_UNIT &amp;&amp; !Session.WAIT_FOR_SERVER}"
					  x="{boardImage.x + 95}"
					  y="{boardImage.y - 13}"
					  click="{GameManager.getInstance().getPlayer(Session.player)}"/>
		</s:Group>
	</s:Group>
	
	<!-- ====================================================================================== -->
	<!-- city -->
	
	
	<s:VGroup horizontalAlign="center" 
			  paddingTop="50"
			  id="cityGroup" 
			  width="{main.width}" 
			  height="{main.height}"
			  x="1500"
			  includeInLayout="false">
		<s:HGroup>
			<s:Button label="&lt;-- {Translations.VALIDATE_MODIFICATIONS.getItemAt(Session.LANGUAGE)}" 
					  click="{saveCityAndGoBackToBoard()}"
					  skinClass="com.uralys.tribes.skins.CustomButtonSkin"
					  enabled="{cityForm.currentState != 'recordingUnit'}"/>
			<mx:Spacer width="450"/>
		</s:HGroup>
		<components:CityForm 
				id="cityForm"
			    city="@{selectedCity}"/>
		<mx:Spacer height="55"/>
	</s:VGroup>
		 
	<!-- ====================================================================================== -->
	
	<mx:Image source="{ImageContainer.MINI_LOGO}" right="70" y="-7"/>
	<renderers:StepProgress top="7" left="20"/>
			  
	<mx:SWFLoader source="{ImageContainer.LOADING}" 
		 		  visible="{Session.WAIT_FOR_SERVER}"
				  x="{boardImage.x+50}"
				  y="{boardImage.y+Session.MAP_HEIGHT - 16}"
				  excludeFrom="city"
				  rotation="2"/>
	
	<!-- ====================================================================================== -->
	
	<windows:ChangeName id="changeNameWindow" x="-375" y="100" type="1"/>
	<windows:ChangeName id="changeCityNameWindow" x="-375" y="100" type="2"/>
</s:Group>
