<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:components="com.uralys.tribes.components.*"
		 horizontalAlign="center"
		 verticalAlign="middle"
		 paddingLeft="20"
		 paddingRight="20"
		 creationComplete="refresh()" 
		 >
	
	<fx:Declarations>
		<s:State name="upgradeEnabled"/>
		<s:State name="building"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[		
			import com.uralys.tribes.commons.Numbers;
			import com.uralys.tribes.commons.Session;
			import com.uralys.tribes.commons.Translations;
			import com.uralys.tribes.entities.City;
			import com.uralys.tribes.entities.Item;
			import com.uralys.tribes.entities.Stock;
			import com.uralys.tribes.main.ImageContainer;
			import com.uralys.tribes.managers.GameManager;
			import com.uralys.tribes.skins.CustomButtonSkin;
			import com.uralys.tribes.skins.WorkersProgressBarSkin;
			import com.uralys.tribes.skins.WorkersProgressTrackSkin;
			import com.uralys.utils.Utils;
			
			import mx.core.mx_internal;
		
			//-------------------------------------------------------------------------------------//
	
			[Bindable] public var item:Item;

			[Bindable] private var potentialSmiths:int;
			[Bindable] public var smiths:int;
			[Bindable] public var stock:int;
			[Bindable] public var stockCapacity:int;
			[Bindable] public var weaponsAdded:int;
			[Bindable] public var timeForThisWeapon:Number; // ms

			[Bindable] public var beginTime:Number;
			[Bindable] public var endTime:Number;
			
			[Bindable] public var city:City;
			
			[Bindable] public var imageToolTip:String;
			[Bindable] public var image:Class;

			[Bindable] public var showLastLine:Boolean = true;
			
			//-------------------------------------------------------------------------------------//

			public function refresh():void
			{
				potentialSmiths = 0;
				Session.timer.removeEventListener(TimerEvent.TIMER, setBuilding);
				
				if(beginTime == -1)
					currentState = "upgradeEnabled";
				else{
					potentialSmiths = smiths;
					setBuilding();
				}
				
				// 60 items par heure et 1 par minute
				timeLabel.text = 'timeForThisWeapon';
			}

			//-------------------------------------------------------------------------------------//
			
			protected function smithCheck(event:Event):void	
			{
				var peopleAdded:int = smithsSlider.value - potentialSmiths;
				
				if(city.availableSmiths < peopleAdded)
					smithsSlider.value = potentialSmiths + city.availableSmiths;
				
				potentialSmiths = smithsSlider.value;
				var itemsCreated:int = potentialSmiths/item.peopleRequired;
				
			}
			
			//-------------------------------------------------------------------------------------//

			private function build():void
			{
				// on est en double binding : le city.stock correspondant va etre MAJ
				smiths = potentialSmiths;
				weaponsAdded = smiths/item.peopleRequired;
				beginTime = new Date().getTime();
				endTime = beginTime + timeForThisWeapon;
				
				city.wood -= weaponsAdded * item.wood;
				city.iron -= weaponsAdded * item.iron;
				
				GameManager.getInstance().saveCity(city);
				GameManager.getInstance().updateWorkersProgressBar();
				
				trace("build : " + smiths);
				setBuilding();
			}

			//-------------------------------------------------------------------------------------//
			
			private function setBuilding(event:TimerEvent = null):void
			{
				var now:Number = new Date().getTime();
				var millisRemaining:Number = endTime - now;
				var millisSpent:Number = endTime - beginTime - millisRemaining;

				if(millisRemaining <= 0){
					if(event != null)
						done();
				}
				else{
					var hours:int = millisRemaining/60/60/1000;
					var minutes:int = (millisRemaining-hours*60*60*1000)/60/1000;
					var secondes:int = (millisRemaining-hours*60*60*1000 - minutes*60*1000) /1000;
					
					buildingProgressBar.setProgress( millisSpent, endTime - beginTime );
					buildingProgressBar.label = (hours != 0 ? hours+" h " : '')+(minutes>9 ? "" : "0")+minutes+" mn "+(secondes>9 ? "" : "0")+secondes+' s';
					
					currentState = "building";
	
					Session.timer.addEventListener(TimerEvent.TIMER, setBuilding);
				}
			}
			
			//-------------------------------------------------------------------------------------//
			
			// appelee si on a chargé la progress bar et que le temps est ecoulé
			protected function done():void
			{
				Session.timer.removeEventListener(TimerEvent.TIMER, setBuilding);
				
				for each(var _stock:Stock in city.stocks)
				{
					if(Utils.getStockItem(_stock.stockUID) == item.name){
						GameManager.getInstance().updateStockBuildingStatus(city, _stock);
						break;
					}
				}
				
				smiths = 0;
				refresh();
				GameManager.getInstance().updateWorkersProgressBar();
			}
			
			//-------------------------------------------------------------------------------------//
			
		]]>
	</fx:Script>
	
	
	
	<s:HGroup width="100%" 
			  verticalAlign="middle"
			  paddingRight.building="50">

		<s:VGroup horizontalAlign="center">
			<s:HGroup verticalAlign="middle" width="130">		
				<s:Label text="{potentialSmiths}" 
						 styleName="numberLabel" 
						 textAlign="right"
						 minWidth="60"/>
				<s:Image source="{ImageContainer.PEOPLE}"/>
			</s:HGroup>
			<s:HSlider id="smithsSlider"
					   showDataTip="false"
					   liveDragging="true" 
					   value="@{potentialSmiths}"
					   change="smithCheck(event)"
					   maximum="{city.unemployed + potentialSmiths &lt; (stockCapacity - stock)/item.peopleRequired ? city.unemployed + potentialSmiths : (stockCapacity - stock)/item.peopleRequired}"
					   snapInterval="1"
					   enabled.building="false"
					   enabled.upgradeEnabled="true"/>
		</s:VGroup>
		
		<s:Spacer width="100%"/>
		<s:HGroup width="100%"
				  visible.building="false"
				  includeInLayout.building="false">
			<s:Image toolTip="{Translations.WOOD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WOOD}" width="25" height="25"/>
			<s:Label text="{potentialSmiths/item.peopleRequired * item.wood}"
					 color="{potentialSmiths/item.peopleRequired * item.wood &lt;= city.wood ? Numbers.GREEN : Numbers.RED}"/>
	
			<s:Spacer width="20"/>
			<s:Image toolTip="{Translations.IRON.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.IRON}" width="25" height="25"/>
			<s:Label text="{potentialSmiths/item.peopleRequired * item.iron}"
					 color="{potentialSmiths/item.peopleRequired * item.iron &lt;= city.iron ? Numbers.GREEN : Numbers.RED}"/>
	
			<s:Spacer width="20"/>
			<s:Image toolTip="{Translations.TIME.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.CLOCK}"/>
			<s:Label id="timeLabel" width="120"/>
		</s:HGroup>
		<s:Spacer width="90"
				  visible.upgradeEnabled="false"
				  includeInLayout.upgradeEnabled="false"/>
		<mx:ProgressBar id="buildingProgressBar"
						width="185"
						height="20"
						mode="manual"
						barSkin="{WorkersProgressBarSkin}"
						trackSkin="{WorkersProgressTrackSkin}"
						label="" 
						labelPlacement="bottom"
						color="0xffffff"
						visible.upgradeEnabled="false"
						includeInLayout.upgradeEnabled="false"/>
		
	</s:HGroup>
	<s:HGroup width="100%" 
			  verticalAlign="middle"
			  horizontalAlign="center">
		
		<s:Label text="{stock}/{stockCapacity}" styleName="numberLabel"/>
		<s:Image toolTip="{imageToolTip}" source="{image}"/>
		<s:Image source="{ImageContainer.UPGRADE_ARROW}"/>
		<s:Label text="{stock + potentialSmiths * item.peopleRequired}/{stockCapacity}"
				 color="{Numbers.GREEN}" width="150"/>
		
		<s:Spacer width="100%"/>
		<s:Button skinClass="{CustomButtonSkin}"
				  label="{Translations.UPGRADE.getItemAt(Session.LANGUAGE)}"
				  enabled="{potentialSmiths/item.peopleRequired * item.wood &lt;= city.wood
				  			&amp;&amp;
				  			potentialSmiths/item.peopleRequired * item.iron &lt;= city.iron
				  			&amp;&amp;
				  			potentialSmiths &gt; 0
				  			}"
				  click="build()"
				  visible.building="false"
				  includeInLayout.building="false"
				  />
	</s:HGroup>
	<components:HRule width="100%" visible="{showLastLine}"/>
</s:VGroup>
