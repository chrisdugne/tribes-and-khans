<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:forms="com.uralys.renderers.forms.*" 
		 xmlns:renderers="com.uralys.tribes.renderers.*">
	
		<fx:Script>
			<![CDATA[
				import com.uralys.tribes.main.ImageContainer;
				//----------------------------------------------------------//

				import com.uralys.tribes.commons.Numbers;
				import com.uralys.tribes.commons.Session;
				import com.uralys.tribes.commons.Translations;
				import com.uralys.tribes.core.BoardDrawer;
				import com.uralys.tribes.entities.City;
				import com.uralys.tribes.entities.Item;
				import com.uralys.tribes.entities.Move;
				import com.uralys.tribes.entities.Unit;
				import com.uralys.tribes.managers.GameManager;
				import com.uralys.tribes.skins.CustomButtonSkin;
				import com.uralys.tribes.skins.WorkersProgressBarSkin;
				import com.uralys.tribes.skins.WorkersProgressTrackSkin;
				import com.uralys.tribes.tooltips.ForgeToolTip;
				import com.uralys.tribes.tooltips.MerchantToolTip;
				import com.uralys.utils.Utils;
				
				import mx.collections.ArrayCollection;
				import mx.core.FlexGlobals;
				import mx.events.ItemClickEvent;
				import mx.events.ToolTipEvent;
				import mx.messaging.messages.ISmallMessage;
				import mx.utils.ObjectUtil;
				
				//----------------------------------------------------------//
				
				[Bindable]
				public var city:City;

				//----------------------------------------------------------//

				protected function wheatWorkersCheck(event:Event):void	
				{
					var peopleAdded:int = wheatWorkersSlider.value - city.peopleCreatingWheat;
					
					if(city.unemployed < peopleAdded)
						wheatWorkersSlider.value = city.peopleCreatingWheat + city.unemployed;
					
					city.peopleCreatingWheat = wheatWorkersSlider.value;
					
					city.wheatEarned = Numbers.WHEAT_EARNING_COEFF * city.peopleCreatingWheat;
					
					city.wheatRequiredToFeed = (city.population + city.unitsToFeed) * Numbers.FEED_COEFF;
					city.wheatExpected = city.wheat + city.wheatEarned - city.wheatRequiredToFeed;

					updateWorkersProgressBar();
				}

				protected function pickUpPeopleInPeopleCreatingWheat(peopleToPickUp:int):void{
					var peopleRequired:int = peopleToPickUp - city.unemployed;
					wheatWorkersSlider.value = city.peopleCreatingWheat - peopleRequired;
					wheatWorkersCheck(null);
				}
				

				//-------------------------------------------------------------------------//

				protected function woodWorkersCheck(event:Event):void	{
					
					var peopleAdded:int = woodWorkersSlider.value - city.peopleCreatingWood;
					
					if(city.unemployed < peopleAdded)
						woodWorkersSlider.value = city.peopleCreatingWood + city.unemployed;
					
					city.peopleCreatingWood = woodWorkersSlider.value;
					
					city.woodEarned = Numbers.WOOD_EARNING_COEFF * city.peopleCreatingWood;
					
					if(labelStarvation.visible)
						city.woodEarned /= 2;
					
					updateWorkersProgressBar();
				}
				
				//-------------------------------------------------------------------------//
				
				protected function ironWorkersCheck(event:Event):void	
				{
					var peopleAdded:int = ironWorkersSlider.value - city.peopleCreatingIron;
					
					if(city.unemployed < peopleAdded)
						ironWorkersSlider.value = city.peopleCreatingIron + city.unemployed;
					
					city.peopleCreatingIron = ironWorkersSlider.value;
					
					city.ironEarned = Numbers.IRON_EARNING_COEFF * city.peopleCreatingIron;
					
					if(labelStarvation.visible)
						city.ironEarned /= 2;
					
					updateWorkersProgressBar();
				}

				//-------------------------------------------------------------------------//

				public function updateWorkersProgressBar():void
				{
					if(workersProgressBar == null)
						return;
					
					city.refreshUnemployed();
					workersProgressBar.setProgress(city.workers, city.population);
				}
				
				//-------------------------------------------------------------------------//
				// Market - Achat
				
				protected function wheatMarketBuyCheck(event:Event):void
				{
					city.goldSpent -= (int)(city.wheatBought * Numbers.WHEAT_PRICE_BUY);
					city.wheatBought = wheatMarketSlider.value;

					
					if((city.gold-city.goldSpent)/Numbers.WHEAT_PRICE_BUY < city.wheatBought)
						city.wheatBought = (city.gold-city.goldSpent)/Numbers.WHEAT_PRICE_BUY;
					
					city.goldSpent += (int)(city.wheatBought * Numbers.WHEAT_PRICE_BUY);
				}
				
				protected function woodMarketBuyCheck(event:Event):void	
				{
					city.goldSpent -= (int)(city.woodBought * Numbers.WOOD_PRICE_BUY);
					city.woodBought = woodMarketSlider.value;
					
					if((city.gold-city.goldSpent)/Numbers.WOOD_PRICE_BUY < city.woodBought)
						city.woodBought = (city.gold-city.goldSpent)/Numbers.WOOD_PRICE_BUY;
					
					city.goldSpent += (int)(city.woodBought * Numbers.WOOD_PRICE_BUY);
				}
				
				protected function ironMarketBuyCheck(event:Event):void	
				{
					city.goldSpent -= (int)(city.ironBought * Numbers.IRON_PRICE_BUY);
					city.ironBought = ironMarketSlider.value;
					
					if((city.gold-city.goldSpent)/Numbers.IRON_PRICE_BUY < city.ironBought)
						city.ironBought = (city.gold-city.goldSpent)/Numbers.IRON_PRICE_BUY;
					
					city.goldSpent += (int)(city.ironBought * Numbers.IRON_PRICE_BUY);
				}
				
				
				protected function bowsMarketBuyCheck(event:Event):void	
				{
					city.goldSpent -= (int)(city.bowsBought * Numbers.BOW_PRICE_BUY);
					city.bowsBought = bowsMarketSlider.value;
					
					if((city.gold-city.goldSpent)/Numbers.BOW_PRICE_BUY < city.bowsBought)
						city.bowsBought = (city.gold-city.goldSpent)/Numbers.BOW_PRICE_BUY;

					city.goldSpent += (int)(city.bowsBought * Numbers.BOW_PRICE_BUY);
				}
				
				protected function swordsMarketBuyCheck(event:Event):void	
				{
					city.goldSpent -= (int)(city.swordsBought * Numbers.SWORD_PRICE_BUY);
					city.swordsBought = swordsMarketSlider.value;
					
					if((city.gold-city.goldSpent)/Numbers.SWORD_PRICE_BUY < city.swordsBought)
						city.swordsBought = (city.gold-city.goldSpent)/Numbers.SWORD_PRICE_BUY;

					city.goldSpent += (int)(city.swordsBought * Numbers.SWORD_PRICE_BUY);
				}
				
				protected function armorsMarketBuyCheck(event:Event):void	
				{
					city.goldSpent -= (int)(city.armorsBought * Numbers.ARMOR_PRICE_BUY);
					city.armorsBought = armorsMarketSlider.value;
					
					if((city.gold-city.goldSpent)/Numbers.ARMOR_PRICE_BUY < city.armorsBought)
						city.armorsBought = (city.gold-city.goldSpent)/Numbers.ARMOR_PRICE_BUY;
					
					city.goldSpent += (int)(city.armorsBought * Numbers.ARMOR_PRICE_BUY);
				}
				
				
				protected function buy():void
				{
					city.gold -= city.goldSpent;
					
					city.wheat += city.wheatBought;
					city.wood += city.woodBought;
					city.iron += city.ironBought;
					city.bows += city.bowsBought;
					city.swords += city.swordsBought;
					city.armors += city.armorsBought;
					
					city.goldSpent = 0;
					city.wheatBought = 0;
					city.woodBought = 0;
					city.ironBought = 0;
					city.bowsBought = 0;
					city.swordsBought = 0;
					city.armorsBought = 0;
					
					GameManager.getInstance().saveCity(city);
				}
				
				//-------------------------------------------------------------------------//
				// Market - Vente
				
				
				protected function wheatMarketSellCheck(event:Event):void	
				{
					city.goldEarned -= (int)(city.wheatSold * Numbers.WHEAT_PRICE_SELL);
					city.wheatSold = wheatMarketSellSlider.value;
					
					if((city.wheat-city.wheatSold) < 0)
						city.wheatSold = city.wheat;
					
					city.goldEarned += (int)(city.wheatSold * Numbers.WHEAT_PRICE_SELL);
				}
				
				
				protected function woodMarketSellCheck(event:Event):void	
				{
					city.goldEarned -= (int)(city.woodSold * Numbers.WOOD_PRICE_SELL);
					city.woodSold = woodMarketSellSlider.value;
					
					if((city.wood-city.woodSold) < 0)
						city.woodSold = city.wood;
					
					city.goldEarned += (int)(city.woodSold * Numbers.WOOD_PRICE_SELL);
				}
				
				
				protected function ironMarketSellCheck(event:Event):void	
				{
					city.goldEarned -= (int)(city.ironSold * Numbers.IRON_PRICE_SELL);
					city.ironSold = ironMarketSellSlider.value;
					
					if((city.iron-city.ironSold) < 0)
						city.ironSold = city.iron;
					
					city.goldEarned += (int)(city.ironSold * Numbers.IRON_PRICE_SELL);
				}
				
				protected function bowsMarketSellCheck(event:Event):void	
				{
					city.goldEarned -= (int)(city.bowsSold * Numbers.BOW_PRICE_SELL);
					city.bowsSold = bowsMarketSellSlider.value;
					
					if((city.bows-city.bowsSold) < 0)
						city.bowsSold = city.bows;
					
					city.goldEarned += (int)(city.bowsSold * Numbers.BOW_PRICE_SELL);
				}
				
				protected function swordsMarketSellCheck(event:Event):void	
				{
					city.goldEarned -= (int)(city.swordsSold * Numbers.SWORD_PRICE_SELL);
					city.swordsSold = swordsMarketSellSlider.value;
					
					if((city.swords-city.swordsSold) < 0)
						city.swordsSold = city.swords;
					
					city.goldEarned += (int)(city.swordsSold * Numbers.SWORD_PRICE_SELL);
				}
				
				
				protected function armorsMarketSellCheck(event:Event):void	
				{
					city.goldEarned -= (int)(city.armorsSold * Numbers.ARMOR_PRICE_SELL);
					city.armorsSold = armorsMarketSellSlider.value;
					
					if((city.armors-city.armorsSold) < 0)
						city.armorsSold = city.armors;
					
					city.goldEarned += (int)(city.armorsSold * Numbers.ARMOR_PRICE_SELL);
				}
				
				
				protected function sell():void
				{
					city.gold += city.goldEarned;
					
					city.wheat -= city.wheatSold;
					city.wood -= city.woodSold;
					city.iron -= city.ironSold;
					city.bows -= city.bowsSold;
					city.swords -= city.swordsSold;
					city.armors -= city.armorsSold;
					
					city.goldEarned = 0;
					city.wheatSold = 0;
					city.woodSold = 0;
					city.ironSold = 0;
					city.bowsSold = 0;
					city.swordsSold = 0;
					city.armorsSold = 0;
					
					
					GameManager.getInstance().saveCity(city);
				}
				
				//-------------------------------------------------------------------------//
				// Forge
				
//				protected function registerNewForgeWorkers(itemName:String, newNbWorkers:int):void	{
//					
//					for each(var smith:Smith in city.smiths){
//						if(smith.item.name == itemName){
//							// ici, on a trouve des workers pour la ressource
//								
//							// on met a jour le nbWorkers
//							smith.people = newNbWorkers;
//
//							// on calcule le nouveau cout
//							city.woodSpent += smith.people * smith.item.wood;
//							city.ironSpent += smith.people * smith.item.iron;
//							
//							city.refreshUnemployed();
//							return;
//						}
//					}
//				}
				
				//----------------------------------------------------------------//
				/*
				protected function bowWorkersCheck(event:Event):void
				{
					// on enleve le precedent debit de ressources 
					city.woodSpent -= city.bowWorkers * Numbers.BOW_WOOD;
					city.ironSpent -= city.bowWorkers * Numbers.BOW_IRON;
					
					var peopleAdded:int = bowWorkersSlider.value - city.bowWorkers;
					
					if(city.unemployed < peopleAdded)
						bowWorkersSlider.value = city.bowWorkers + city.unemployed;
					
					city.bowWorkers = bowWorkersSlider.value;
					
					var woodAvailable:int = city.wood - city.woodSpent;
					var ironAvailable:int = city.iron;
					
					// la depense en bois pour les arcs est plus grande que le stock de bois
					if(Numbers.BOW_WOOD * city.bowWorkers > woodAvailable)
						city.bowWorkers = Math.floor(woodAvailable/Numbers.BOW_WOOD);

					// la depense en fer pour les arcs est plus grande que le stock de fer
					if(Numbers.BOW_IRON * city.bowWorkers > ironAvailable)
						city.bowWorkers = Math.floor(ironAvailable/Numbers.BOW_IRON);
							
					
					registerNewForgeWorkers("bow", city.bowWorkers);
					
					updateSmithsProgressBar();
					updateWorkersProgressBar();
				}
				
				
				protected function swordWorkersCheck(event:Event):void
				{
					// on enleve le precedent debit de ressources 
					city.woodSpent -= city.swordWorkers * Numbers.SWORD_WOOD;
					city.ironSpent -= city.swordWorkers * Numbers.SWORD_IRON;
					
					var peopleAdded:int = swordWorkersSlider.value - city.swordWorkers;
					
					if(city.unemployed < peopleAdded)
						swordWorkersSlider.value = city.swordWorkers + city.unemployed;
					
					city.swordWorkers = swordWorkersSlider.value;
							
					var woodAvailable:int = city.wood - city.woodSpent;
					var ironAvailable:int = city.iron;
					
					// la depense en bois pour les epees est plus grande que le stock de bois
					if(Numbers.SWORD_WOOD * city.swordWorkers > woodAvailable)
						city.swordWorkers = Math.floor(woodAvailable/Numbers.SWORD_WOOD);
					
					// la depense en fer pour les epees est plus grande que le stock de fer
					if(Numbers.SWORD_IRON * city.swordWorkers > ironAvailable)
						city.swordWorkers = Math.floor(ironAvailable/Numbers.SWORD_IRON);

					registerNewForgeWorkers("sword", city.swordWorkers);
					
					updateSmithsProgressBar();
					updateWorkersProgressBar();
				}
				
				protected function armorWorkersCheck(event:Event):void
				{
					// on enleve le precedent debit de ressources 
					city.woodSpent -= city.armorWorkers * Numbers.ARMOR_WOOD;
					city.ironSpent -= city.armorWorkers * Numbers.ARMOR_IRON;
					
					var peopleAdded:int = armorWorkersSlider.value - city.armorWorkers;
					
					if(city.unemployed < peopleAdded)
						armorWorkersSlider.value = city.armorWorkers + city.unemployed;
					
					city.armorWorkers = armorWorkersSlider.value;
					
					var woodAvailable:int = city.wood - city.woodSpent;
					var ironAvailable:int = city.iron;
					
					// la depense en bois pour les armures est plus grande que le stock de bois
					if(Numbers.ARMOR_WOOD * city.armorWorkers > woodAvailable)
						city.armorWorkers = Math.floor(woodAvailable/Numbers.ARMOR_WOOD) ;
					
					// la depense en fer pour les armures est plus grande que le stock de fer
					if(Numbers.ARMOR_IRON * city.armorWorkers > ironAvailable)
						city.armorWorkers = Math.floor(ironAvailable/Numbers.ARMOR_IRON);
					
					registerNewForgeWorkers("armor", city.armorWorkers);
					
					updateSmithsProgressBar();
					updateWorkersProgressBar();
				}

				public function updateSmithsProgressBar():void	
				{
					if(smithsProgressBar != null){
						smithsProgressBar.setProgress(city.bowWorkers
													+ city.swordWorkers
													+ city.armorWorkers
													, city.availableAsSmith);
					}
				}
				*/
				
				//-------------------------------------------------------------------------//

				private function refreshBuildings():void	
				{
					if(wheatBuildingRenderer != null){
						wheatBuildingRenderer.refresh();
						woodBuildingRenderer.refresh();
						ironBuildingRenderer.refresh();
						bowBuildingRenderer.refresh();
						swordBuildingRenderer.refresh();
						armorBuildingRenderer.refresh();
						
					}
					
					if(bowsBuildingRenderer != null){
						bowsBuildingRenderer.refresh();
						swordsBuildingRenderer.refresh();
						armorsBuildingRenderer.refresh();
					}
					
				}
				
				//-------------------------------------------------------------------------//
				// toolTip creation pour la forge
				
				private function onCreateForgeToolTip(e:ToolTipEvent, itemName:String, woodCost:int, ironCost:int):void 
				{
					var toolTip:ForgeToolTip = new ForgeToolTip();
					toolTip.itemName = itemName;
					toolTip.woodCost = woodCost;
					toolTip.ironCost = ironCost;
					
					e.toolTip = toolTip;
				}
				
				//---------------------------------//
				// toolTip creation pour les marchands
				
				private function onCreateMerchantToolTip(e:ToolTipEvent):void {
					var toolTip:MerchantToolTip = new MerchantToolTip();
					
					e.toolTip = toolTip;
				}
				
				
				//-------------------------------------------------------------------------//
				// merchants

				
				protected function wheatMerchantCheck(event:Event):void
				{
					var previousNbWheat:int = city.caravan.wheat;
					var newNbWheat:int = wheatMerchantSlider.value;
					
					if(newNbWheat > previousNbWheat){
						// on ajoute du ble a la caravane
						
						if(city.wheat < newNbWheat - previousNbWheat){
							// la reserve en ble n'est pas assez grande
							newNbWheat = city.wheat + previousNbWheat;
							city.wheat = 0;
						}
						else{	
							// on pioche dans la reserve de ble
							city.wheat -= newNbWheat - previousNbWheat;
						}
					}
					else{
						// on enleve du ble de la caravane
						city.wheat += previousNbWheat - newNbWheat;
					}
					
					city.caravan.wheat = newNbWheat;
					wheatMerchantSlider.value = city.caravan.wheat;
				}
				
				
				protected function woodMerchantCheck(event:Event):void
				{
					var previousNbWood:int = city.caravan.wood;
					var newNbWood:int = woodMerchantSlider.value;
					
					if(newNbWood > previousNbWood){
						// on ajoute du bois a la caravane
						
						if(city.wood < newNbWood - previousNbWood){
							// la reserve en bois n'est pas assez grande
							newNbWood = city.wood + previousNbWood;
							city.wood = 0;
						}
						else{	
							// on pioche dans la reserve de bois
							city.wood -= newNbWood - previousNbWood;
						}
					}
					else{
						// on enleve du bois de la caravane
						city.wood += previousNbWood - newNbWood;
					}
					
					city.caravan.wood = newNbWood;
					woodMerchantSlider.value = city.caravan.wood;
				}
				
				
				protected function ironMerchantCheck(event:Event):void
				{
					var previousNbIron:int = city.caravan.iron;
					var newNbIron:int = ironMerchantSlider.value;
					
					if(newNbIron > previousNbIron){
						// on ajoute du fer a la caravane
						
						if(city.iron < newNbIron - previousNbIron){
							// la reserve en fer n'est pas assez grande
							newNbIron = city.iron + previousNbIron;
							city.iron = 0;
						}
						else{	
							// on pioche dans la reserve de fer
							city.iron -= newNbIron - previousNbIron;
						}
					}
					else{
						// on enleve du fer de la caravane
						city.iron += previousNbIron - newNbIron;
					}
					
					city.caravan.iron = newNbIron;
					ironMerchantSlider.value = city.caravan.iron;
				}
				
				protected function goldMerchantCheck(event:Event):void
				{
					var previousNbGold:int = city.caravan.gold;
					var newNbGold:int = goldMerchantSlider.value;
					
					if(newNbGold > previousNbGold){
						// on ajoute du fer a la caravane
						
						if(city.gold < newNbGold - previousNbGold){
							// la reserve en fer n'est pas assez grande
							newNbGold = city.gold + previousNbGold;
							city.gold = 0;
						}
						else{	
							// on pioche dans la reserve de fer
							city.gold -= newNbGold - previousNbGold;
						}
					}
					else{
						// on enleve du fer de la caravane
						city.gold += previousNbGold - newNbGold;
					}
					
					city.caravan.gold = newNbGold;
					goldMerchantSlider.value = city.caravan.gold;
				}
				
				
				protected function bowsMerchantCheck(event:Event):void
				{
					var previousNbBows:int = city.caravan.bows;
					var newNbBows:int = bowsMerchantSlider.value;
					
					if(newNbBows > previousNbBows){
						// on ajoute des arcs a la caravane
						
						if(city.bows < newNbBows - previousNbBows){
							// la reserve en arcs n'est pas assez grande
							newNbBows = city.bows + previousNbBows;
							city.bows = 0;
						}
						else{	
							// on pioche dans la reserve d'arcs
							city.bows -= newNbBows - previousNbBows;
						}
					}
					else{
						// on enleve des arcs de la caravane
						city.bows += previousNbBows - newNbBows;
					}
					
					city.caravan.bows = newNbBows;
					bowsMerchantSlider.value = city.caravan.bows;
				}
				
				
				protected function swordsMerchantCheck(event:Event):void
				{
					var previousNbSwords:int = city.caravan.swords;
					var newNbSwords:int = swordsMerchantSlider.value;
					
					if(newNbSwords > previousNbSwords){
						// on ajoute des epees a la caravane
						
						if(city.swords < newNbSwords - previousNbSwords){
							// la reserve en epees n'est pas assez grande
							newNbSwords = city.swords + previousNbSwords;
							city.swords = 0;
						}
						else{	
							// on pioche dans la reserve d'epees
							city.swords -= newNbSwords - previousNbSwords;
						}
					}
					else{
						// on enleve des epees de la caravane
						city.swords += previousNbSwords - newNbSwords;
					}
					
					city.caravan.swords = newNbSwords;
					swordsMerchantSlider.value = city.caravan.swords;
				}
				
				protected function armorsMerchantCheck(event:Event):void
				{
					var previousNbArmors:int = city.caravan.armors;
					var newNbArmors:int = armorsMerchantSlider.value;
					
					if(newNbArmors > previousNbArmors){
						// on ajoute des armures a la caravane
						
						if(city.armors < newNbArmors - previousNbArmors){
							// la reserve en armures n'est pas assez grande
							newNbArmors = city.armors + previousNbArmors;
							city.armors = 0;
						}
						else{	
							// on pioche dans la reserve d'armures
							city.armors -= newNbArmors - previousNbArmors;
						}
					}
					else{
						// on enleve des armures de la caravane
						city.armors += previousNbArmors - newNbArmors;
					}
					
					city.caravan.armors = newNbArmors;
					armorsMerchantSlider.value = city.caravan.armors;
				}
				
				
				//-------------------------------------------------------------------------//
				// armies
				
				protected function bowsArmyCheck(event:Event):void
				{
					var previousNbBowsInArmy:int = city.army.bows;
					var newNbBowsInArmy:int = bowsArmySlider.value;
					
					if(city.bows + previousNbBowsInArmy - newNbBowsInArmy > city.bowStockCapacity)
						newNbBowsInArmy = previousNbBowsInArmy - city.bowStockCapacity - city.bows;
					
					city.bows += previousNbBowsInArmy - newNbBowsInArmy;
					city.army.bows = newNbBowsInArmy;
					bowsArmySlider.value = city.army.bows;
				}
				
				protected function swordsArmyCheck(event:Event):void
				{
					var previousNbSwordsInArmy:int = city.army.swords;
					var newNbSwordsInArmy:int = swordsArmySlider.value;
					
					if(city.swords + previousNbSwordsInArmy - newNbSwordsInArmy > city.swordStockCapacity)
						newNbSwordsInArmy = previousNbSwordsInArmy - city.swordStockCapacity - city.swords;
					
					city.swords += previousNbSwordsInArmy - newNbSwordsInArmy;
					city.army.swords = newNbSwordsInArmy;
					swordsArmySlider.value = city.army.swords;
				}
				
				protected function armorsArmyCheck(event:Event):void
				{
					var previousNbArmorsInArmy:int = city.army.armors;
					var newNbArmorsInArmy:int = armorsArmySlider.value;
					
					if(city.armors + previousNbArmorsInArmy - newNbArmorsInArmy > city.armorStockCapacity)
						newNbArmorsInArmy = previousNbArmorsInArmy - city.armorStockCapacity - city.armors;
					
					city.armors += previousNbArmorsInArmy - newNbArmorsInArmy;
					city.army.armors = newNbArmorsInArmy;
					armorsArmySlider.value = city.army.armors;
				}
				
				//-------------------------------------------------------------------------//
				
				protected function armyCheck(event:Event):void	
				{
					var previousArmySize:int = city.army.size;
					city.army.size = armySlider.value;
					
					if(city.army.status != Unit.TO_BE_CREATED)
						city.population -= city.army.size - previousArmySize;
					
					city.army.refreshValue();
					updateWorkersProgressBar();
				}
				
				//-------------------------------------------------------------------------//

				protected function merchantsCheck(event:Event):void
				{
					var previousMerchantSize:int = city.caravan.size;
					city.caravan.size = merchantsSlider.value;

					if(city.caravan.status != Unit.TO_BE_CREATED)
						city.population -= city.caravan.size - previousMerchantSize; 
					
					city.caravan.refreshValue();
					updateWorkersProgressBar();
				}
				
				//-------------------------------------------------------------------------//
				// Armies - Merchants
				
				protected function newUnit(type:int):Unit
				{
					if(city.unemployed < 50){
						FlexGlobals.topLevelApplication.message(Translations.FREE_PEOPLE.getItemAt(Session.LANGUAGE));
						return null;
					}
					
					var newUnit:Unit = new Unit();
					newUnit.initNewUnit(city.x, city.y);
					
					newUnit.size = 0; 
					newUnit.speed = type == 1 ? Numbers.ARMY_BASE_SPEED : Numbers.MERCHANT_BASE_SPEED;
					newUnit.type = type;
					newUnit.player = Session.player;
					newUnit.ownerStatus = Unit.PLAYER;
					
					newUnit.moves = new ArrayCollection();
					var moveInCity:Move = new Move();
					moveInCity.initNewMove(newUnit.unitUID, city.x, city.y);
					newUnit.moves.addItem(moveInCity);
					
					Session.player.units.addItem(newUnit);
					
					// le contenu de la case sera refreshed au retour par unitSaved, 
					// mais si on refresh maintenant, on va pouvoir afficher la case lors du validateArmy() ou validateMerchant()
					GameManager.getInstance().refreshCell(Session.CURRENT_CELL_SELECTED);
					
					return newUnit;
				}
				
				protected function newArmy():void
				{
					var newArmy:Unit = newUnit(1);
					if(newArmy == null)
						return;

					city.army = newArmy;

					armySlider.value = 50;
					armyCheck(null);
				}

				protected function deleteArmy():void
				{
					trace("delete army" + city.army.unitUID);
				
					if(city.army.status != Unit.TO_BE_CREATED){
						// pour une armee deja existante : on reajuste la pop, ils peuvent travailler des ce tour
						// faille : si on a enleve des unites avant elles sont dans armyReleased et ne seront pas utilisees ce tour
						city.population += city.army.size;
					}
					
					//---------------------------------//
					// on remet les armements dans les stocks de la ville
					// on enleve des arcs a l'armee
					var nbBowsRestored:int = city.army.bows;
					
					if(nbBowsRestored + city.bows > city.bowStockCapacity){
						trace("les arcs debordent");
						city.bows = city.bowStockCapacity;
					}
					else
						city.bows += city.army.bows;
					
					// on enleve des epees a l'armee
					var nbSwordsRestored:int = city.army.swords;
					
					if(nbSwordsRestored + city.swords > city.swordStockCapacity){
						trace("les epees debordent");
						city.swords = city.swordStockCapacity;
					}
					else
						city.swords += city.army.swords;
					
					// on enleve des armures a l'armee
					var nbArmorsRestored:int = city.army.armors;
					
					if(nbArmorsRestored + city.armors > city.armorStockCapacity){
						trace("les armures debordent");
						city.armors = city.armorStockCapacity;
					}
					else
						city.armors += city.army.armors;
					
					//---------------------------------//
					
					Session.player.units.removeItemAt(Session.player.units.getItemIndex(city.army));

					Session.CURRENT_CELL_SELECTED.army = null;
					GameManager.getInstance().refreshCellDisplay(Session.CURRENT_CELL_SELECTED);
					GameManager.getInstance().deleteUnit(city.army);
					
					city.army = null;
					
					updateWorkersProgressBar();
				}
				
				protected function newMerchants():void
				{
					var newMerchant:Unit = newUnit(2);
					if(newMerchant == null)
						return;
					
					city.caravan = newMerchant;
					
					merchantsSlider.value = 50;
					merchantsCheck(null);
				}

				protected function deleteMerchant():void
				{
					trace("delete merchant" + city.caravan.unitUID);
					
					if(city.caravan.status != Unit.TO_BE_CREATED){
						// pour une caravane deja existante : on reajuste la pop, ils peuvent travailler des ce tour
						// faille : si on a enleve des unites avant elles sont dans armyReleased et ne seront pas utilisees ce tour
						city.population += city.caravan.size;
					}
					
					//---------------------------------//
					// on remet les provisions transportees dans les stocks de la ville

					city.wheat += city.caravan.wheat;
					if(city.wheatStockCapacity < city.wheat)
						city.wheat = city.wheatStockCapacity;
					
					city.wood += city.caravan.wood;
					if(city.woodStockCapacity < city.wood)
						city.wood = city.woodStockCapacity;
					
					city.iron += city.caravan.iron;
					if(city.ironStockCapacity < city.iron)
						city.iron = city.ironStockCapacity;
					
					city.gold += city.caravan.gold;

					// on enleve des arcs a l'armee
					var nbBowsRestored:int = city.caravan.bows;
					
					if(nbBowsRestored + city.bows > city.bowStockCapacity){
						city.bows = city.bowStockCapacity;
					}
					else
						city.bows += nbBowsRestored;
					
					// on enleve des epees a l'armee
					var nbSwordsRestored:int = city.caravan.swords;
					
					if(nbSwordsRestored + city.swords > city.swordStockCapacity){
						city.swords = city.swordStockCapacity;
					}
					else
						city.swords += nbSwordsRestored;
					
					// on enleve des armures a l'armee
					var nbArmorsRestored:int = city.caravan.armors;
					
					if(nbArmorsRestored + city.armors > city.armorStockCapacity){
						city.armors = city.armorStockCapacity;
					}
					else
						city.armors += nbArmorsRestored;
					
					//---------------------------------//
					
					
					// on enleve la caravane de la liste de la ville et du player
					Session.player.units.removeItemAt(Session.player.units.getItemIndex(city.caravan));
					
					GameManager.getInstance().refreshCellDisplay(Session.CURRENT_CELL_SELECTED);
					GameManager.getInstance().deleteUnit(city.caravan);
					
					city.caravan = null;
					
					updateWorkersProgressBar();
				}
				
				
				public function refreshCity():void
				{
					updateWorkersProgressBar();
					//cityForm.updateSmithsProgressBar();
					refreshBuildings();
					
					city.wheatRequiredToFeed = (city.population + city.unitsToFeed) * Numbers.FEED_COEFF;
					city.wheatExpected = city.wheat + city.wheatEarned - city.wheatRequiredToFeed;
				}
				
			]]>
		</fx:Script>
	
		<fx:Declarations>
			<s:Fade id="fader" duration="1000" alphaFrom="1" alphaTo="0"/>
			<s:Fade id="shower" duration="1000" alphaFrom="0" alphaTo="1"/>
			
			<s:State name="normal" id="normalState"/>
		</fx:Declarations>
	
		<mx:Image source="{ImageContainer.FERMIER}" x="950" y="-70" visible="{viewstack.selectedIndex == 0}" hideEffect="fader" showEffect="shower"/>
		<mx:Image source="{ImageContainer.FORGERON}" x="950" y="-70" visible="{viewstack.selectedIndex == 1 || viewstack.selectedIndex == 2}" hideEffect="fader" showEffect="shower"/>
		<mx:Image source="{ImageContainer.MARCHANDE}" x="1000" y="-70" visible="{viewstack.selectedIndex == 3}" hideEffect="fader" showEffect="shower"/>
		<mx:Image source="{ImageContainer.MARCHAND}" x="950" y="-70" visible="{viewstack.selectedIndex == 4}" hideEffect="fader" showEffect="shower"/>
		<mx:Image source="{ImageContainer.GUERRIER}" x="950" y="-70" visible="{viewstack.selectedIndex == 5}" hideEffect="fader" showEffect="shower"/>

		<s:VGroup width="100%" horizontalAlign="center">
			
			<s:HGroup horizontalAlign="center" verticalAlign="middle">
				<s:Label id="cityNameInput" text="{city.name}" fontSize="25"/>
				<mx:Spacer width="50"/>
				<s:Label text="Population"/>
				<mx:Spacer width="20"/>
				<s:Label text="{city.population}" styleName="numberLabel"/>
				<mx:Spacer width="6"/>
			</s:HGroup>
			<s:HGroup width="100%" horizontalAlign="center" bottom="0"
					  verticalAlign="middle">
				<s:Label text="{Translations.WORKERS.getItemAt(Session.LANGUAGE)}"/>
				<mx:Spacer width="10"/>
				<s:Label text="{city.peopleCreatingWheat 
								 + city.peopleCreatingWood
								 + city.peopleCreatingIron
								 + city.bowWorkers
								 + city.swordWorkers
								 + city.armorWorkers}"
						 styleName="numberLabel" 
						 textAlign="right"
						 minWidth="60"/>
				<mx:Spacer width="10"/>
				<s:VGroup>
					<mx:Spacer height="11"/>
					<mx:ProgressBar width="200"
									height="100%"
									label="" 
									id="workersProgressBar"
									mode="manual"
									barSkin="{WorkersProgressBarSkin}"
									trackSkin="{WorkersProgressTrackSkin}"
									trackHeight="24"
									creationComplete="{updateWorkersProgressBar()}"/>
				</s:VGroup>
				<mx:Spacer width="10"/>
				<s:Label text="{city.unemployed}"
						 styleName="numberLabel" 
						 textAlign="right"
						 minWidth="60"/>
				<mx:Spacer width="10"/>
				<s:Label text="{Translations.UNEMPLOYED.getItemAt(Session.LANGUAGE)}" />
			</s:HGroup>
			<s:HGroup horizontalAlign="center" verticalAlign="middle">
				
				<mx:Image toolTip="{Translations.WHEAT.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WHEAT}" width="25" height="25"/>
				<mx:Spacer width="10"/>
				<s:Label text="{city.wheat}/{city.wheatStockCapacity}" styleName="numberLabel"/>
				
				<mx:Spacer width="15"/>
				<mx:Image toolTip="{Translations.WOOD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WOOD}" width="25" height="25"/>
				<mx:Spacer width="10"/>
				<s:Label text="{city.wood}/{city.woodStockCapacity}" styleName="numberLabel"/>
				
				<mx:Spacer width="15"/>
				<mx:Image toolTip="{Translations.IRON.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.IRON}" width="25" height="25"/>
				<mx:Spacer width="10"/>
				<s:Label text="{city.iron}/{city.ironStockCapacity}" styleName="numberLabel"/>

				<mx:Spacer width="15"/>
				<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
				<mx:Spacer width="10"/>
				<s:Label text="{city.gold}" styleName="numberLabel"/>
				
			</s:HGroup>
			<s:HGroup verticalAlign="top">
				<mx:Spacer width="-25"/>
				<s:Label text="({(city.wheatExpected) &gt; city.wheatStockCapacity ? city.wheatStockCapacity : (city.wheatExpected)})" 
						 color="{(city.wheatExpected) &lt; 0 ? Numbers.RED : Numbers.GREEN}"/>
				
				<mx:Spacer width="100"/>
				<s:Label text="({(city.wood + city.woodEarned) &lt; city.woodStockCapacity ? (city.wood + city.woodEarned) : city.woodStockCapacity})" 
						 color="{Numbers.GREEN}"/>
				
				<mx:Spacer width="87"/>
				<s:Label text="({(city.iron + city.ironEarned) &lt; city.ironStockCapacity ? (city.iron + city.ironEarned) : city.ironStockCapacity})" 
						 color="{Numbers.GREEN}"/>
				
			</s:HGroup>
			
			<mx:Spacer height="15"/>
			<s:TabBar id="tabs" dataProvider="{viewstack}"
					  skinClass="com.uralys.tribes.skins.CustomTabBarSkin"/>
				
			<mx:ViewStack id="viewstack" width="650" height="100%">
				
				<!-- =============================================================================================== -->
				<!-- Resources Tab -->
				
				<s:NavigatorContent label="{Translations.RESOURCES.getItemAt(Session.LANGUAGE)}"
									show="{updateWorkersProgressBar()}">
					<s:VGroup width="100%" horizontalAlign="center">
						<mx:Grid verticalGap="10" horizontalGap="55" horizontalAlign="center" verticalAlign="middle">
							<mx:GridRow >
								<mx:GridItem/>
								<mx:GridItem horizontalAlign="center" width="100">
									<s:Label text="{Translations.WORKERS.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.HARVEST.getItemAt(Session.LANGUAGE)}"/>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow>
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.WHEAT.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WHEAT}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:HGroup verticalAlign="middle">
										<s:Label text="{city.peopleCreatingWheat}"
												 styleName="numberLabel" 
												 textAlign="right"
												 minWidth="60"/>
										<s:Image source="{ImageContainer.MERCHANTS}"/>
										<s:HSlider id="wheatWorkersSlider"
												   showDataTip="false"
													liveDragging="true" 
													change="wheatWorkersCheck(event)"
													value="{city.peopleCreatingWheat}"
													maximum="{city.population}"
													snapInterval="1"/>
									</s:HGroup>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:HGroup verticalAlign="middle">
										<s:Label text="+ {city.wheatEarned}" 
												 styleName="numberLabel" 
												 color="{Numbers.GREEN}"/>
										<s:Spacer width="5"/>
										<s:Label text="(- {city.wheatRequiredToFeed})" 
												 color="{Numbers.RED}"/>
										</s:HGroup>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.WOOD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WOOD}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:HGroup verticalAlign="middle">
										<s:Label text="{city.peopleCreatingWood}"
												 styleName="numberLabel" 
												 textAlign="right"
												 minWidth="60"/>
										<s:Image source="{ImageContainer.MERCHANTS}"/>
										<s:HSlider id="woodWorkersSlider"
												   showDataTip="false"
												   liveDragging="true" 
												   change="woodWorkersCheck(event)"
												   value="{city.peopleCreatingWood}"
												   maximum="{city.population}"
												   snapInterval="1"/> 
									</s:HGroup>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle"> 
									<s:Label text="+ {city.woodEarned}"
											 styleName="numberLabel"  
											 color="{Numbers.GREEN}"/>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.IRON.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.IRON}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:HGroup verticalAlign="middle">
										<s:Label text="{city.peopleCreatingIron}"
												 styleName="numberLabel" 
												 textAlign="right"
												 minWidth="60"/>
										<s:Image source="{ImageContainer.MERCHANTS}"/>
										<s:HSlider id="ironWorkersSlider"
												   showDataTip="false"
												   liveDragging="true" 
												   change="ironWorkersCheck(event)"
												   value="{city.peopleCreatingIron}"
												   maximum="{city.population}"
												   snapInterval="1"/>
									</s:HGroup>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="+ {city.ironEarned}"
											 styleName="numberLabel" 
											 color="{Numbers.GREEN}"/>
								</mx:GridItem>
							</mx:GridRow>
						</mx:Grid>
						<mx:Spacer height="10"/>
						<s:HGroup width="100%" horizontalAlign="center" bottom="0"
								  includeInLayout="{(city.wheatExpected) &lt; 0}">
							<s:Label text="{Translations.STARVATION.getItemAt(Session.LANGUAGE)}"
									 visible="{(city.wheatExpected) &lt; 0}"
									 id="labelStarvation"
									 color="{Numbers.RED}"/>
						</s:HGroup>
					</s:VGroup>
				</s:NavigatorContent> 

				<!-- =============================================================================================== -->
				<!-- New Forge Tab -->
				
				<s:NavigatorContent label="{Translations.FORGE.getItemAt(Session.LANGUAGE)}">
					<s:Scroller height="100%" width="100%">
						<s:VGroup width="100%" horizontalAlign="center">
							
							<mx:Spacer height="15"/>
							<s:HGroup width="100%" verticalAlign="middle">
								<s:Label text="{city.bows}/{city.bowStockCapacity}" styleName="numberLabel"/>
								<mx:Image toolTip="{Translations.BOW.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.BOW}"/>
								<renderers:SmithRenderer smiths="@{city.bowWorkers}"
														 item="{Utils.getItem('bow')}"
														 stock="{city.bows}"
														 stockCapacity="{city.bowStockCapacity}"
														 weaponsAdded="@{city.bowsBeingBuilt}"
														 beginTime="@{city.bowsBeingBuiltBeginTime}"
														 endTime="@{city.bowsBeingBuiltEndTime}"
														 city="{city}"
														 id="bowsBuildingRenderer"
														/>
							</s:HGroup>

							<mx:Spacer height="15"/>
							<s:HGroup width="100%" verticalAlign="middle">
								<s:Label text="{city.swords}/{city.swordStockCapacity}" styleName="numberLabel"/>
								<mx:Image toolTip="{Translations.SWORD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.SWORD}"/>
								<renderers:SmithRenderer smiths="@{city.swordWorkers}"
														 item="{Utils.getItem('sword')}"
														 stock="{city.swords}"
														 stockCapacity="{city.swordStockCapacity}"
														 weaponsAdded="@{city.swordsBeingBuilt}"
														 beginTime="@{city.swordsBeingBuiltBeginTime}"
														 endTime="@{city.swordsBeingBuiltEndTime}"
														 city="{city}"
														 id="swordsBuildingRenderer"
														/>
							</s:HGroup>

							<mx:Spacer height="15"/>
							<s:HGroup width="100%" verticalAlign="middle">
								<s:Label text="{city.armors}/{city.armorStockCapacity}" styleName="numberLabel"/>
								<mx:Image toolTip="{Translations.ARMOR.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.ARMOR}"/>
								<renderers:SmithRenderer smiths="@{city.armorWorkers}"
														 item="{Utils.getItem('armor')}"
														 stock="{city.armors}"
														 stockCapacity="{city.armorStockCapacity}"
														 weaponsAdded="@{city.armorsBeingBuilt}"
														 beginTime="@{city.armorsBeingBuiltBeginTime}"
														 endTime="@{city.armorsBeingBuiltEndTime}"
														 city="{city}"
														 id="armorsBuildingRenderer"
														/>
							</s:HGroup>
						
						</s:VGroup>
					</s:Scroller>

				</s:NavigatorContent>
				
				<!-- =============================================================================================== -->
				<!-- Marche -->
				
				<s:NavigatorContent label="{Translations.MARKET.getItemAt(Session.LANGUAGE)}">
					<s:HGroup width="100%" height="100%" horizontalAlign="center">
						<s:TabBar id="tabsMarket" dataProvider="{viewstackMarket}"
								  skinClass="com.uralys.tribes.skins.CustomTabBarSkin"/>
						
						<mx:ViewStack id="viewstackMarket" width="650" height="100%">
							
							<!-- =============================================================================================== -->
							<!-- Achat -->
							
							<s:NavigatorContent label="{Translations.BUYING.getItemAt(Session.LANGUAGE)}" width="650">
								<s:Button label="{Translations.BUY.getItemAt(Session.LANGUAGE)}" left="-130" bottom="0" click="buy()" skinClass="com.uralys.tribes.skins.CustomButtonSkin"/>
								<s:VGroup left="-60">
									<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle"
											 width="520">
										<mx:GridRow >
											<mx:GridItem minWidth="60"/>
											<mx:GridItem horizontalAlign="center" minWidth="60">
												<s:Label text="{Translations.UNIT_COST.getItemAt(Session.LANGUAGE)}" />
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" minWidth="160">
												<s:Label text="{Translations.QUANTITY.getItemAt(Session.LANGUAGE)}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" minWidth="60">
												<s:Label text="{Translations.PRICE_TO_PAY.getItemAt(Session.LANGUAGE)}"/>
											</mx:GridItem>
										</mx:GridRow>
									</mx:Grid>
									<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle"
											 maxHeight="180" width="540">
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.WHEAT.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WHEAT}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.WHEAT_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.wheatBought}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="wheatMarketSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="wheatMarketBuyCheck(event)"
															   value="{city.wheatBought}"
															   maximum="{city.wheatStockCapacity - city.wheat &lt; city.gold/Numbers.WHEAT_PRICE_BUY ? (city.wheatStockCapacity - city.wheat) : city.gold/Numbers.WHEAT_PRICE_BUY}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.wheatBought*Numbers.WHEAT_PRICE_BUY}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.WOOD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WOOD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.WOOD_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.woodBought}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="woodMarketSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="woodMarketBuyCheck(event)"
															   value="{city.woodBought}"
															   maximum="{city.woodStockCapacity - city.wood &lt; city.gold/Numbers.WOOD_PRICE_BUY ? (city.woodStockCapacity - city.wood) : city.gold/Numbers.WOOD_PRICE_BUY}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{(int)(city.woodBought*Numbers.WOOD_PRICE_BUY)}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.IRON.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.IRON}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.IRON_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.ironBought}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="ironMarketSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="ironMarketBuyCheck(event)"
															   value="{city.ironBought}"
															   maximum="{city.ironStockCapacity - city.iron &lt; city.gold/Numbers.IRON_PRICE_BUY ? (city.ironStockCapacity - city.iron) : city.gold/Numbers.IRON_PRICE_BUY}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<s:Label text="{city.ironBought*Numbers.IRON_PRICE_BUY}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.BOW.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.BOW}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.BOW_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.bowsBought}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="bowsMarketSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="bowsMarketBuyCheck(event)"
															   value="{city.bowsBought}"
															   maximum="{city.bowStockCapacity - city.bows &lt; city.gold/Numbers.BOW_PRICE_BUY ? (city.bowStockCapacity - city.bows) : city.gold/Numbers.BOW_PRICE_BUY}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.bowsBought*Numbers.BOW_PRICE_BUY}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.SWORD.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.SWORD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.SWORD_PRICE_BUY}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.swordsBought}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="swordsMarketSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="swordsMarketBuyCheck(event)"
															   value="{city.swordsBought}"
															   maximum="{city.swordStockCapacity - city.swords &lt; city.gold/Numbers.SWORD_PRICE_BUY ? (city.swordStockCapacity - city.swords) : city.gold/Numbers.SWORD_PRICE_BUY}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.swordsBought*Numbers.SWORD_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.ARMOR.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.ARMOR}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.ARMOR_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.armorsBought}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="armorsMarketSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="armorsMarketBuyCheck(event)"
															   value="{city.armorsBought}"
															   maximum="{city.armorStockCapacity - city.armors &lt; city.gold/Numbers.ARMOR_PRICE_BUY ? (city.armorStockCapacity - city.armors) : city.gold/Numbers.ARMOR_PRICE_BUY}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.armorsBought*Numbers.ARMOR_PRICE_BUY}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
									</mx:Grid>
									<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle"
											 width="500">
										<mx:GridRow>
											<mx:GridItem colSpan="4">
												<mx:HRule width="100%"/>
											</mx:GridItem>
										</mx:GridRow >
										<mx:GridRow >
											<mx:GridItem/>
											<mx:GridItem/>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Translations.TOTAL_SPENDING.getItemAt(Session.LANGUAGE)} : " minWidth="150"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.goldSpent}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem/>
										</mx:GridRow>
									</mx:Grid>
								</s:VGroup>
							</s:NavigatorContent>
							
							<!-- =============================================================================================== -->
							<!-- Vente -->
							
							<s:NavigatorContent label="{Translations.SELLING.getItemAt(Session.LANGUAGE)}" width="650">
								<s:Button label="{Translations.SELL.getItemAt(Session.LANGUAGE)}" left="-130" bottom="0" click="sell()" skinClass="com.uralys.tribes.skins.CustomButtonSkin"/>
								<s:VGroup left="-60">
									<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle"
											 width="520">
										<mx:GridRow >
											<mx:GridItem minWidth="35"/>
											<mx:GridItem horizontalAlign="center" minWidth="60">
												<s:Label text="{Translations.UNIT_COST.getItemAt(Session.LANGUAGE)}" />
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" minWidth="180">
												<s:Label text="{Translations.QUANTITY.getItemAt(Session.LANGUAGE)}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" minWidth="100">
												<s:Label text="{Translations.PROFIT.getItemAt(Session.LANGUAGE)}"/>
											</mx:GridItem>
										</mx:GridRow>
									</mx:Grid>
									<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle"
											 maxHeight="180" width="540">
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.WHEAT.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WHEAT}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.WHEAT_PRICE_SELL}" styleName="numberLabel" textAlign="right"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.wheatSold}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="wheatMarketSellSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="wheatMarketSellCheck(event)"
															   value="{city.wheatSold}"
															   maximum="{city.wheat}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{(int)(city.wheatSold*Numbers.WHEAT_PRICE_SELL)}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.WOOD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WOOD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.WOOD_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.woodSold}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="woodMarketSellSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="woodMarketSellCheck(event)"
															   value="{city.woodSold}"
															   maximum="{city.wood
																	   -(Numbers.SWORD_WOOD * city.swordWorkers 
																	    +Numbers.ARMOR_WOOD * city.armorWorkers
																	    +Numbers.BOW_WOOD * city.bowWorkers)}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.woodSold*Numbers.WOOD_PRICE_SELL}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.IRON.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.IRON}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.IRON_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.ironSold}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="ironMarketSellSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="ironMarketSellCheck(event)"
															   value="{city.ironSold}"
															   maximum="{city.iron
																		   -(Numbers.SWORD_IRON * city.swordWorkers 
																		   +Numbers.ARMOR_IRON * city.armorWorkers
																		   +Numbers.BOW_IRON * city.bowWorkers)}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{(int)(city.ironSold*Numbers.IRON_PRICE_SELL)}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.BOW.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.BOW}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.BOW_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.bowsSold}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="bowsMarketSellSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="bowsMarketSellCheck(event)"
															   value="{city.bowsSold}"
															   maximum="{city.bows}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.bowsSold*Numbers.BOW_PRICE_SELL}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.SWORD.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.SWORD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.SWORD_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.swordsSold}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="swordsMarketSellSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="swordsMarketSellCheck(event)"
															   value="{city.swordsSold}"
															   maximum="{city.swords}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.swordsSold*Numbers.SWORD_PRICE_SELL}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.ARMOR.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.ARMOR}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.ARMOR_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.armorsSold}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="armorsMarketSellSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="armorsMarketSellCheck(event)"
															   value="{city.armorsSold}"
															   maximum="{city.armors}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.armorsSold*Numbers.ARMOR_PRICE_SELL}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
									</mx:Grid>
									<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle"
											 width="520">
										<mx:GridRow>
											<mx:GridItem colSpan="4">
												<mx:HRule width="100%"/>
											</mx:GridItem>
										</mx:GridRow >
										<mx:GridRow >
											<mx:GridItem/>
											<mx:GridItem/>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Translations.TOTAL_PROFIT.getItemAt(Session.LANGUAGE)} : " minWidth="150"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.goldEarned}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem/>
										</mx:GridRow>
									</mx:Grid>
								</s:VGroup>
							</s:NavigatorContent>
						</mx:ViewStack>
						
					</s:HGroup>
				</s:NavigatorContent>
								
				<!-- =============================================================================================== -->
				<!-- Merchants Tab -->
				
				<s:NavigatorContent label="{Translations.MERCHANTS.getItemAt(Session.LANGUAGE)}">
					<s:VGroup height="100%">
						<s:HGroup width="100%" horizontalAlign="center">
							<s:VGroup horizontalAlign="center" height="100%">
								
								<s:HGroup width="200">
									<s:Button label="{Translations.NEW_MERCHANTS.getItemAt(Session.LANGUAGE)}" 
											  click="newMerchants()"
											  skinClass="com.uralys.tribes.skins.CustomButtonSkin"
											  enabled="{city.caravan == null &amp;&amp; Session.player.units.length &lt; Session.player.cities.length*3}"/>
									<mx:Image width="30" height="30" 
											  toolTip=" "
											  toolTipCreate="{onCreateMerchantToolTip(event)}"
											  source="{ImageContainer.QUESTION}"/>
								</s:HGroup>
								<s:Button label="{Translations.DELETE.getItemAt(Session.LANGUAGE)}"
										  skinClass="com.uralys.tribes.skins.CustomButtonSkin"
										  click="deleteMerchant()"
										  visible="{city.caravan != null}"
										  enabled="{city.caravan.moves.length == 1 || city.caravan.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
								
								<renderers:UnitRenderer unit="{city.caravan}" visible="{city.caravan != null}"/>
							</s:VGroup>
							<s:VGroup>
							<mx:Grid verticalGap="10" 
									 horizontalGap="10" 
									 horizontalAlign="center" 
									 verticalAlign="middle"
									 visible="{city.caravan != null}">
								<mx:GridRow >
									<mx:GridItem >
										<s:Label text="{Translations.NB_CARAVAN.getItemAt(Session.LANGUAGE)}" />
									</mx:GridItem>
									<mx:GridItem horizontalAlign="center" verticalAlign="middle">
										<s:HGroup verticalAlign="middle">
											<s:Label text="{city.caravan.size}" 
													 styleName="numberLabel" 
													 textAlign="right"
													 minWidth="60"/>
											<mx:Image source="{ImageContainer.MERCHANT1}"/>
											<s:HSlider id="merchantsSlider"
													   showDataTip="false"
													   liveDragging="true" 
													   change="merchantsCheck(event)"
													   value="{city.caravan.size}"
													   minimum="50"
													   maximum="{city.unemployed + city.caravan.size}"
													   snapInterval="1"
													   enabled="{city.caravan.moves.length == 1 || city.caravan.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
										</s:HGroup>
									</mx:GridItem>
									<mx:GridItem/>
								</mx:GridRow>
								<mx:GridRow>
									<mx:GridItem colSpan="3">
										<mx:HRule width="100%"/>
									</mx:GridItem>
								</mx:GridRow >
							</mx:Grid>
							<s:Scroller maxHeight="200" width="100%"
										visible="{city.caravan != null}" >
								<s:Group width="100%"
										 visible="{city.caravan != null}">
									<mx:Grid verticalGap="10" 
											 horizontalGap="10" 
											 horizontalAlign="center" 
											 verticalAlign="middle"
											 width="100%">
										<mx:GridRow >
											<mx:GridItem />
											<mx:GridItem horizontalAlign="center">
												<s:Label text="{Translations.CARRIAGE.getItemAt(Session.LANGUAGE)}" />
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<s:Label text="{Translations.AVAILABLE_STOCK.getItemAt(Session.LANGUAGE)}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.WHEAT.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WHEAT}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.caravan.wheat}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="wheatMerchantSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="wheatMerchantCheck(event)"
															   value="{city.caravan.wheat}"
															   maximum="{city.wheat + city.caravan.wheat}"
															   snapInterval="1"
															   enabled="{city.caravan.moves.length == 1 || city.caravan.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.wheat}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.WOOD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WOOD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.caravan.wood}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="woodMerchantSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="woodMerchantCheck(event)"
															   value="{city.caravan.wood}"
															   maximum="{city.wood + city.caravan.wood}"
															   snapInterval="1"
															   enabled="{city.caravan.moves.length == 1 || city.caravan.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.wood}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.IRON.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.IRON}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.caravan.iron}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="ironMerchantSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="ironMerchantCheck(event)"
															   value="{city.caravan.iron}"
															   maximum="{city.iron + city.caravan.iron}"
															   snapInterval="1"
															   enabled="{city.caravan.moves.length == 1 || city.caravan.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.iron}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.caravan.gold}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="goldMerchantSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="goldMerchantCheck(event)"
															   value="{city.caravan.gold}"
															   maximum="{city.gold + city.caravan.gold}"
															   snapInterval="1"
															   enabled="{city.caravan.moves.length == 1 || city.caravan.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.gold}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.BOW.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.BOW}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.caravan.bows}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="bowsMerchantSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="bowsMerchantCheck(event)"
															   value="{city.caravan.bows}"
															   maximum="{city.bows + city.caravan.bows}"
															   snapInterval="1"
															   enabled="{city.caravan.moves.length == 1 || city.caravan.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.bows}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.SWORD.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.SWORD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.caravan.swords}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="swordsMerchantSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="swordsMerchantCheck(event)"
															   value="{city.caravan.swords}"
															   maximum="{city.swords + city.caravan.swords}"
															   snapInterval="1"
															   enabled="{city.caravan.moves.length == 1 || city.caravan.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.swords}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.ARMOR.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.ARMOR}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.caravan.armors}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="armorsMerchantSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="armorsMerchantCheck(event)"
															   value="{city.caravan.armors}"
															   maximum="{city.armors + city.caravan.armors}"
															   snapInterval="1"
															   enabled="{city.caravan.moves.length == 1 || city.caravan.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.armors}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem colSpan="4">
												<mx:HRule width="100%"/>
											</mx:GridItem>
										</mx:GridRow >
									</mx:Grid>
								</s:Group>
							</s:Scroller>
							</s:VGroup>
						</s:HGroup>
					</s:VGroup>
				</s:NavigatorContent>
				
				<!-- =============================================================================================== -->
				<!-- Armies Tab -->
				
				<s:NavigatorContent label="{Translations.ARMY.getItemAt(Session.LANGUAGE)}">
					<s:HGroup width="100%" horizontalAlign="center">
						<s:VGroup horizontalAlign="center">
							<s:Button label="{Translations.NEW_ARMY.getItemAt(Session.LANGUAGE)}" 
									  skinClass="com.uralys.tribes.skins.CustomButtonSkin"
									  click="newArmy()"
									  enabled="{city.army == null &amp;&amp; Session.player.units.length &lt; Session.player.cities.length*3}"/>
							<s:Button label="{Translations.DELETE.getItemAt(Session.LANGUAGE)}" 
									  skinClass="com.uralys.tribes.skins.CustomButtonSkin"
									  click="deleteArmy()"
									  visible="{city.army != null}"
									  enabled="{city.army.moves.length == 1 || city.army.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
							
							<renderers:UnitRenderer unit="{city.army}" visible="{city.army != null}"/>
						</s:VGroup>
						<mx:Grid verticalGap="10" 
								 horizontalGap="10" 
								 horizontalAlign="center" 
								 verticalAlign="middle"
								 visible="{city.army != null}">
							<mx:GridRow >
								<mx:GridItem >
									<s:Label text="{Translations.NB_ARMY.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:HGroup verticalAlign="middle">
										<s:Label text="{city.army.size}" 
												 styleName="numberLabel" 
												 textAlign="right"
												 minWidth="60"/>
										<mx:Image source="{ImageContainer.WARRIOR1}"/>
										<s:HSlider id="armySlider"
												   showDataTip="false"
												   liveDragging="true" 
												   change="armyCheck(event)"
												   value="{city.army.size}"
												   minimum="50"
												   maximum="{city.unemployed + city.army.size}"
												   snapInterval="1"
												   enabled="{city.army.moves.length == 1 || city.army.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
									</s:HGroup>
								</mx:GridItem>
								<mx:GridItem/>
							</mx:GridRow>
							<mx:GridRow>
								<mx:GridItem colSpan="4">
									<mx:HRule width="100%"/>
								</mx:GridItem>
							</mx:GridRow >
							<mx:GridRow >
								<mx:GridItem />
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.EQUIPMENT.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.AVAILABLE_STOCK.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.BOW.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.BOW}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:HGroup verticalAlign="middle">
										<s:Label text="{city.army.bows}" 
												 styleName="numberLabel" 
												 textAlign="right"
												 minWidth="60"/>
										<s:HSlider id="bowsArmySlider"
												   showDataTip="false"
												   liveDragging="true" 
												   change="bowsArmyCheck(event)"
												   value="{city.army.bows}"
												   maximum="{city.bows + city.army.bows}"
												   snapInterval="1"
												   enabled="{city.army.moves.length == 1 || city.army.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
									</s:HGroup>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="{city.bows}" />
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.SWORD.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.SWORD}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:HGroup verticalAlign="middle">
										<s:Label text="{city.army.swords}" 
												 styleName="numberLabel" 
												 textAlign="right"
												 minWidth="60"/>
										<s:HSlider id="swordsArmySlider"
												   showDataTip="false"
												   liveDragging="true" 
												   change="swordsArmyCheck(event)"
												   value="{city.army.swords}"
												   maximum="{city.swords + city.army.swords}"
												   snapInterval="1"
												   enabled="{city.army.moves.length == 1 || city.army.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
									</s:HGroup>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="{city.swords}" />
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.ARMOR.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.ARMOR}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:HGroup verticalAlign="middle">
										<s:Label text="{city.army.armors}" 
												 styleName="numberLabel" 
												 textAlign="right"
												 minWidth="60"/>
										<s:HSlider id="armorsArmySlider"
												   showDataTip="false"
												   liveDragging="true" 
												   change="armorsArmyCheck(event)"
												   value="{city.army.armors}"
												   maximum="{city.armors + city.army.armors}"
												   snapInterval="1"
												   enabled="{city.army.moves.length == 1 || city.army.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
									</s:HGroup>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="{city.armors}" />
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow>
								<mx:GridItem colSpan="4">
									<mx:HRule width="100%"/>
								</mx:GridItem>
							</mx:GridRow >
						</mx:Grid>
					</s:HGroup>
				</s:NavigatorContent>
				
				<!-- =============================================================================================== -->
				<!-- Buildings Tab -->
				
				<s:NavigatorContent label="{Translations.BUILDINGS.getItemAt(Session.LANGUAGE)}">
					<s:Scroller height="100%" width="100%">
						<s:VGroup width="100%" horizontalAlign="center">
							
							<mx:Spacer height="15"/>
							<s:HGroup width="100%" verticalAlign="middle">
								<mx:Image toolTip="{Translations.WHEAT.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WHEAT}"/>
								<renderers:BuildingRenderer stockBuilders="@{city.wheatStockBuilders}"
															stockCapacity="{city.wheatStockCapacity}"
															stockNextCapacity="@{city.wheatStockNextCapacity}"
															stockBeginTime="@{city.wheatStockBeginTime}"
															stockEndTime="@{city.wheatStockEndTime}"
															ratioUpgrade="20"
															city="{city}"
															id="wheatBuildingRenderer"
															/>
							</s:HGroup>

							<mx:Spacer height="15"/>
							<s:HGroup width="100%" verticalAlign="middle">
								<mx:Image toolTip="{Translations.WOOD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WOOD}"/>
								<renderers:BuildingRenderer stockBuilders="@{city.woodStockBuilders}"
															stockCapacity="{city.woodStockCapacity}"
															stockNextCapacity="@{city.woodStockNextCapacity}"
															stockBeginTime="@{city.woodStockBeginTime}"
															stockEndTime="@{city.woodStockEndTime}"
															ratioUpgrade="20"
															city="{city}"
															id="woodBuildingRenderer"
															/>
							</s:HGroup>

							<mx:Spacer height="15"/>
							<s:HGroup width="100%" verticalAlign="middle">
								<mx:Image toolTip="{Translations.IRON.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.IRON}"/>
								<renderers:BuildingRenderer stockBuilders="@{city.ironStockBuilders}"
															stockCapacity="{city.ironStockCapacity}"
															stockNextCapacity="@{city.ironStockNextCapacity}"
															stockBeginTime="@{city.ironStockBeginTime}"
															stockEndTime="@{city.ironStockEndTime}"
															ratioUpgrade="20"
															city="{city}"
															id="ironBuildingRenderer"
															/>
							</s:HGroup>

							<mx:Spacer height="15"/>
							<s:HGroup width="100%" verticalAlign="middle">
								<mx:Image toolTip="{Translations.BOW.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.BOW}"/>
								<renderers:BuildingRenderer stockBuilders="@{city.bowStockBuilders}"
															stockCapacity="{city.bowStockCapacity}"
															stockNextCapacity="@{city.bowStockNextCapacity}"
															stockBeginTime="@{city.bowStockBeginTime}"
															stockEndTime="@{city.bowStockEndTime}"
															ratioUpgrade="2"
															city="{city}"
															id="bowBuildingRenderer"
															/>
							</s:HGroup>

							<mx:Spacer height="15"/>
							<s:HGroup width="100%" verticalAlign="middle">
								<mx:Image toolTip="{Translations.SWORD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.SWORD}"/>
								<renderers:BuildingRenderer stockBuilders="@{city.swordStockBuilders}"
															stockCapacity="{city.swordStockCapacity}"
															stockNextCapacity="@{city.swordStockNextCapacity}"
															stockBeginTime="@{city.swordStockBeginTime}"
															stockEndTime="@{city.swordStockEndTime}"
															ratioUpgrade="2"
															city="{city}"
															id="swordBuildingRenderer"
															/>
							</s:HGroup>

							<mx:Spacer height="15"/>
							<s:HGroup width="100%" verticalAlign="middle">
								<mx:Image toolTip="{Translations.ARMOR.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.ARMOR}"/>
								<renderers:BuildingRenderer stockBuilders="@{city.armorStockBuilders}"
															stockCapacity="{city.armorStockCapacity}"
															stockNextCapacity="@{city.armorStockNextCapacity}"
															stockBeginTime="@{city.armorStockBeginTime}"
															stockEndTime="@{city.armorStockEndTime}"
															ratioUpgrade="2"
															city="{city}"
															id="armorBuildingRenderer"
															/>
							</s:HGroup>
						</s:VGroup>
					</s:Scroller>
				</s:NavigatorContent>
						
			</mx:ViewStack>
		</s:VGroup>
</s:Group>
