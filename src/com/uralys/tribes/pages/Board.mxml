<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:renderers="com.uralys.renderers.*"
		 width="100%" height="100%"
		 creationComplete="init()" >
	
	<fx:Script>
		<![CDATA[
			import com.uralys.tribes.commons.Session;
			import com.uralys.tribes.core.BoardClickListener;
			import com.uralys.tribes.core.BoardDrawer;
			import com.uralys.tribes.core.Pager;
			import com.uralys.tribes.entities.Army;
			import com.uralys.tribes.entities.City;
			import com.uralys.tribes.entities.Equipment;
			import com.uralys.tribes.entities.Game;
			import com.uralys.tribes.entities.Player;
			import com.uralys.tribes.entities.Smith;
			import com.uralys.tribes.managers.GameManager;
			
			import mx.effects.easing.Quadratic;
			import mx.utils.ObjectUtil;
			
			// ------------------------------------------------------------------------// 
			// 		map scrolling
			
			private var isDragging:Boolean = false;
			private var draggingImageXFrom:int;
			private var draggingImageYFrom:int;
			private var draggingImageXTo:int;
			private var draggingImageYTo:int;
			private var draggingStageXFrom:int;
			private var draggingStageYFrom:int;
			private var draggingStageXTo:int;
			private var draggingStageYTo:int;
			private var limitLeft:int;
			private var limitUp:int;
			
			[Bindable] private var coordinateX:int;
			[Bindable] private var coordinateY:int;
			
			protected function mouseDown(event:MouseEvent):void{
				isDragging = true;
				draggingImageXFrom = event.localX;
				draggingImageYFrom = event.localY;
				draggingStageXFrom = event.stageX;
				draggingStageYFrom = event.stageY;
				
				autoMoveNotNeeded = true;
				autoMove.stop();
				
				BoardClickListener.getInstance().clickOnBoard(event, player, board);
			}
			
			private var timer:Timer;
			private var autoMoveNotNeeded:Boolean = true;
			protected function mouseMove(event:MouseEvent):void{
				coordinateX = event.localX;
				coordinateY = event.localY;

				if(isDragging){
					timer.stop();
					timer.reset();
					timer.start();
					autoMoveNotNeeded = false;
					// on decale l'image du nombre de pixels du dernier mouvement
					// donc elle suit bien la souris et event.localXY a bien lieu au meme endroit sur l'image apres chaque mouseMove
					image.x += (event.localX - draggingImageXFrom);
					image.y += (event.localY - draggingImageYFrom);
				}
			}
			
			protected function stopDragging(event:MouseEvent):void{
				isDragging = false;
				
				if(autoMoveNotNeeded)
					return;
				
				draggingStageXTo = event.stageX;
				draggingStageYTo = event.stageY;
				
				autoMove.duration = 6*(Math.abs(draggingStageXTo - draggingStageXFrom) + Math.abs(draggingStageYTo - draggingStageYFrom));
				autoMove.xTo = image.x + (draggingStageXTo - draggingStageXFrom)*3;
				autoMove.yTo = image.y + (draggingStageYTo - draggingStageYFrom)*3;
				
				if(autoMove.xTo > 0)
					autoMove.xTo = 0;
				if(autoMove.yTo > 0)
					autoMove.yTo = 0;
				if(autoMove.xTo < limitLeft)
					autoMove.xTo = limitLeft;
				if(autoMove.yTo < limitUp)
					autoMove.yTo = limitUp;

				autoMove.play();
			}
				
			private function moveStoppedDuringDragging(event:TimerEvent):void{
				autoMoveNotNeeded = true;
			}

			//---------------------------------------------------------------------------------------//
			
			private var game:Game;
			private var player:Player;		

			[Bindable] private var selectedCity:City;
			
			//-----------------------------------------------------------//

			protected function init():void{
				timer = new Timer(41,1);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, moveStoppedDuringDragging);

				limitLeft = 500-image.width;
				limitUp = 500-image.height;
				
				initBoard();
			}
			
			//-----------------------------------------------------------//
			
			// set params est appelee avant creationComplete (init())
			// ici args contient 1 valeur.
			// args[0] game
			public function set params(args:Array):void{
				game = args[0];
				
				
				for each (var playerOfProfil:Player in Session.profil.players){
					if(playerOfProfil.gameUID == game.gameUID){
						this.player = playerOfProfil;
						this.selectedCity = player.cities.getItemAt(0) as City;
						Session.currentPlayer = player;
						break;
					}
				}
				
				if(game.currentTurn == player.lastTurnPlayed){
					player.lastTurnPlayed --;
					trace("PLAYING A TURN ALREDAY PLAYED");
				}
				
				for each(var army:Army in player.armies){
					for each(var city:City in player.cities){
						if(army.x == city.x && army.y == city.y){
							city.armies.addItem(army);
							city.armiesToFeed += army.size;
							break;
						}
					}
					
					for each(var equipment:Equipment in army.equipments){
						switch(equipment.item.name){
							case "bow" :
								army.bows += equipment.size;
								break;
							case "sword" :
								army.swords += equipment.size;
								break;
							case "armor" :
								army.armors += equipment.size;
								break;
						}
					}
				}

			};

			//-----------------------------------------------------------//
			
			private function initBoard():void{
				BoardDrawer.getInstance().redrawAllEntities(game, board);
				BoardClickListener.boardPage = this;
				
				image.x = 250 - selectedCity.x;
				image.y = 250 - selectedCity.y;
			}
			
			//----------------------------------------------------------------------------------------//
			
			public function clickOnCity(city:City):void{
				selectedCity = city;
				goLeft.play();
				appearCity.play();
			}
			
			//-----------------------------------------------------------//
			
			private function backToMain():void{
				hideCity.play();
				
				comeBack.play();
			}
			
			private function leave():void{
				GameManager.getInstance().getCurrentGames();
			}
			
			private function saveTurn():void{
				
				Session.TURN_SAVING_DONE = false;
				
				//------------------------------------------------------------------//

				for each(var city:City in player.cities){
					
					city.wheat += city.wheatEarned - city.wheatSpent;
					city.wood += city.woodEarned - city.woodSpent;
					city.iron += city.ironEarned - city.ironSpent;
					
					for each(var army:Army in city.armies){
						if(army.armyUID == "new"){
							var bows:Equipment = new Equipment();
							var swords:Equipment = new Equipment();
							var armors:Equipment = new Equipment();
							
							bows.size = army.bows;
							swords.size = army.swords;
							armors.size = army.armors;
							
							for each(var equipment:Equipment in city.equipmentStock){
								switch(equipment.item.name){
									case "bow" :
										bows.item = equipment.item;
										break;
									case "sword" :
										swords.item = equipment.item;
										break;
									case "armor" :
										armors.item = equipment.item;
										break;
								}
							}
							
							army.equipments.addItem(bows);
							army.equipments.addItem(swords);
							army.equipments.addItem(armors);
							
							
							player.armies.addItem(army);
						}
						else{
							for each(var equipment:Equipment in army.equipments){
								switch(equipment.item.name){
									case "bow" :
										equipment.size = army.bows;
										break;
									case "sword" :
										equipment.size = army.swords;
										break;
									case "armor" :
										equipment.size = army.armors;
										break;
								}
							}
						}
					}
					
					for each(var equipment:Equipment in city.equipmentStock){
						switch(equipment.item.name){
							case "bow" :
								equipment.size = city.bowStock
												+ city.bowsRestored
												- city.bowsEquiped
												+ city.bowWorkers * equipment.item.peopleRequired;
								
								break;
							case "sword" :
								equipment.size = city.swordStock
												+ city.swordsRestored
												- city.swordsEquiped
												+ city.swordWorkers * equipment.item.peopleRequired;
								break;
							case "armor" :
								equipment.size = city.armorStock
											+ city.armorsRestored
											- city.armorsEquiped
											+ city.armorWorkers * equipment.item.peopleRequired;
								break;
						}
					}

					for each(var smith:Smith in city.smiths){
						switch(smith.item.name){
							case "bow" :
								smith.people = city.bowWorkers;
								break;
							case "sword" :
								smith.people = city.swordWorkers;
								break;
							case "armor" :
								smith.people = city.armorWorkers;
								break;
						}
					}
				}

				//------------------------------------------------------------------//
				
				player.lastTurnPlayed ++;
				GameManager.getInstance().saveTurn(player);
				Pager.getInstance().goToPage(Home, Home.CURRENT_GAMES, Session.GAMES_PLAYING);
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:Move id="autoMove"
				target="{image}"
				easingFunction="{Quadratic.easeOut}"/>
		
		<mx:Move id="goLeft"
				 xTo="-1500"
				 target="{main}"
				 duration="350"
				 easingFunction="{Quadratic.easeIn}"/>
		<mx:Move id="comeBack"
				 xTo="0"
				 target="{main}"
				 easingFunction="{Quadratic.easeIn}"/>

		<mx:Move id="appearCity"
				 xTo="0"
				 target="{cityGroup}"
				 easingFunction="{Quadratic.easeIn}"/>
		<mx:Move id="hideCity"
				 xTo="1500"
				 target="{cityGroup}"
				 easingFunction="{Quadratic.easeIn}"/>


	</fx:Declarations>

	
	
	<s:Group id="main" width="100%" height="100%">
		<s:VGroup left="10" id="buttonsGroup" visible="{Session.TURN_SAVING_DONE}">
			<s:Button label="Save Turn" left="10" right="5" click="saveTurn()"/>
			<s:Button label="Leave this game" left="10" right="5" click="leave()"/>
		</s:VGroup>
		<s:HGroup width="100%" horizontalAlign="center" paddingTop="5">
			<s:Label text="X : {coordinateX}"/>
			<mx:Spacer width="200"/>
			<s:Label text="Y : {coordinateY}"/>
		</s:HGroup>
		<s:Group width="100%">
			<s:HGroup width="100%" horizontalAlign="center" paddingTop="50">
				<s:Group width="500" height="500"
					 clipAndEnableScrolling="true">
					<mx:Image id="image" 
						  useHandCursor="true"
						  buttonMode="true"
						  mouseChildren="false"
						  source="{ImageContainer.MAP}"
						  mouseDown="mouseDown(event)"
						  mouseMove="mouseMove(event)"
						  mouseOut="stopDragging(event)"
						  mouseUp="stopDragging(event)"/>
				</s:Group>
			</s:HGroup>
			<s:HGroup width="100%" horizontalAlign="center" paddingTop="50"
					  mouseEnabled="false"
					  mouseEnabledWhereTransparent="false">
				<s:Group width="500" height="500"
						 clipAndEnableScrolling="true"
						 mouseChildren="false"
						 mouseEnabled="false"
						 mouseEnabledWhereTransparent="false">
						<s:Group id="board"
								 x="{image.x}"
								 y="{image.y}"/>
				</s:Group>
			</s:HGroup>
		</s:Group>
	</s:Group>
	
	<!-- ====================================================================================== -->
	<!-- city -->
	
	
	<s:VGroup horizontalAlign="center" 
			  paddingTop="50"
			  id="cityGroup" 
			  width="{main.width}" 
			  height="{main.height}"
			  x="1500"
			  includeInLayout="false">
		<s:HGroup>
			<s:Button label="&lt;-- Ok" 
					  click="backToMain()"
					  visible="{selectedCity.unemployed >= 0}"
					  includeInLayout="{selectedCity.unemployed >= 0}"/>
			<s:Label text="Unemployed &lt; 0" 
					  visible="{selectedCity.unemployed &lt; 0}"
					  includeInLayout="{selectedCity.unemployed &lt; 0}"/>
			<mx:Spacer width="450"/>
		</s:HGroup>
		<renderers:CityForm 
				id="cityForm"
			    city="{selectedCity}"/>
		<mx:Spacer height="55"/>
	</s:VGroup>
		
	<!-- ====================================================================================== -->

	
</s:Group>
