<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:renderers="com.uralys.tribes.renderers.*"
				xmlns:components="com.uralys.tribes.components.*"
				useHandCursor="true"
				buttonMode="true"
				contentBackgroundAlpha="0" 
				enabled="{!Session.MOVE_A_UNIT || (UnitMover.getInstance().unit == unit)}"
				>
	
	<fx:Declarations>
		<s:Fade id="fade" alphaTo="0" duration="200"/>
		<s:Fade id="unfade" alphaTo="1" duration="200"/>
		
		<s:State name="classic"/>
		<s:State name="moving"/>
		<s:State name="shooting"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.uralys.tribes.commons.Numbers;
			import com.uralys.tribes.commons.Session;
			import com.uralys.tribes.commons.Translations;
			import com.uralys.tribes.core.BoardDrawer;
			import com.uralys.tribes.core.UnitMover;
			import com.uralys.tribes.entities.Unit;
			import com.uralys.tribes.main.ImageContainer;
			import com.uralys.tribes.managers.GameManager;
			import com.uralys.tribes.skins.CustomButtonSkin;
			import com.uralys.tribes.skins.WorkersProgressBarSkin;
			import com.uralys.tribes.skins.WorkersProgressTrackSkin;
			import com.uralys.utils.Utils;
			
			import mx.containers.ViewStack;
			import mx.core.FlexGlobals;
			import mx.effects.easing.Quadratic;
			import mx.events.ItemClickEvent;
			import mx.utils.ObjectUtil;
			
			import spark.components.IItemRenderer;
			
			//-------------------------------------------------------------------------------------//
			
 			private var _unit:Unit;
		
			[Bindable]
			public function get unit():Unit
			{
				return _unit;
			}
			
			public function set unit(value:Unit):void
			{
				_unit = value;
				if(_unit != null)
					refresh();
			}
			
			//-------------------------------------------------------------------------------------//

			[Bindable] private var nbActionsAvailable:int;

			[Bindable] private var shotEnabled:Boolean;
			[Bindable] private var reloading:Boolean;

			[Bindable] private var buildCityEnabled:Boolean;
			[Bindable] private var buildingCityInProgress:Boolean;
			
			[Bindable] private var moveInProgress:Boolean;
			[Bindable] private var conqueringInProgress:Boolean;

			[Bindable] private var hidActionViewStack:Boolean;
			
			//-------------------------------------------------------------------------------------//
			
			public function refresh():void
			{
				currentState = "classic";

				nbActionsAvailable = 0;
				navigatorIndexesToshow = [];
				
				shotEnabled = false;
				buildCityEnabled = false;
				reloading = false;
				moveInProgress = false;
				conqueringInProgress = false;
				hidActionViewStack = false;
				
				nbActionsAvailable = 1; // le deplacement
				navigatorIndexesToshow.push(0);
				
				if(unit.player.playerUID != Session.player.playerUID)
					return;
				
				if(unit.moves.length > 1){
					nbActionsAvailable ++; // la barre de temps du deplacement
					moveInProgress = true;
					callLater(this.actionsViewStack.setMoveInProgress);
					navigatorIndexesToshow.push(1);
				}
				else
				{
					if(unit.timeFromChallenging != -1){
						nbActionsAvailable ++; // la conquete
						navigatorIndexesToshow.push(3);
					
						callLater(actionsViewStack.setConquestInProgress);
					}
					
					if(unit.bows > 0 && unit.type == Unit.ARMY)
					{
						nbActionsAvailable ++; // le tir
						navigatorIndexesToshow.push(2);
						
						Session.timer.removeEventListener(TimerEvent.TIMER, actionsViewStack.setReloading);
						
						var now:Number = new Date().getTime();
						if(now - unit.lastShotTime > Numbers.BASE_TIME_FOR_SHOOTING)
							 shotEnabled = true;
						else{
							callLater(actionsViewStack.setReloading);
							reloading = true;
						}
						
					}
					else if(Session.CURRENT_CELL_SELECTED.city == null 
						&& unit.mayBuildAcity()
						&& (Session.CURRENT_CELL_SELECTED.landOwner == null || unit.player.ally.allyUID == Session.CURRENT_CELL_SELECTED.landOwner.ally.allyUID))
					{
						nbActionsAvailable ++; // la construction d'une ville
						navigatorIndexesToshow.push(4);
						
						buildCityEnabled = true;
					}
					else{
						trace("noSpecialAction");
					}
				}
				
				if(thisNavigatorIsHidden(actionsViewStack.selectedIndex))
					goLeft(actionsViewStack);
			}
			
			//-------------------------------------------------------------------------------------//
			
			private var navigatorIndexesToshow:Array;
			
			private function goLeft(viewStack:ViewStack):void
			{
				trace("goleft");
				if(viewStack.selectedIndex == 0)
					viewStack.selectedIndex = viewStack.numElements-1;
				else
					viewStack.selectedIndex --;

				
				if(viewStack == actionsViewStack && thisNavigatorIsHidden(viewStack.selectedIndex))
					goLeft(viewStack);
			}

			private function goRight(viewStack:ViewStack):void
			{
				trace("goRight");
				if(viewStack.selectedIndex == viewStack.numElements-1)
					viewStack.selectedIndex = 0;
				else
					viewStack.selectedIndex ++;
				
				if(viewStack == actionsViewStack && thisNavigatorIsHidden(viewStack.selectedIndex))
					goRight(viewStack);
			}
			
			private function thisNavigatorIsHidden(selectedIndex:int):Boolean
			{
				trace("thisNavigatorIsHidden : " + selectedIndex);
				var navigatorIsHidden:Boolean = true;
				for(var i:int = 0; i<navigatorIndexesToshow.length; i++)
				{
					if(navigatorIndexesToshow[i] == selectedIndex){
						navigatorIsHidden = false;
					}
				}
				
				return navigatorIsHidden;
			}
			
			//-------------------------------------------------------------------------------------//
			
			private function validateMoves():void{
				UnitMover.getInstance().validateUnitMoves(false);
				refresh();
			}
			
			private function cancelMoving():void{
				UnitMover.getInstance().validateUnitMoves(true);
				refresh();
			}

			//-------------------------------------------------------------------------------------//
			
			public function cancelShoot():void
			{
				Session.SHOOTING = false;
				BoardDrawer.getInstance().removeBowsToShoot();
				refresh();
			}

			//-------------------------------------------------------------------------------------//

			private function selectVisibleUnit():void
			{
				try{
					if(Session.CURRENT_CELL_SELECTED != null
					&& Session.CURRENT_CELL_SELECTED.visibleUnit.unitUID != unit.unitUID)
					{
						Session.CURRENT_CELL_SELECTED.visibleUnit = unit;
						GameManager.getInstance().refreshCellDisplay(Session.CURRENT_CELL_SELECTED);
					}
				}
				catch(e:Error){
					// Il est impossible d'accéder à la propriété ou à la méthode d'une référence d'objet nul.
					// at com.uralys.tribes.components::UnitRenderer/selectVisibleUnit()[/Users/mad/Projects/Flex/TribesAndKhansClient/src/com/uralys/tribes/components/UnitRenderer.mxml:217
				}
			}
			
		]]>
	</fx:Script>
	
	<s:Group id="groupDetails" height="100" width="180" click="{selectVisibleUnit()}">
		
		
		<s:Rect left="0" right="0" top="0" bottom="0" radiusX="5" radiusY="5">
			<s:fill>
				<s:SolidColor color="{(unit.ownerStatus == Unit.PLAYER) ? Numbers.colorPlayer : (unit.ownerStatus == Unit.ALLY ? Numbers.colorAlly  : Numbers.colorEnnemy)}" alpha="0.4"/>
			</s:fill>
		</s:Rect>
		<s:Group excludeFrom="moving,shooting" width="100%">
			<renderers:PlayerName player="{unit.player}" left="5"/>
			
			<s:Image source="{unit.type == Unit.ARMY ? ImageContainer.WARRIOR1 : ImageContainer.MERCHANT1}"
					 right="5"/>
			
			<s:Image source="{ImageContainer.LEFT_ARROW}" click="{goLeft(unitDataViewStack)}" left="10" top="30"
					 visible="{unit.ownerStatus == Unit.PLAYER || unit.ownerStatus == Unit.ALLY}"/>
			<s:Image source="{ImageContainer.RIGHT_ARROW}" click="{goRight(unitDataViewStack)}" right="10" top="30"
					 visible="{unit.ownerStatus == Unit.PLAYER || unit.ownerStatus == Unit.ALLY}"/>
			
			<components:UnitDataViewsStack
				unit="@{unit}"
				id="unitDataViewStack"
				top="30"
				height="30"
				width="100%"
				visible="{unit.ownerStatus == Unit.PLAYER || unit.ownerStatus == Unit.ALLY}"/>
				
			<s:Image source="{ImageContainer.LEFT_ARROW}" click="{goLeft(actionsViewStack)}" left="10" top="65"
					 visible="{nbActionsAvailable &gt; 1}"/>
			<s:Image source="{ImageContainer.RIGHT_ARROW}" click="{goRight(actionsViewStack)}" right="10" top="65"
					 visible="{nbActionsAvailable &gt; 1}"/>
			
			<components:UnitActionViewStack
				unit="@{unit}"
				unitRenderer="{this}"
				currentState="@{currentState}"
				id="actionsViewStack" 
				top="65"
				height="30"
				width="100%"
				visible="{unit.ownerStatus == Unit.PLAYER}"
				shotEnabled="{shotEnabled}"
				reloading="{reloading}"
				buildCityEnabled="{buildCityEnabled}"
				buildingCityInProgress="{buildingCityInProgress}"
				moveInProgress="{moveInProgress}"
				conqueringInProgress="{conqueringInProgress}"
				hidActionViewStack="{hidActionViewStack}"
				/>
		</s:Group>
		
		<s:VGroup verticalAlign="middle" 
				  horizontalAlign="center" 
				  width="100%"
				  includeIn="moving"
				  paddingTop="7">
			
			<s:Button label="{Translations.VALIDATE.getItemAt(Session.LANGUAGE)}" 
					  click="{validateMoves()}" 
					  enabled="{UnitMover.newMoveAdded}"
					  skinClass="com.uralys.tribes.skins.CustomButtonSkin"/>
			
			<s:Button label="{Translations.CANCEL.getItemAt(Session.LANGUAGE)}" 
					  click="{cancelMoving()}" 
					  skinClass="com.uralys.tribes.skins.CustomButtonSkin"/>
			
			<s:Button label="{Translations.DELETE_LAST_MOVE.getItemAt(Session.LANGUAGE)}" 
					  click="{UnitMover.getInstance().deleteLastMove()}"
					  enabled="{Session.REMOVING_MOVES_ENABLE &amp;&amp; unit != null &amp;&amp; unit.moves.length &gt; 2}" 
					  skinClass="com.uralys.tribes.skins.CustomButtonSkin"/>
			
		</s:VGroup>
		
		<s:VGroup verticalAlign="middle" 
				  horizontalAlign="center" 
				  width="100%"
				  includeIn="shooting"
				  paddingTop="7">
			
			<s:Button label="{Translations.CANCEL.getItemAt(Session.LANGUAGE)}" 
					  click="{cancelShoot()}" 
					  skinClass="com.uralys.tribes.skins.CustomButtonSkin"/>
			
		</s:VGroup>
	</s:Group>
	
</s:Group>
