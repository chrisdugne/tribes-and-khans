<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:renderers="com.uralys.tribes.renderers.*"
		 xmlns:windows="com.uralys.tribes.windows.*" 
		 width="100%" height="100%"
		 creationComplete="init()" xmlns:components="com.uralys.tribes.components.*" >
	
	<fx:Declarations>
		<s:State name="board"/>
		<s:State name="city"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			//---------------------------------------------------------------------------------------//
			
			import com.uralys.tribes.commons.Numbers;
			import com.uralys.tribes.commons.Session;
			import com.uralys.tribes.commons.Translations;
			import com.uralys.tribes.core.BoardClickAnalyser;
			import com.uralys.tribes.core.BoardDrawer;
			import com.uralys.tribes.core.Pager;
			import com.uralys.tribes.core.UnitMover;
			import com.uralys.tribes.entities.Cell;
			import com.uralys.tribes.entities.City;
			import com.uralys.tribes.entities.Game;
			import com.uralys.tribes.entities.Move;
			import com.uralys.tribes.entities.Player;
			import com.uralys.tribes.entities.Unit;
			import com.uralys.tribes.main.ImageContainer;
			import com.uralys.tribes.managers.GameManager;
			import com.uralys.tribes.renderers.Pawn;
			import com.uralys.tribes.skins.ClassicProgressBarSkin;
			import com.uralys.tribes.skins.CustomProgressTrackSkin;
			import com.uralys.utils.Utils;
			
			import mx.containers.TitleWindow;
			import mx.core.FlexGlobals;
			import mx.effects.easing.Quadratic;
			import mx.events.ItemClickEvent;
			
			//---------------------------------------------------------------------------------------//
			
			[Bindable] public var selectedCity:City;
			
			//----------------------------------------------------------//

			protected function init():void
			{
				Session.timer.start();
				initBoard();
			}
			
			//-----------------------------------------------------------//
			
			// set params est appelee avant creationComplete (init())
			public function set params(args:Array):void
			{
				FlexGlobals.topLevelApplication.loginWindow.closeWindow();
				selectedCity = Session.player.cities.getItemAt(0) as City;
				
				if(Session.player.name == "New Player"){
					showChangeName.play();
				}
			}
			
			//==============================================================================================================//
			// 	Game management
			
			private function initBoard():void
			{
				currentState = "board";
				
				if(selectedCity == null){
					FlexGlobals.topLevelApplication.message('GAME OVER ON THIS SERVER', 700);
					Session.GAME_OVER = true;
					
					selectedCity = new City();
					selectedCity.x = 100;
					selectedCity.y = 100;
					
					GameManager.getInstance().initMap(100, 100);
				}
				
				//------------------------------------------------------------//

				Session.board = this;
				placeBoard(selectedCity.x, selectedCity.y, false);
				
				GameManager.getInstance().refreshPlayer(Session.player);
			}
	
			//----------------------------------------------------------------------------------------//

			/**
			 * le BoardClickListener regarde si il y a une ville dans la case clickee et arrive ici
			 */ 
			public function showEnterCity(city:City):void
			{
				trace("SHOW ENTER CITY");
				if(Session.MOVE_A_UNIT){
					return;
				}
				
				for each(var cityInSession:City in Session.player.cities)
				{
					if(cityInSession.cityUID == city.cityUID){
						selectedCity = cityInSession;
						trace("found selectedCity");
						break;
					}
				}
				
				// on calcule si ce n'a pas été fait avant
				GameManager.getInstance().refreshCityWorkersOnResources(false, selectedCity, false);
				
				enterCityForm.includeInLayout = true;
				enterCityForm.visible = true;				
				enterCityButton.enabled = selectedCity.beginTime < new Date().getTime();
				
				setBuildingCityProgressBar();
			}
				

			private function setBuildingCityProgressBar():void
			{
				var millisRemaining:Number = selectedCity.beginTime - new Date().getTime(); 
				
				var millisSpent:Number = Numbers.TIME_TO_BUILD_A_CITY - millisRemaining;
				
				var hours:int = millisRemaining/60/60/1000;
				var minutes:int = (millisRemaining-hours*60*60*1000)/60/1000;
				
				buildingCityProgessBar.setProgress( millisSpent, Numbers.TIME_TO_BUILD_A_CITY );
				labelBuildingCity.text = Translations.CITY_BUILDING_DONE.getItemAt(Session.LANGUAGE) + " " +(hours>9 ? "" : "0") + hours + "h"+ (minutes>9 ? "" : "0") + minutes;
			}
			
			private function enterCity(event:MouseEvent):void
			{
				cityForm.refreshCity();
				goLeft.play();
				appearCity.play();
				
				currentState = "city";
			}
			
			

			//-----------------------------------------------------------//

			private function saveCityAndGoBackToBoard():void
			{				
				trace("-----");
				trace("saveCityAndGoBackToBoard");
				
				var unitsToRecord:Array = [];
				var army:Unit = Session.CURRENT_CELL_SELECTED.army;
				var caravan:Unit = Session.CURRENT_CELL_SELECTED.caravan;
				
				// on force la validation du marchand si il existe et qu'il reste dans la ville
				// si il est en mouvement, on ne peut pas l'editer donc pas besoin d'appeler le validateMerchants (qui casserait tout en placant le timeTo à -1) 
				if(caravan != null 
				&& caravan.moves.length == 1)
				{
					unitsToRecord.push(caravan);
				}

				// IDEM pour army
				if(army != null 
				&& army.moves.length == 1)
				{
					unitsToRecord.push(army);
				}
				
				GameManager.getInstance().saveCity(selectedCity, unitsToRecord);
				hideCity.play();
				comeBack.play();
				
				currentState = "board";
			}
			
			//======================================================================================//
			
			public function placeBoard(x:int, y:int, simulateMouseClick:Boolean = true):void
			{
				trace("placeBoard  : " + x + " | " + y);
				mapPositioner.x = Session.MAP_WIDTH/2 
					- Utils.getXPixel(x)
					- Utils.getLandWidth()/2;
				mapPositioner.y = Session.MAP_HEIGHT/2 
					- Utils.getYPixel(y)
					- Utils.getLandHeight()/2;
				trace("mapPositioner  : " + mapPositioner.x + " | " + mapPositioner.y);

				
				Session.CENTER_X = x;
				Session.CENTER_Y = y;
				
				Session.COORDINATE_X = x;
				Session.COORDINATE_Y = y;
				
				try{
					Session.CURRENT_CELL_SELECTED = Session.map[x][y];
				}catch(e:Error){};
				
				if(simulateMouseClick)
					BoardClickAnalyser.getInstance().simulateClick(); // simule le click sur la case x,y
			}

		]]>
	</fx:Script>
	
	<!-- ====================================================================================== -->
	
	<fx:Declarations>
		<mx:Move id="goLeft"
				 xTo="-1500"
				 target="{main}"
				 duration="350"
				 easingFunction="{Quadratic.easeIn}"/>
		<mx:Move id="comeBack"
				 xTo="0"
				 target="{main}"
				 easingFunction="{Quadratic.easeIn}"/>

		<mx:Move id="appearCity"
				 xTo="0"
				 target="{cityGroup}"
				 easingFunction="{Quadratic.easeIn}"/>
		<mx:Move id="hideCity"
				 xTo="1500"
				 target="{cityGroup}"
				 easingFunction="{Quadratic.easeIn}"/>
		
		
		<s:Move id="hideChangeName" target="{changeNameWindow}" xTo="-375"/>
		<s:Move id="showChangeName" target="{changeNameWindow}" xTo="0"/>

		<s:Move id="hideCityChangeName" target="{changeCityNameWindow}" xTo="-375"/>
		<s:Move id="showCityChangeName" target="{changeCityNameWindow}" xTo="0"/>
		
	</fx:Declarations>
	
	<!-- ====================================================================================== -->
	
	<s:Group id="main" width="100%" height="100%">
		
		<components:PlayerUnitsAndCities top="70" right="15"/>
		
		<!-- =============================================================================================== -->
		<!-- Units Tab -->
		
		<s:VGroup id="enterCityForm"
				  top="150" 
				  x="{boardImage.x+Session.MAP_WIDTH + 65}"
				  visible="false"
				  includeInLayout="false"
				  horizontalAlign="center"
				  paddingTop="5"
				  width="200">
			<s:HGroup>
				<s:Label text="{Translations.CITY.getItemAt(Session.LANGUAGE)} : {Session.CURRENT_CELL_SELECTED.city.name} ({Session.CURRENT_CELL_SELECTED.city.population})"
						  click="if(Session.player.playerUID == Session.CURRENT_CELL_SELECTED.landOwner.playerUID)showCityChangeName.play()"/>
				<mx:Image source="{ImageContainer.getImage(ImageContainer.EDIT)}"
					  click="showCityChangeName.play()"
					  visible="{Session.player.playerUID == Session.CURRENT_CELL_SELECTED.landOwner.playerUID}"/>
			</s:HGroup>
			<renderers:PlayerName player="{Session.player.playerUID == Session.CURRENT_CELL_SELECTED.landOwner.playerUID ? Session.player : Session.CURRENT_CELL_SELECTED.landOwner}"/>
			
			<s:Button label="{Translations.ENTER_CITY.getItemAt(Session.LANGUAGE)}" 
					  id="enterCityButton"
					  click="enterCity(event)"
					  skinClass="com.uralys.tribes.skins.CustomButtonSkin"
					  visible="{Session.player.playerUID == Session.CURRENT_CELL_SELECTED.landOwner.playerUID}"/>
			<mx:ProgressBar id="buildingCityProgessBar"
							width="120"
							right="0" top="0"
							mode="manual"
							trackSkin="{CustomProgressTrackSkin}"
							barSkin="{ClassicProgressBarSkin}"
							label="" 
							includeInLayout="{!enterCityButton.enabled}"
							visible="{!enterCityButton.enabled}"
							labelPlacement="top"/>
			<s:Label id="labelBuildingCity"
					 includeInLayout="{!enterCityButton.enabled}"
					 visible="{!enterCityButton.enabled}"/>
			
			<s:Button label="{Translations.REFRESH.getItemAt(Session.LANGUAGE)}" 
					  id="refreshOpponentButton"
					  click="{GameManager.getInstance().getPlayer(Session.CURRENT_CELL_SELECTED.landOwner)}"
					  skinClass="com.uralys.tribes.skins.CustomButtonSkin"
					  visible="{Session.player.playerUID != Session.CURRENT_CELL_SELECTED.landOwner.playerUID
					  		&amp;&amp; Session.CURRENT_CELL_SELECTED.landOwner.lastStep &lt; Session.player.lastStep}"/>
		</s:VGroup>
		
		<s:VGroup id="unitForm"
				  top="290" 
				  x="{boardImage.x+Session.MAP_WIDTH + 65}"
				  visible="{Session.CURRENT_CELL_SELECTED != null 
						  &amp;&amp; 
						  ((Session.CURRENT_CELL_SELECTED.army != null 
						  &amp;&amp; Session.CURRENT_CELL_SELECTED.army.size > 0)
						  ||
				  		  (Session.CURRENT_CELL_SELECTED.caravan != null 
						  &amp;&amp; Session.CURRENT_CELL_SELECTED.caravan.size > 0))}"
				  horizontalAlign="center"
				  paddingTop="5"
				  width="200">
			
			<mx:HRule width="180"/>
			<components:UnitRenderer unit="{Session.CURRENT_CELL_SELECTED.army}" 
									visible="{Session.CURRENT_CELL_SELECTED != null &amp;&amp; Session.CURRENT_CELL_SELECTED.army !=null &amp;&amp; Session.CURRENT_CELL_SELECTED.army.size > 0}"/>
			<mx:HRule width="180"/>
			<components:UnitRenderer unit="{Session.CURRENT_CELL_SELECTED.caravan}" 
									visible="{Session.CURRENT_CELL_SELECTED != null &amp;&amp; Session.CURRENT_CELL_SELECTED.caravan !=null &amp;&amp; Session.CURRENT_CELL_SELECTED.caravan.size > 0}"/>
		</s:VGroup>

		<!-- =============================================================================================== -->
		
		<s:HGroup width="100%" horizontalAlign="center" paddingTop="5">
			<s:Label text="X : {Session.COORDINATE_X}"/>
			<mx:Spacer width="200"/>
			<s:Label text="Y : {Session.COORDINATE_Y}"/>
		</s:HGroup>

		<!-- =============================================================================================== -->

		<s:Group width="100%">
			<s:Group width="{Session.MAP_WIDTH}" 
					 height="{Session.MAP_HEIGHT}"
					 x="50"
					 y="30"
					 id="boardImage"
					 clipAndEnableScrolling="true"	  
					 useHandCursor="true">
				<s:Group id="mapPositioner" 
					  buttonMode="true"
					  width="{Numbers.LAND_WIDTH*400}"
					  height="{Numbers.LAND_HEIGHT*400}"
					  mouseDown="BoardClickAnalyser.getInstance().mouseDown(event)"
					  mouseMove="BoardClickAnalyser.getInstance().mouseMove(event)"
					  mouseUp="BoardClickAnalyser.getInstance().mouseUp(event)"/>
				<s:Group id="landLayer"
						 visible="{Session.LANDS_VISIBLE}"
						 width="{Numbers.LAND_WIDTH*400}"
						 height="{Numbers.LAND_HEIGHT*400}"
						 x="{mapPositioner.x}"
						 y="{mapPositioner.y}"
						 mouseEnabled="false"
						 mouseChildren="false"
						 mouseEnabledWhereTransparent="false"/>
				<s:Group id="pawnLayer"
						 width="{Numbers.LAND_WIDTH*400}"
						 height="{Numbers.LAND_HEIGHT*400}"
						 x="{mapPositioner.x}"
						 y="{mapPositioner.y}"
						 mouseEnabled="false"
						 mouseChildren="false"
						 mouseEnabledWhereTransparent="false"/>
				<s:Group id="highlighters"
						 width="{Numbers.LAND_WIDTH*400}"
						 height="{Numbers.LAND_HEIGHT*400}"
						 x="{mapPositioner.x}"
						 y="{mapPositioner.y}"
						 mouseEnabled="false"
						 mouseChildren="true"
						 mouseEnabledWhereTransparent="false">
					
					<mx:Image id="currentMouseHighLightNormal"
							  source="{ImageContainer.getImage(ImageContainer.HIGHLIGHT_BLANC)}"
							  visible="{!Session.MOVE_A_UNIT}"
							  x="{Session.COORDINATE_X * (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4) * BoardDrawer.getInstance().scale}"
							  y="{Session.COORDINATE_Y * (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2) * BoardDrawer.getInstance().scale}"
							  scaleX="{BoardDrawer.getInstance().scale}"
							  scaleY="{BoardDrawer.getInstance().scale}"
							  mouseEnabled="false"/>

					<mx:Image id="currentMouseHighLight4UnitMoves"
							  source="{ImageContainer.getImage(ImageContainer.HIGHLIGHT_BLANC)}"
							  visible="{Session.MOVE_A_UNIT}"
							  x="{Session.COORDINATE_X * (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4) * BoardDrawer.getInstance().scale}"
							  y="{Session.COORDINATE_Y * (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2) * BoardDrawer.getInstance().scale}"
							  scaleX="{BoardDrawer.getInstance().scale}"
							  scaleY="{BoardDrawer.getInstance().scale}"
							  mouseEnabled="false"/>

					<mx:Image id="currentSelectionHighLight"
							  source="{ImageContainer.getImage(ImageContainer.HIGHLIGHT_BLANC)}"
							  x="{Session.CURRENT_SELECTION_X * (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4) * BoardDrawer.getInstance().scale}"
							  y="{Session.CURRENT_SELECTION_Y * (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2) * BoardDrawer.getInstance().scale}"
							  scaleX="{BoardDrawer.getInstance().scale}"
							  scaleY="{BoardDrawer.getInstance().scale}"
							  mouseEnabled="false"/>
					
				</s:Group>
 			</s:Group>
				
			<mx:Image source="{ImageContainer.MAP_BORDER_TOP}"
					  x="{boardImage.x-31}"
					  y="{boardImage.y-31}"
					  mouseOver="if(BoardClickAnalyser.isDragging)BoardClickAnalyser.getInstance().mouseUp(event)"/>
			<mx:Image source="{ImageContainer.MAP_BORDER_BOTTOM}"
					  x="{boardImage.x-31}"
					  y="{boardImage.y+Session.MAP_HEIGHT - 31}"
					  mouseOver="if(BoardClickAnalyser.isDragging)BoardClickAnalyser.getInstance().mouseUp(event)"/>
			<mx:Image source="{ImageContainer.MAP_BORDER_LEFT}"
					  x="{boardImage.x-31}"
					  y="{boardImage.y + 31}"
					  mouseOver="if(BoardClickAnalyser.isDragging)BoardClickAnalyser.getInstance().mouseUp(event)"/>
			<mx:Image source="{ImageContainer.MAP_BORDER_RIGHT}"
					  x="{boardImage.x+Session.MAP_WIDTH - 31}"
					  y="{boardImage.y + 31}"
					  mouseOver="if(BoardClickAnalyser.isDragging)BoardClickAnalyser.getInstance().mouseUp(event)"/>
			
			<mx:Image source="{ImageContainer.ZOOM_IN}"
					  id="zoomInButton"
					  visible="{!Session.MOVE_A_UNIT &amp;&amp; !Session.WAIT_FOR_SERVER}"
					  x="{boardImage.x + 25}"
					  y="{boardImage.y - 15}"
					  click="{BoardDrawer.getInstance().zoom()}"/>
			<mx:Image source="{ImageContainer.ZOOM_OUT}"
					  id="zoomOutButton"
					  visible="{!Session.MOVE_A_UNIT &amp;&amp; !Session.WAIT_FOR_SERVER}"
					  x="{boardImage.x + 60}"
					  y="{boardImage.y - 14}"
					  click="BoardDrawer.getInstance().unzoom()"/>
			<mx:Image source="{ImageContainer.REFRESH}"
					  id="refreshButton"
					  visible="{!Session.MOVE_A_UNIT &amp;&amp; !Session.WAIT_FOR_SERVER}"
					  x="{boardImage.x + 95}"
					  y="{boardImage.y - 13}"
					  click="{GameManager.getInstance().getPlayer(Session.player)}"/>
		</s:Group>
	</s:Group>
	
	<!-- ====================================================================================== -->
	<!-- city -->
	
	
	<s:VGroup horizontalAlign="center" 
			  paddingTop="50"
			  id="cityGroup" 
			  width="{main.width}" 
			  height="{main.height}"
			  x="3000"
			  includeInLayout="false">
		<s:HGroup>
			<s:Button label="&lt;-- {Translations.VALIDATE_MODIFICATIONS.getItemAt(Session.LANGUAGE)}" 
					  click="{saveCityAndGoBackToBoard()}"
					  skinClass="com.uralys.tribes.skins.CustomButtonSkin"
					  enabled="{cityForm.currentState != 'recordingUnit'}"/>
			<mx:Spacer width="450"/>
		</s:HGroup>
		<components:CityForm 
				id="cityForm"
			    city="@{selectedCity}"/>
		<mx:Spacer height="55"/>
	</s:VGroup>
		 
	<!-- ====================================================================================== -->
	
	<mx:Image source="{ImageContainer.MINI_LOGO}" right="70" y="-7"/>
	<components:StepProgress top="7" left="20"/>
			  
	<mx:SWFLoader source="{ImageContainer.LOADING}" 
		 		  visible="{Session.WAIT_FOR_SERVER}"
				  x="{boardImage.x+50}"
				  y="{boardImage.y+Session.MAP_HEIGHT - 16}"
				  excludeFrom="city"
				  rotation="2"/>
	
	<!-- ====================================================================================== -->
	
	<windows:ChangeName id="changeNameWindow" x="-375" y="100" type="1"/>
	<windows:ChangeName id="changeCityNameWindow" x="-375" y="100" type="2"/>
</s:Group>
