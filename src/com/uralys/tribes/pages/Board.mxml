<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:renderers="com.uralys.tribes.renderers.*"
		 width="100%" height="100%"
		 creationComplete="init()" >
	
	<fx:Declarations>
		<s:State name="classic"/>
		<s:State name="moveUnit"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import adobe.utils.CustomActions;
			
			import com.google.analytics.core.ga_internal;
			import com.uralys.tribes.commons.Numbers;
			import com.uralys.tribes.commons.Session;
			import com.uralys.tribes.commons.Translations;
			import com.uralys.tribes.core.BoardClickAnalyser;
			import com.uralys.tribes.core.BoardDrawer;
			import com.uralys.tribes.core.Pager;
			import com.uralys.tribes.core.UnitMover;
			import com.uralys.tribes.entities.Case;
			import com.uralys.tribes.entities.City;
			import com.uralys.tribes.entities.Conflict;
			import com.uralys.tribes.entities.Equipment;
			import com.uralys.tribes.entities.Game;
			import com.uralys.tribes.entities.Move;
			import com.uralys.tribes.entities.Player;
			import com.uralys.tribes.entities.Smith;
			import com.uralys.tribes.entities.Unit;
			import com.uralys.tribes.managers.GameManager;
			import com.uralys.tribes.windows.ReportsWindow;
			import com.uralys.utils.Utils;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.core.FlexGlobals;
			import mx.effects.easing.Quadratic;
			import mx.events.ItemClickEvent;
			import mx.graphics.GradientEntry;
			import mx.graphics.GradientStroke;
			import mx.graphics.LinearGradientStroke;
			import mx.graphics.RadialGradientStroke;
			import mx.graphics.SolidColor;
			import mx.graphics.SolidColorStroke;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			
			import spark.components.supportClasses.ItemRenderer;
			import spark.primitives.Ellipse;
			import spark.primitives.Line;


			//---------------------------------------------------------------------------------------//
			
			[Bindable] public var selectedCity:City;
			[Bindable] private var selectedUnit:Unit;
			
			private var moveGradient:Array;
			private var radialGrad:RadialGradientStroke;

			//----------------------------------------------------------//

			protected function init():void{

				timer = new Timer(41,1);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, moveStoppedDuringDragging);

				limitLeft = Session.MAP_WIDTH - mapPositioner.width;
				limitUp = Session.MAP_HEIGHT - mapPositioner.height;
				
				initBoard();
				
				moveGradient = [];
				moveGradient.push(new GradientEntry(0xFFFFFF));
				moveGradient.push(new GradientEntry(0x00cccc));
				moveGradient.push(new GradientEntry(0x000000));
				radialGrad = new RadialGradientStroke();
				radialGrad.entries = moveGradient;
				radialGrad.interpolationMethod

				currentState = 'classic';
			}
			
			// click sur une ville dans la barre laterale
			protected function onCityClick(event:ItemClickEvent):void{
				var city:City = event.currentTarget.selectedItem;
				mapPositioner.x = Session.MAP_WIDTH/2 
									- city.x * (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4) 
									- Numbers.LAND_WIDTH/2;
				mapPositioner.y = Session.MAP_HEIGHT/2 
									- city.y * (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2) 
									- Numbers.LAND_HEIGHT/2;
			}
			
			//---------------------------------------------------------------------//
			
			// click sur une armee dans la barre laterale
			// ou dans la liste sous 'enter city'
			protected function onUnitClick(unit:Unit):void{
				
				if(unit.status == Unit.TO_BE_CREATED)
					return;

				trace(unit.ownerStatus);
				
				if(unit.ownerStatus != Unit.PLAYER)
					return;
				
				if(Session.MOVE_A_UNIT)
					return;
				
				mapPositioner.x = Session.MAP_WIDTH/2 
									- Utils.getXFromCaseUID(unit.currentCaseUID) * (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4) 
									- Numbers.LAND_WIDTH/2;
				mapPositioner.y = Session.MAP_HEIGHT/2 
									- Utils.getYFromCaseUID(unit.currentCaseUID) * (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2) 
									- Numbers.LAND_WIDTH/2;
				
				selectedUnit = unit;
				
				Session.MOVE_A_UNIT = true;
				currentState = "moveUnit";
				
				UnitMover.getInstance().resetPendingMoves(selectedUnit);
				BoardDrawer.getInstance().removeAllUnitMovesImages();
				
				var xPreviousMove:int = -1;
				var yPreviousMove:int = -1;
				for each(var move:com.uralys.tribes.entities.Move in selectedUnit.moves){
					BoardDrawer.getInstance().addMoveImages(move, xPreviousMove, yPreviousMove);
					
					xPreviousMove = Utils.getXFromCaseUID(move.caseUID);
					yPreviousMove = Utils.getYFromCaseUID(move.caseUID); 
				}
			}
			
			//-----------------------------------------------------------//
			
			// set params est appelee avant creationComplete (init())
			public function set params(args:Array):void
			{
				this.selectedCity = Session.player.cities.getItemAt(0) as City;
				GameManager.getInstance().refreshCity(selectedCity, false);
				
				
				for each(var unit:Unit in Session.player.units){
					if(unit.type == 1){
						
						for each(var equipment:Equipment in unit.equipments){
							switch(equipment.item.name){
								case "bow" :
									unit.bows += equipment.size;
									break;
								case "sword" :
									unit.swords += equipment.size;
									break;
								case "armor" :
									unit.armors += equipment.size;
									break;
							}
						}
					}
					
					unit.isModified = false;
				}
			}
			
			//-----------------------------------------------------------//
			
			// appelee apres le BoardDrawer.refreshDisplay, qui raffraichit toutes les currentCaseUID des units de toutes les cases.
			public function refreshUnitsInCity():void{
				
				for each(var city:City in Session.player.cities){
					city.merchant = null;
					city.army = null;
					city.unitsToFeed = 0;
				}
				
				for each(var unit:Unit in Session.player.units){
					
					if(unit.type == 2){
						for each(var city:City in Session.player.cities)
						{
							if(Utils.getXFromCaseUID(unit.currentCaseUID) == city.x && Utils.getYFromCaseUID(unit.currentCaseUID) == city.y){
								city.merchant = unit;
								city.unitsToFeed += unit.size;
								break;
							}
						}
					}
					
					else if(unit.type == 1){
						for each(var city:City in Session.player.cities)
						{
							if(Utils.getXFromCaseUID(unit.currentCaseUID) == city.x && Utils.getYFromCaseUID(unit.currentCaseUID) == city.y){
								city.army = unit;
								city.unitsToFeed += unit.size;
								break;
							}
						}
					}
				}
				
			}
			
			//-----------------------------------------------------------//
//			
//			protected function initArmiesList():void{
//				armiesList.addEventListener(ItemClickEvent.ITEM_CLICK, onArmyClick);
//			}
//			
//			protected function initMerchantsList():void{
//				merchantsList.addEventListener(ItemClickEvent.ITEM_CLICK, onArmyClick);
//			}
			
			protected function initCitiesList():void{
				citiesList.addEventListener(ItemClickEvent.ITEM_CLICK, onCityClick);
			}
			
			// ------------------------------------------------------------------------// 
			// 		map scrolling
			
			private var isDragging:Boolean = false;
			private var draggingImageXFrom:int;
			private var draggingImageYFrom:int;
			private var draggingImageXTo:int;
			private var draggingImageYTo:int;
			private var draggingStageXFrom:int;
			private var draggingStageYFrom:int;
			private var draggingStageXTo:int;
			private var draggingStageYTo:int;
			private var limitLeft:int;
			private var limitUp:int;
			
			protected function mouseDown(event:MouseEvent):void{

				autoMoveNotNeeded = true;
				autoMove.stop();
				
				isDragging = true;
				draggingImageXFrom = event.currentTarget.mouseX; // le x de la souris sur le mapContainer
				draggingImageYFrom = event.currentTarget.mouseY; // le y de la souris sur le mapContainer
				draggingStageXFrom = event.stageX;
				draggingStageYFrom = event.stageY;
				
				if(Session.MOVE_A_UNIT){
					// manipulation d'une unite
				}
			}
			
			private var timer:Timer;
			private var autoMoveNotNeeded:Boolean = true;
			protected function mouseMove(event:MouseEvent):void{
				
				if(Session.MOVE_A_UNIT){
					// manipulation d'une unite
				}
				
				if(isDragging){
					
					timer.stop();
					timer.reset();
					timer.start();
					autoMoveNotNeeded = false;
					// on decale l'image du nombre de pixels du dernier mouvement
					// donc elle suit bien la souris et event.localXY a bien lieu au meme endroit sur l'image apres chaque mouseMove
					mapPositioner.x += (event.currentTarget.mouseX - draggingImageXFrom);
					mapPositioner.y += (event.currentTarget.mouseY - draggingImageYFrom);
				}
			}
			
			protected function mouseUp(event:MouseEvent):void{
				isDragging = false;
				Mouse.show();
				
				enterCityButton.visible = false;
				enterCityButton.includeInLayout = false;
				buildCityButton.visible = false;
				buildCityButton.includeInLayout = false;
				
				if(Session.MOVE_A_UNIT){
					UnitMover.getInstance().recordMove(selectedUnit);
				}
				else{
					Session.CURRENT_SELECTION_X = Session.COORDINATE_X;
					Session.CURRENT_SELECTION_Y = Session.COORDINATE_Y;
					
					Session.CURRENT_CASE_SELECTED = Session.map[Session.CURRENT_SELECTION_X][Session.CURRENT_SELECTION_Y];
					Session.CURRENT_CASE_SELECTED.tryRefresh();
				}
				
				if(autoMoveNotNeeded){
					return;
				}
				
				//--------------------------//
				// stop dragging : automove
				
				
				draggingStageXTo = event.stageX;
				draggingStageYTo = event.stageY;
				
				autoMove.duration = 6*(Math.abs(draggingStageXTo - draggingStageXFrom) + Math.abs(draggingStageYTo - draggingStageYFrom));
				autoMove.xTo = mapPositioner.x + (draggingStageXTo - draggingStageXFrom)*3;
				autoMove.yTo = mapPositioner.y + (draggingStageYTo - draggingStageYFrom)*3;

				if(autoMove.xTo > 0)
					autoMove.xTo = 0;
				if(autoMove.yTo > 0)
					autoMove.yTo = 0;
				if(autoMove.xTo < limitLeft)
					autoMove.xTo = limitLeft;
				if(autoMove.yTo < limitUp)
					autoMove.yTo = limitUp;
				
				autoMove.play();
			}
			
			private function moveStoppedDuringDragging(event:TimerEvent):void{
				autoMoveNotNeeded = true;
			}
			
			// ------------------------------------------------------------------------// 
			// 	minimap scrolling
			
			protected function mouseUpMiniMap(event:MouseEvent):void{
				isDragging = false;
			}

			protected function mouseDownMiniMap(event:MouseEvent):void{
				mapPositioner.x = 250 - event.localX*15;
				mapPositioner.y = 250 - event.localY*15;
				
				isDragging = true;
				
				autoMoveNotNeeded = true;
				autoMove.stop();
			}

			protected function mouseMoveMiniMap(event:MouseEvent):void{
				if(isDragging){
					mapPositioner.x = Session.MAP_WIDTH/2 - event.localX*15;
					mapPositioner.y = Session.MAP_WIDTH/2 - event.localY*15;
				}
			}
				
			//==============================================================================================================//
			// 	Game management
			
			private function initBoard():void{
				
				if(selectedCity == null){
					FlexGlobals.topLevelApplication.message('GAME OVER ON THIS SERVER', 7);					
				}
				
				//------------------------------------------------------------//

				Session.board = this;

				/*
					1 - loadItems
					2 - calculate missed steps
					3 - save lastmissed step
					4 - load cases
				*/
				GameManager.getInstance().loadItems();
				
				mapPositioner.x = Session.MAP_WIDTH/2 - (selectedCity.x * (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4) + Numbers.LAND_WIDTH/2)
				mapPositioner.y = Session.MAP_WIDTH/2 - (selectedCity.x * (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2) + Numbers.LAND_HEIGHT/2)

				//------------------------------------------------------------//
			
				try{
					FlexGlobals.topLevelApplication.createConflicts();	
				}
				catch(error:Error){}

				//------------------------------------------------------------//
				
			}
	
			//----------------------------------------------------------------------------------------//

			private function validateUnitMoves(cancel:Boolean):void{
				
				Session.MOVE_A_UNIT = false;
				if(!cancel){
					UnitMover.getInstance().validatePendingMoves(selectedUnit);					
					GameManager.getInstance().updateUnit(selectedUnit);
				}

				selectedUnit = null;
				currentState = "classic";
				
				BoardDrawer.getInstance().removeAllUnitMovesImages();
			}
			
			//----------------------------------------------------------------------------------------//
			
			public function clickOnCity(city:City):void{
				selectedCity = city;
				GameManager.getInstance().refreshCity(selectedCity, false);

				goLeft.play();
				appearCity.play();
			}

			public function appearMerchantChoice(merchant:Unit):void{
				buildCityButton.includeInLayout = true;
				buildCityButton.visible = true;
			}

			/**
			 * le BoardClickListener regarde si il y a une ville dans la case clickee et arrive ici
			 */ 
			public function showEnterCity(city:City):void{
				if(Session.MOVE_A_UNIT){
					return;
				}
					
				selectedCity = city;
				GameManager.getInstance().refreshCity(selectedCity, false);
				
				enterCityButton.includeInLayout = true;
				enterCityButton.visible = true;
				
			}
			
			private function enterCity(event:MouseEvent):void{
				goLeft.play();
				appearCity.play();
			}
			
			private function buildCity():void{
				
				var city:City = new City();
				city.cityUID = "new";
				city.name = "Ville en construction";
				city.gold = selectedUnit.gold;
				city.wheat = selectedUnit.wheat;
				city.wood = selectedUnit.wood - (Numbers.CITY_WOOD_BASE_PRICE + selectedUnit.size * 10);
				city.iron = selectedUnit.iron - (Numbers.CITY_IRON_BASE_PRICE + selectedUnit.size * 10);
				city.population = selectedUnit.size;
				
				city.x = Utils.getXFromCaseUID(selectedUnit.currentCaseUID);
				city.y = Utils.getYFromCaseUID(selectedUnit.currentCaseUID);
				
				Session.player.units.removeItemAt(Session.player.units.getItemIndex(selectedUnit));
				BoardDrawer.getInstance().removeArmyFromBoard(selectedUnit);
				//BoardDrawer.getInstance().drawCity(city, false);
				
				Session.player.cities.addItem(city);
				
				buildCityButton.visible = false;
				buildCityButton.includeInLayout = false;
			}

			//-----------------------------------------------------------//

			private function messageUnemployed():void{
				FlexGlobals.topLevelApplication.message("Vous utilisez plus de travailleurs que vous n'avez de population !", 5);
			}
			
			private function backToMain():void
			{
				hideCity.play();
				comeBack.play();
			}
//			
//			private function saveTurn():void{
//				
//				Session.TURN_SAVING_DONE = false;
//				
//				//------------------------------------------------------------------//
//
//				for each(var city:City in Session.currentPlayer.cities){
//					
//					city.wheat += city.wheatEarned - city.wheatSpent;
//					city.wood += city.woodEarned - city.woodSpent;
//					city.iron += city.ironEarned - city.ironSpent;
//					city.population += city.armyReleased - city.armyRaised;
//					
//					for each(var equipment:Equipment in city.equipmentStock){
//						switch(equipment.item.name){
//							case "bow" :
//								equipment.size = city.bowStock
//												+ city.bowsRestored
//												- city.bowsEquiped
//												+ city.bowWorkers * equipment.item.peopleRequired;
//								
//								break;
//							case "sword" :
//								equipment.size = city.swordStock
//												+ city.swordsRestored
//												- city.swordsEquiped
//												+ city.swordWorkers * equipment.item.peopleRequired;
//								break;
//							case "armor" :
//								equipment.size = city.armorStock
//											+ city.armorsRestored
//											- city.armorsEquiped
//											+ city.armorWorkers * equipment.item.peopleRequired;
//								break;
//						}
//					}
//
//					for each(var smith:Smith in city.smiths){
//						switch(smith.item.name){
//							case "bow" :
//								smith.people = city.bowWorkers;
//								break;
//							case "sword" :
//								smith.people = city.swordWorkers;
//								break;
//							case "armor" :
//								smith.people = city.armorWorkers;
//								break;
//						}
//					}
//				}
//				
//				for each(var army:Army in Session.currentPlayer.armies){
//					if(army.armyUID == "new"){
//						var bows:Equipment = new Equipment();
//						var swords:Equipment = new Equipment();
//						var armors:Equipment = new Equipment();
//						
//						bows.size = army.bows;
//						swords.size = army.swords;
//						armors.size = army.armors;
//						
//						for each(var equipment:Equipment in city.equipmentStock){
//							switch(equipment.item.name){
//								case "bow" :
//									bows.item = equipment.item;
//									break;
//								case "sword" :
//									swords.item = equipment.item;
//									break;
//								case "armor" :
//									armors.item = equipment.item;
//									break;
//							}
//						}
//						
//						army.equipments.addItem(bows);
//						army.equipments.addItem(swords);
//						army.equipments.addItem(armors);
//					}
//					else{
//						for each(var equipment:Equipment in army.equipments){
//							switch(equipment.item.name){
//								case "bow" :
//									equipment.size = army.bows;
//									break;
//								case "sword" :
//									equipment.size = army.swords;
//									break;
//								case "armor" :
//									equipment.size = army.armors;
//									break;
//							}
//						}
//					}
//					
//					// on ne passe pas les info graphiques par BlazesDS : inutile et surtout ca casse tout (objets enormes passes en AMF, ce qui casse le transfert)
//					army.armyCircle = null;
//					army.ellipseTo = null;
//					army.lineTo = null;
//					army.tmpLandSquare = null;
//				}
//				
//				for each(var merchant:Army in Session.currentPlayer.merchants){
//					
//					// on ne passe pas les info graphiques par BlazesDS : inutile et surtout ca casse tout (objets enormes passes en AMF, ce qui casse le transfert)
//					merchant.armyCircle = null;
//					merchant.ellipseTo = null;
//					merchant.lineTo = null;
//					merchant.tmpLandSquare = null;
//				}
//				
//				//------------------------------------------------------------------//
//				
//				FlexGlobals.topLevelApplication.conflictsWindow.conflictsGroup.removeAllElements();
//				Session.currentPlayer.lastTurnPlayed ++;
//				GameManager.getInstance().saveTurn(Session.currentPlayer);
//				Pager.getInstance().goToPage(Home, Home.CURRENT_GAMES, Session.GAMES_PLAYING);
//			}
// 
			//================================================================================//
//			
//			private function calculateLands():void{
//				for each (var player:Player in game.players){
//					var lands:ArrayCollection = new ArrayCollection();
//					for each (var city:City in player.cities){
//						
//						// de 0 a 29
//						var cityLandXmin:int = Math.floor((city.x - city.radius)/Numbers.LAND_WIDTH);	
//						var cityLandXmax:int = Math.floor((city.x + city.radius)/Numbers.LAND_WIDTH);	
//						var cityLandYmin:int = Math.floor((city.y - city.radius)/Numbers.LAND_HEIGHT);	
//						var cityLandYmax:int = Math.floor((city.y + city.radius)/Numbers.LAND_HEIGHT);
//						
//						for(var i:int=cityLandXmin; i <= cityLandXmax; i++){
//							for(var j:int=cityLandYmin; j <= cityLandYmax; j++){
//								var landNumber:int = mapPositioner.width/Numbers.LAND_WIDTH * j + i;
//								lands.addItem(landNumber);
//							}
//						}
//					}
//
//					for each(var landNumberOwnedYet:int in player.lands){
//						var found:Boolean = false;
//						
//						for each(var landNumberFromPreviousCities:int in lands){
//							if(landNumberFromPreviousCities == landNumberOwnedYet){
//								found = true;
//								break;
//							}
//						}
//						
//						if(!found){
//							lands.addItem(landNumberOwnedYet);
//						}
//					}
//					
//					player.lands = lands;
//					if(Session.player.uralysUID == player.uralysUID) // refresh
//						Session.player.lands = player.lands;
//					
//				}
//			}
//			

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:Move id="autoMove"
				target="{mapPositioner}"
				easingFunction="{Quadratic.easeOut}"/>
		
		<mx:Move id="goLeft"
				 xTo="-1500"
				 target="{main}"
				 duration="350"
				 easingFunction="{Quadratic.easeIn}"/>
		<mx:Move id="comeBack"
				 xTo="0"
				 target="{main}"
				 easingFunction="{Quadratic.easeIn}"/>

		<mx:Move id="appearCity"
				 xTo="0"
				 target="{cityGroup}"
				 easingFunction="{Quadratic.easeIn}"/>
		<mx:Move id="hideCity"
				 xTo="1500"
				 target="{cityGroup}"
				 easingFunction="{Quadratic.easeIn}"/>
		

	</fx:Declarations>
	
	<s:Group id="main" width="100%" height="100%">
		
		<s:VGroup horizontalAlign="left" top="70" left="35">
			<s:Label text="{Translations.MY_CITIES.getItemAt(Session.LANGUAGE)}"/>
			<s:Scroller height="200">
				<s:Group>
					<s:List id="citiesList"
							itemRenderer="com.uralys.tribes.renderers.CityListRenderer"
							dataProvider="{Session.player.cities}"
							borderVisible="false"
							width="340"
							contentBackgroundAlpha="0"
							creationComplete="initCitiesList()">
						<s:layout>
							<s:VerticalLayout gap="1" useVirtualLayout="true" />
						</s:layout>
					</s:List>
				</s:Group>
			</s:Scroller>
		</s:VGroup>
		
		<!-- =============================================================================================== -->
		<!-- Units Tab -->

		<s:TabBar id="tabs" dataProvider="{viewstack}" skinClass="spark.skins.spark.TabBarSkin"
				  top="110" right="135"
				  excludeFrom="moveUnit"/>
		
		<mx:ViewStack id="viewstack" width="200" top="140" right="95"
					  excludeFrom="moveUnit">
			
			<s:NavigatorContent label="{Translations.ARMY.getItemAt(Session.LANGUAGE)}">
				<renderers:ArmyRenderer army="{Session.CURRENT_CASE_SELECTED.army}" 
										visible="{Session.CURRENT_CASE_SELECTED != null &amp;&amp; Session.CURRENT_CASE_SELECTED.army !=null &amp;&amp; Session.CURRENT_CASE_SELECTED.army.size > 0}"
										click="onUnitClick(Session.CURRENT_CASE_SELECTED.army)"/>
			</s:NavigatorContent>
			<s:NavigatorContent label="{Translations.MERCHANTS.getItemAt(Session.LANGUAGE)}">
				<renderers:MerchantsRenderer merchant="{Session.CURRENT_CASE_SELECTED.merchants}" 
											 visible="{Session.CURRENT_CASE_SELECTED != null &amp;&amp; Session.CURRENT_CASE_SELECTED.merchants !=null &amp;&amp; Session.CURRENT_CASE_SELECTED.merchants.size > 0}"
											 click="onUnitClick(Session.CURRENT_CASE_SELECTED.merchants)"/>
			</s:NavigatorContent>
		</mx:ViewStack>

		<s:VGroup top="150" right="95"
				  excludeFrom="classic">
			<s:Label text="{Translations.WAY_SELECTION.getItemAt(Session.LANGUAGE)}"/>
			<s:Button label="Done" click="{validateUnitMoves(false)}" visible="{selectedUnit != null}"/>
			<s:Button label="Cancel" click="{validateUnitMoves(true)}" visible="{selectedUnit != null}"/>
		</s:VGroup>
		
		<s:VGroup id="buildCityButton"
				  top="70" right="125"
				  visible="false"
				  includeInLayout="false"
				  excludeFrom="moveUnit">
			<s:Button label="{Translations.BUILD_HERE.getItemAt(Session.LANGUAGE)}" click="buildCity()"/>
		</s:VGroup>
		
		<s:VGroup id="enterCityButton"
				  top="70" right="125"
				  visible="false"
				  includeInLayout="false"
				  excludeFrom="moveUnit">
			<s:Button label="{Translations.ENTER_CITY.getItemAt(Session.LANGUAGE)}" click="enterCity(event)"/>
		</s:VGroup>
		
		<!-- =============================================================================================== -->
		
		<s:Button label="{Translations.CONFLICT.getItemAt(Session.LANGUAGE)}s" click="{FlexGlobals.topLevelApplication.showconflicts.play()}" right="10"/>
		<s:HGroup width="100%" horizontalAlign="center" paddingTop="5">
			<s:Label text="X : {Session.COORDINATE_X}"/>
			<mx:Spacer width="200"/>
			<s:Label text="Y : {Session.COORDINATE_Y}"/>
		</s:HGroup>

		<!-- =============================================================================================== -->
		<!--
		<s:HGroup width="100%" horizontalAlign="center" bottom="35">
			<s:CheckBox id="checkBoxDetails" label="{Translations.DETAILS.getItemAt(Session.LANGUAGE)}" selected="true" skinClass="spark.skins.spark.CheckBoxSkin"/>
			<mx:Spacer width="45"/>			
			<s:CheckBox id="checkBoxImages" label="{Translations.IMAGES.getItemAt(Session.LANGUAGE)}" selected="true" skinClass="spark.skins.spark.CheckBoxSkin"/>
			<mx:Spacer width="45"/>			
			<s:CheckBox id="checkBoxTexts" label="{Translations.TEXTS.getItemAt(Session.LANGUAGE)}" selected="true" skinClass="spark.skins.spark.CheckBoxSkin"/>
		</s:HGroup>
		-->
		<s:HGroup width="200" height="200" horizontalAlign="center"
				  bottom="45"
				  right="150">
			<s:Group width="200" height="200"
					 id="minimap"
					 clipAndEnableScrolling="true"
					 mouseDown="mouseDownMiniMap(event)"
					 mouseMove="mouseMoveMiniMap(event)"
					 mouseOut="mouseUpMiniMap(event)"
					 mouseUp="mouseUpMiniMap(event)">
				<s:Rect left="0" right="0" top="0" bottom="0" radiusX="5" radiusY="5">
					<s:stroke>
						<s:SolidColorStroke color="0x000000" weight="1" scaleMode="normal"/>
					</s:stroke>			
					<s:fill>
						<s:SolidColor color="{0x000000}" alpha="0.8"/>
					</s:fill>
				</s:Rect>
				<s:Rect x="{-mapPositioner.x/15}" y="{-mapPositioner.y/15}" width="33" height="33">
					<s:stroke>
						<s:SolidColorStroke color="0xffffff" weight="1" scaleMode="normal"/>
					</s:stroke>		
					<s:fill>
						<s:SolidColor color="{0xffffff}" alpha="0.2"/>
					</s:fill>			
				</s:Rect>
			</s:Group>
		</s:HGroup>
		<s:Group width="100%">
			<s:HGroup width="100%" horizontalAlign="center" paddingTop="50">
				<s:Group width="{Session.MAP_WIDTH}" height="{Session.MAP_HEIGHT}"
						 id="boardImage"
						 clipAndEnableScrolling="true"	  
						 useHandCursor="true">
					<s:Group id="mapPositioner" 
						  buttonMode="true"
						  width="{Numbers.LAND_WIDTH*400}"
						  height="{Numbers.LAND_HEIGHT*400}"
						  mouseDown="mouseDown(event)"
						  mouseMove="mouseMove(event)"
						  mouseUp="mouseUp(event)"/>
					<s:Group id="highlighters"
							 width="{Numbers.LAND_WIDTH*400}"
							 height="{Numbers.LAND_HEIGHT*400}"
							 x="{mapPositioner.x}"
							 y="{mapPositioner.y}"
							 mouseEnabled="false"
							 mouseChildren="true"
							 mouseEnabledWhereTransparent="false">
						
						<mx:Image id="currentMouseHighLightNormal"
								  source="{ImageContainer.getImage(ImageContainer.HIGHLIGHT_BLEU)}"
								  visible="{!Session.MOVE_A_UNIT}"
								  x="{Session.COORDINATE_X * (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4)}"
								  y="{Session.COORDINATE_Y * (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2)}"
								  mouseEnabled="false"/>

						<mx:Image id="currentMouseHighLight4UnitMoves"
								  source="{ImageContainer.getImage(ImageContainer.HIGHLIGHT_BLANC)}"
								  visible="{Session.MOVE_A_UNIT}"
								  x="{Session.COORDINATE_X * (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4)}"
								  y="{Session.COORDINATE_Y * (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2)}"
								  mouseEnabled="false"/>

						<mx:Image id="currentSelectionHighLight"
								  source="{ImageContainer.getImage(ImageContainer.HIGHLIGHT_BLANC)}"
								  x="{Session.CURRENT_SELECTION_X * (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4)}"
								  y="{Session.CURRENT_SELECTION_Y * (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2)}"
								  mouseEnabled="false"/>
						
					</s:Group>
 				</s:Group>
					
			</s:HGroup>
			<mx:Image source="{ImageContainer.MAP_BORDER_TOP}"
					  x="{boardImage.x-30}"
					  y="{boardImage.y-30}"/>
			<mx:Image source="{ImageContainer.MAP_BORDER_BOTTOM}"
					  x="{boardImage.x-30}"
					  y="{boardImage.y+Session.MAP_HEIGHT}"/>
			<mx:Image source="{ImageContainer.MAP_BORDER_LEFT}"
					  x="{boardImage.x-27}"
					  y="{boardImage.y}"/>
			<mx:Image source="{ImageContainer.MAP_BORDER_RIGHT}"
					  x="{boardImage.x+Session.MAP_WIDTH}"
					  y="{boardImage.y}"/>
		</s:Group>
	</s:Group>
	
	<!-- ====================================================================================== -->
	<!-- city -->
	
	
	<s:VGroup horizontalAlign="center" 
			  paddingTop="50"
			  id="cityGroup" 
			  width="{main.width}" 
			  height="{main.height}"
			  x="1500"
			  includeInLayout="false">
		<s:HGroup>
			<s:Button label="&lt;-- Ok" 
					  click="{selectedCity.unemployed >= 0 ? backToMain() : messageUnemployed()}"
					  enabled="{cityForm.currentState != 'recordingUnit'}"/>
			<mx:Spacer width="450"/>
		</s:HGroup>
		<renderers:CityForms 
				id="cityForm"
			    city="{selectedCity}"/>
		<mx:Spacer height="55"/>
	</s:VGroup>
		
	<!-- ====================================================================================== -->
	
	<mx:Image source="{ImageContainer.MINI_LOGO}" right="70" y="-7"/>
	<renderers:StepProgress top="7" left="20"/>
	<s:HGroup width="100%" height="100%" horizontalAlign="center">
		<s:VGroup height="100%">
			<mx:Spacer height="40%"/>
			<mx:SWFLoader source="{ImageContainer.LOADING}" 
						  visible="{Session.WAIT_FOR_SERVER}"/>
		</s:VGroup>
	</s:HGroup>
	
</s:Group>
