<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:renderers="com.uralys.tribes.renderers.*"
		 width="100%" height="100%"
		 creationComplete="init()" >
	
	<fx:Script>
		<![CDATA[
			import adobe.utils.CustomActions;
			
			import com.uralys.tribes.commons.Numbers;
			import com.uralys.tribes.commons.Session;
			import com.uralys.tribes.commons.Translations;
			import com.uralys.tribes.core.BoardClickListener;
			import com.uralys.tribes.core.BoardDrawer;
			import com.uralys.tribes.core.Pager;
			import com.uralys.tribes.entities.Unit;
			import com.uralys.tribes.entities.City;
			import com.uralys.tribes.entities.Conflict;
			import com.uralys.tribes.entities.Equipment;
			import com.uralys.tribes.entities.Game;
			import com.uralys.tribes.entities.Move;
			import com.uralys.tribes.entities.Player;
			import com.uralys.tribes.entities.Smith;
			import com.uralys.tribes.managers.GameManager;
			import com.uralys.tribes.windows.ReportsWindow;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.core.FlexGlobals;
			import mx.effects.easing.Quadratic;
			import mx.events.ItemClickEvent;
			import mx.graphics.GradientEntry;
			import mx.graphics.GradientStroke;
			import mx.graphics.LinearGradientStroke;
			import mx.graphics.RadialGradientStroke;
			import mx.graphics.SolidColor;
			import mx.graphics.SolidColorStroke;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			
			import spark.components.supportClasses.ItemRenderer;
			import spark.primitives.Ellipse;
			import spark.primitives.Line;


			//---------------------------------------------------------------------------------------//
			
			[Bindable] private var selectedCity:City;
			[Bindable] private var selectedUnit:Unit;
			
			private var moveGradient:Array;
			private var radialGrad:RadialGradientStroke;

			//----------------------------------------------------------//

			protected function init():void{

				timer = new Timer(41,1);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, moveStoppedDuringDragging);

				limitLeft = Session.MAP_WIDTH - mapPositioner.width;
				limitUp = Session.MAP_HEIGHT - mapPositioner.height;
				
				initBoard();
				
				moveGradient = [];
				moveGradient.push(new GradientEntry(0xFFFFFF));
				moveGradient.push(new GradientEntry(0x00cccc));
				moveGradient.push(new GradientEntry(0x000000));
				radialGrad = new RadialGradientStroke();
				radialGrad.entries = moveGradient;
				radialGrad.interpolationMethod

			}
			
			// click sur une ville dans la barre laterale
			protected function onCityClick(event:ItemClickEvent):void{
				mapPositioner.x = 250 - event.currentTarget.selectedItem.x;
				mapPositioner.y = 250 - event.currentTarget.selectedItem.y;
			}
			
			// click sur une armee dans la barre laterale
			// ou dans la liste sous 'enter city'
			protected function onArmyClick(event:ItemClickEvent):void{
				mapPositioner.x = 250 - event.currentTarget.selectedItem.x;
				mapPositioner.y = 250 - event.currentTarget.selectedItem.y;
				
				selectionChoiceGroup.includeInLayout = false;
				selectionChoiceGroup.visible = false;
				merchantChoiceGroup.includeInLayout = false;
				merchantChoiceGroup.visible = false;
				
				selectedUnit = event.currentTarget.selectedItem;
				BoardDrawer.getInstance().drawArmySelection(event.currentTarget.selectedItem);
			}
			

			//-----------------------------------------------------------//
			
			// set params est appelee avant creationComplete (init())
			// ici args contient 1 valeur.
			// args[0] game
			public function set params(args:Array):void{

				this.selectedCity = Session.player.cities.getItemAt(0) as City;

				for each(var unit:Unit in Session.player.units){
					if(unit.type == 2)
						continue;
					
					for each(var city:City in Session.player.cities){
						if(unit.currentCase.x == city.x && unit.currentCase.y == city.y){
							city.armies.addItem(unit);
							city.unitsToFeed += unit.size;
							break;
						}
					}
					
					for each(var equipment:Equipment in unit.equipments){
						switch(equipment.item.name){
							case "bow" :
								unit.bows += equipment.size;
								break;
							case "sword" :
								unit.swords += equipment.size;
								break;
							case "armor" :
								unit.armors += equipment.size;
								break;
						}
					}
				}

				for each(var merchant:Unit in Session.player.units){
					
					if(unit.type == 1)
						continue;

					for each(var city:City in Session.player.cities){
						if(merchant.x == city.x && merchant.y == city.y){
							city.merchants.addItem(merchant);
							city.unitsToFeed += merchant.size;
							break;
						}
					}
				}

			}
			
			//-----------------------------------------------------------//
			
			protected function initArmiesList():void{
				armiesList.addEventListener(ItemClickEvent.ITEM_CLICK, onArmyClick);
			}
			
			protected function initMerchantsList():void{
				merchantsList.addEventListener(ItemClickEvent.ITEM_CLICK, onArmyClick);
			}
			
			protected function initCitiesList():void{
				citiesList.addEventListener(ItemClickEvent.ITEM_CLICK, onCityClick);
			}
			
			protected function initSelectionChoiceArmyList():void{
				selectionChoiceArmyList.addEventListener(ItemClickEvent.ITEM_CLICK, onArmyClick);
			}
			
			protected function initSelectionChoiceMerchantList():void{
				selectionChoiceMerchantList.addEventListener(ItemClickEvent.ITEM_CLICK, onArmyClick);
			}

			
			// ------------------------------------------------------------------------// 
			// 		map scrolling
			
			private var isDragging:Boolean = false;
			private var draggingImageXFrom:int;
			private var draggingImageYFrom:int;
			private var draggingImageXTo:int;
			private var draggingImageYTo:int;
			private var draggingStageXFrom:int;
			private var draggingStageYFrom:int;
			private var draggingStageXTo:int;
			private var draggingStageYTo:int;
			private var limitLeft:int;
			private var limitUp:int;
			
			[Bindable] private var coordinateX:int;
			[Bindable] private var coordinateY:int;
			
			
			protected function mouseDown(event:MouseEvent):void{
				
				isDragging = true;
				draggingImageXFrom = event.localX;
				draggingImageYFrom = event.localY;
				draggingStageXFrom = event.stageX;
				draggingStageYFrom = event.stageY;
				
				autoMoveNotNeeded = true;
				autoMove.stop();
				
				selectionChoiceGroup.visible = false;
				selectionChoiceGroup.includeInLayout = false;
				merchantChoiceGroup.visible = false;
				merchantChoiceGroup.includeInLayout = false;
				
			}
			
			private var timer:Timer;
			private var autoMoveNotNeeded:Boolean = true;
			protected function mouseMove(event:MouseEvent):void{
				
				coordinateX = event.localX;
				coordinateY = event.localY;
				
				if(Session.CURRENT_SELECTION_IS_ARMY){
					Mouse.hide();
					
					if(!selectedUnit.ellipseToIsDrawn){
						selectedUnit.ellipseTo = new Ellipse();
						selectedUnit.ellipseTo.width = selectedUnit.radius*2;
						selectedUnit.ellipseTo.height = selectedUnit.radius*2;
						selectedUnit.ellipseTo.fill = new SolidColor(selectedUnit.type == 1 ? Numbers.WHITE : Numbers.YELLOW, 0.5);
						
						boardEntities.addElement(selectedUnit.ellipseTo);
						selectedUnit.ellipseToIsDrawn = true;
					}
					
					if(!selectedUnit.lineToIsDrawn){
						selectedUnit.lineTo = new Line();
						selectedUnit.lineTo.xFrom = selectedUnit.x;
						selectedUnit.lineTo.yFrom = selectedUnit.y;
						selectedUnit.lineTo.stroke = radialGrad;
						
						boardEntities.addElement(selectedUnit.lineTo);
						selectedUnit.lineToIsDrawn = true;
					}
					
					selectedUnit.ellipseTo.x = coordinateX - selectedUnit.ellipseTo.width/2;
					selectedUnit.ellipseTo.y = coordinateY - selectedUnit.ellipseTo.height/2;
					selectedUnit.lineTo.xTo = coordinateX;
					selectedUnit.lineTo.yTo = coordinateY;
					
					var hyp:Number = Math.sqrt(Math.pow(selectedUnit.lineTo.xFrom - coordinateX,2) + Math.pow(selectedUnit.lineTo.yFrom - coordinateY,2));
					
					if(hyp > selectedUnit.speed){
						Mouse.show();
						selectedUnit.lineTo.xTo = selectedUnit.lineTo.xFrom - (selectedUnit.speed * (selectedUnit.lineTo.xFrom - coordinateX)/hyp);
						selectedUnit.lineTo.yTo = selectedUnit.lineTo.yFrom - (selectedUnit.speed * (selectedUnit.lineTo.yFrom - coordinateY)/hyp);
						selectedUnit.ellipseTo.x = selectedUnit.lineTo.xTo - selectedUnit.ellipseTo.width/2;
						selectedUnit.ellipseTo.y = selectedUnit.lineTo.yTo - selectedUnit.ellipseTo.height/2;
					}
					
					BoardDrawer.getInstance().testLand(selectedUnit);
					
				}
				else if(isDragging){
					
					timer.stop();
					timer.reset();
					timer.start();
					autoMoveNotNeeded = false;
					// on decale l'image du nombre de pixels du dernier mouvement
					// donc elle suit bien la souris et event.localXY a bien lieu au meme endroit sur l'image apres chaque mouseMove
					mapPositioner.x += (event.localX - draggingImageXFrom);
					mapPositioner.y += (event.localY - draggingImageYFrom);
				}
			}
			
			protected function mouseUp(event:MouseEvent):void{
				
				isDragging = false;
				Mouse.show();
				
				if(autoMoveNotNeeded){
					if(Session.CURRENT_SELECTION_IS_ARMY){
						BoardDrawer.getInstance().removeArmySelection();
						selectedUnit.moves = new ArrayCollection();
						selectedUnit.moves.addItem(new com.uralys.tribes.entities.Move());
						
						var clickX:int = event.localX;
						var clickY:int = event.localY;
						var cityEntered:City = null;
						
//						for each(var player:Player in game.players){
//							for each(var city:City in player.cities){
//								if(selectedUnit.ellipseTo != null && Math.sqrt(Math.pow(selectedUnit.ellipseTo.x - city.x,2) + Math.pow(selectedUnit.ellipseTo.y - city.y,2)) <= city.radius) {
//									cityEntered = city;
//									break;
//								}
//							}
//							
//							if(cityEntered)
//								break;
//						}
						
						selectedUnit.moves.getItemAt(0).xFrom = selectedUnit.x;
						selectedUnit.moves.getItemAt(0).yFrom = selectedUnit.y;
						if(cityEntered){
							selectedUnit.moves.getItemAt(0).xTo = cityEntered.x;
							selectedUnit.moves.getItemAt(0).yTo = cityEntered.y;
							selectedUnit.lineTo.xTo = cityEntered.x;
							selectedUnit.lineTo.yTo = cityEntered.y;
							selectedUnit.ellipseTo.x = cityEntered.x - selectedUnit.ellipseTo.width/2;
							selectedUnit.ellipseTo.y = cityEntered.y - selectedUnit.ellipseTo.height/2;
						}
						else{
							if(selectedUnit.ellipseTo != null){
								selectedUnit.moves.getItemAt(0).xTo = selectedUnit.lineTo.xTo;
								selectedUnit.moves.getItemAt(0).yTo = selectedUnit.lineTo.yTo;
							}
						}
					}
					else
						BoardClickListener.getInstance().clickOnBoard(event);
					
					return;
				}
				
				//--------------------------//
				// stop dragging : automove
				
				
				draggingStageXTo = event.stageX;
				draggingStageYTo = event.stageY;
				
				autoMove.duration = 6*(Math.abs(draggingStageXTo - draggingStageXFrom) + Math.abs(draggingStageYTo - draggingStageYFrom));
				autoMove.xTo = mapPositioner.x + (draggingStageXTo - draggingStageXFrom)*3;
				autoMove.yTo = mapPositioner.y + (draggingStageYTo - draggingStageYFrom)*3;
				
				if(autoMove.xTo > 0)
					autoMove.xTo = 0;
				if(autoMove.yTo > 0)
					autoMove.yTo = 0;
				if(autoMove.xTo < limitLeft)
					autoMove.xTo = limitLeft;
				if(autoMove.yTo < limitUp)
					autoMove.yTo = limitUp;
				
				autoMove.play();
			}
			
			private function moveStoppedDuringDragging(event:TimerEvent):void{
				autoMoveNotNeeded = true;
			}
			
			// ------------------------------------------------------------------------// 
			// 	minimap scrolling
			
			protected function mouseUpMiniMap(event:MouseEvent):void{
				isDragging = false;
			}

			protected function mouseDownMiniMap(event:MouseEvent):void{
				mapPositioner.x = 250 - event.localX*15;
				mapPositioner.y = 250 - event.localY*15;
				
				isDragging = true;
				
				autoMoveNotNeeded = true;
				autoMove.stop();
			}

			protected function mouseMoveMiniMap(event:MouseEvent):void{
				if(isDragging){
					mapPositioner.x = 250 - event.localX*15;
					mapPositioner.y = 250 - event.localY*15;
				}
			}
				
			//==============================================================================================================//
			// 	Game management
			
			private function initBoard():void{
				
				//------------------------------------------------------------//

				BoardClickListener.getInstance().setBoard(this);

				BoardDrawer.getInstance().setBoard(this);
				BoardDrawer.getInstance().redrawAllEntities();

				//------------------------------------------------------------//
			
				try{
					FlexGlobals.topLevelApplication.createConflicts();	
				}
				catch(error:Error){}

				//------------------------------------------------------------//
				
				if(selectedCity != null){
					mapPositioner.x = 250 - selectedCity.x;
					mapPositioner.y = 250 - selectedCity.y;
				}
				else{
					FlexGlobals.topLevelApplication.message('GAME OVER', 7);
				}
			}
	
			
			//----------------------------------------------------------------------------------------//
			
			public function clickOnCity(city:City):void{
				selectedCity = city;
				goLeft.play();
				appearCity.play();
			}

			// idem on armyClick, mais click sur larmee elle meme (depuis BoardClickListener)
			public function clickOnArmy(army:Unit):void{
				
				selectionChoiceGroup.includeInLayout = false;
				selectionChoiceGroup.visible = false;
				
				selectedUnit = army;
				BoardDrawer.getInstance().drawArmySelection(army);
			}
			
			public function appearMerchantChoice(merchant:Unit):void{
				clickOnArmy(merchant);
				
				merchantChoiceGroup.x = mapPositioner.x + merchant.x+7;
				merchantChoiceGroup.y = mapPositioner.y + merchant.y+7;
				
				merchantChoiceGroup.includeInLayout = true;
				merchantChoiceGroup.visible = true;
			}

			public function appearSelectionChoice(city:City):void{
				selectedCity = city;
				
				selectionChoiceGroup.x = mapPositioner.x + city.x+20;
				selectionChoiceGroup.y = mapPositioner.y + city.y+20;
				
				selectionChoiceGroup.includeInLayout = true;
				selectionChoiceGroup.visible = true;
			}
			
			private function enterCity(event:MouseEvent):void{
				goLeft.play();
				appearCity.play();
			}
			
			private function buildCity():void{
				
				var city:City = new City();
				city.cityUID = "new";
				city.name = "Ville en construction";
				city.gold = selectedUnit.gold;
				city.wheat = selectedUnit.wheat;
				city.wood = selectedUnit.wood - (Numbers.CITY_WOOD_BASE_PRICE + selectedUnit.size * 10);
				city.iron = selectedUnit.iron - (Numbers.CITY_IRON_BASE_PRICE + selectedUnit.size * 10);
				city.population = selectedUnit.size;
				
				city.x = selectedUnit.x;
				city.y = selectedUnit.y;
				
				Session.player.units.removeItemAt(Session.player.units.getItemIndex(selectedUnit));
				BoardDrawer.getInstance().removeArmyFromBoard(selectedUnit);
				BoardDrawer.getInstance().drawCity(city, false);
				
				Session.player.cities.addItem(city);
				
				merchantChoiceGroup.visible = false;
				merchantChoiceGroup.includeInLayout = false;
			}

			//-----------------------------------------------------------//

			private function messageUnemployed():void{
				FlexGlobals.topLevelApplication.message("Vous utilisez plus de travailleurs que vous n'avez de population !", 5);
			}
			
			private function backToMain():void{
				hideCity.play();
				
				comeBack.play();
			}
//			
//			private function saveTurn():void{
//				
//				Session.TURN_SAVING_DONE = false;
//				
//				//------------------------------------------------------------------//
//
//				for each(var city:City in Session.currentPlayer.cities){
//					
//					city.wheat += city.wheatEarned - city.wheatSpent;
//					city.wood += city.woodEarned - city.woodSpent;
//					city.iron += city.ironEarned - city.ironSpent;
//					city.population += city.armyReleased - city.armyRaised;
//					
//					for each(var equipment:Equipment in city.equipmentStock){
//						switch(equipment.item.name){
//							case "bow" :
//								equipment.size = city.bowStock
//												+ city.bowsRestored
//												- city.bowsEquiped
//												+ city.bowWorkers * equipment.item.peopleRequired;
//								
//								break;
//							case "sword" :
//								equipment.size = city.swordStock
//												+ city.swordsRestored
//												- city.swordsEquiped
//												+ city.swordWorkers * equipment.item.peopleRequired;
//								break;
//							case "armor" :
//								equipment.size = city.armorStock
//											+ city.armorsRestored
//											- city.armorsEquiped
//											+ city.armorWorkers * equipment.item.peopleRequired;
//								break;
//						}
//					}
//
//					for each(var smith:Smith in city.smiths){
//						switch(smith.item.name){
//							case "bow" :
//								smith.people = city.bowWorkers;
//								break;
//							case "sword" :
//								smith.people = city.swordWorkers;
//								break;
//							case "armor" :
//								smith.people = city.armorWorkers;
//								break;
//						}
//					}
//				}
//				
//				for each(var army:Army in Session.currentPlayer.armies){
//					if(army.armyUID == "new"){
//						var bows:Equipment = new Equipment();
//						var swords:Equipment = new Equipment();
//						var armors:Equipment = new Equipment();
//						
//						bows.size = army.bows;
//						swords.size = army.swords;
//						armors.size = army.armors;
//						
//						for each(var equipment:Equipment in city.equipmentStock){
//							switch(equipment.item.name){
//								case "bow" :
//									bows.item = equipment.item;
//									break;
//								case "sword" :
//									swords.item = equipment.item;
//									break;
//								case "armor" :
//									armors.item = equipment.item;
//									break;
//							}
//						}
//						
//						army.equipments.addItem(bows);
//						army.equipments.addItem(swords);
//						army.equipments.addItem(armors);
//					}
//					else{
//						for each(var equipment:Equipment in army.equipments){
//							switch(equipment.item.name){
//								case "bow" :
//									equipment.size = army.bows;
//									break;
//								case "sword" :
//									equipment.size = army.swords;
//									break;
//								case "armor" :
//									equipment.size = army.armors;
//									break;
//							}
//						}
//					}
//					
//					// on ne passe pas les info graphiques par BlazesDS : inutile et surtout ca casse tout (objets enormes passes en AMF, ce qui casse le transfert)
//					army.armyCircle = null;
//					army.ellipseTo = null;
//					army.lineTo = null;
//					army.tmpLandSquare = null;
//				}
//				
//				for each(var merchant:Army in Session.currentPlayer.merchants){
//					
//					// on ne passe pas les info graphiques par BlazesDS : inutile et surtout ca casse tout (objets enormes passes en AMF, ce qui casse le transfert)
//					merchant.armyCircle = null;
//					merchant.ellipseTo = null;
//					merchant.lineTo = null;
//					merchant.tmpLandSquare = null;
//				}
//				
//				//------------------------------------------------------------------//
//				
//				FlexGlobals.topLevelApplication.conflictsWindow.conflictsGroup.removeAllElements();
//				Session.currentPlayer.lastTurnPlayed ++;
//				GameManager.getInstance().saveTurn(Session.currentPlayer);
//				Pager.getInstance().goToPage(Home, Home.CURRENT_GAMES, Session.GAMES_PLAYING);
//			}
// 
			//================================================================================//
//			
//			private function calculateLands():void{
//				for each (var player:Player in game.players){
//					var lands:ArrayCollection = new ArrayCollection();
//					for each (var city:City in player.cities){
//						
//						// de 0 a 29
//						var cityLandXmin:int = Math.floor((city.x - city.radius)/Numbers.LAND_WIDTH);	
//						var cityLandXmax:int = Math.floor((city.x + city.radius)/Numbers.LAND_WIDTH);	
//						var cityLandYmin:int = Math.floor((city.y - city.radius)/Numbers.LAND_HEIGHT);	
//						var cityLandYmax:int = Math.floor((city.y + city.radius)/Numbers.LAND_HEIGHT);
//						
//						for(var i:int=cityLandXmin; i <= cityLandXmax; i++){
//							for(var j:int=cityLandYmin; j <= cityLandYmax; j++){
//								var landNumber:int = mapPositioner.width/Numbers.LAND_WIDTH * j + i;
//								lands.addItem(landNumber);
//							}
//						}
//					}
//
//					for each(var landNumberOwnedYet:int in player.lands){
//						var found:Boolean = false;
//						
//						for each(var landNumberFromPreviousCities:int in lands){
//							if(landNumberFromPreviousCities == landNumberOwnedYet){
//								found = true;
//								break;
//							}
//						}
//						
//						if(!found){
//							lands.addItem(landNumberOwnedYet);
//						}
//					}
//					
//					player.lands = lands;
//					if(Session.player.uralysUID == player.uralysUID) // refresh
//						Session.player.lands = player.lands;
//					
//				}
//			}
//			
			private var storeLogoInitX:int;			


		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:Move id="autoMove"
				target="{mapPositioner}"
				easingFunction="{Quadratic.easeOut}"/>
		
		<mx:Move id="goLeft"
				 xTo="-1500"
				 target="{main}"
				 duration="350"
				 easingFunction="{Quadratic.easeIn}"/>
		<mx:Move id="comeBack"
				 xTo="0"
				 target="{main}"
				 easingFunction="{Quadratic.easeIn}"/>

		<mx:Move id="appearCity"
				 xTo="0"
				 target="{cityGroup}"
				 easingFunction="{Quadratic.easeIn}"/>
		<mx:Move id="hideCity"
				 xTo="1500"
				 target="{cityGroup}"
				 easingFunction="{Quadratic.easeIn}"/>
		

	</fx:Declarations>
	
	<s:Group id="main" width="100%" height="100%">
		
		<s:VGroup horizontalAlign="left" top="70" left="35">
			<s:Label text="{Translations.MY_CITIES.getItemAt(Session.LANGUAGE)}"/>
			<s:Scroller height="200">
				<s:Group>
					<s:List id="citiesList"
							itemRenderer="com.uralys.tribes.renderers.CityListRenderer"
							dataProvider="{Session.player.cities}"
							borderVisible="false"
							width="340"
							contentBackgroundAlpha="0"
							creationComplete="initCitiesList()">
						<s:layout>
							<s:VerticalLayout gap="1" useVirtualLayout="true" />
						</s:layout>
					</s:List>
				</s:Group>
			</s:Scroller>
		</s:VGroup>
		
		<!-- =============================================================================================== -->
		<!-- Units Tab -->

		<s:TabBar id="tabs" dataProvider="{viewstack}" skinClass="spark.skins.spark.TabBarSkin"
				  top="70" right="135"/>
		
		<mx:ViewStack id="viewstack" width="200" top="100" right="95">
			
			<s:NavigatorContent label="{Translations.ARMIES.getItemAt(Session.LANGUAGE)}">
				<s:HGroup width="100%" horizontalAlign="center">
					<s:VGroup horizontalAlign="right">
						<s:Scroller height="200" width="260">
							<s:Group>
								<s:List id="armiesList"
										itemRenderer="com.uralys.tribes.renderers.ArmyListRenderer"
										dataProvider="{Session.player.units}"
										borderVisible="false"
										width="240"
										contentBackgroundAlpha="0"
										creationComplete="initArmiesList()">
									<s:layout>
										<s:VerticalLayout gap="1" useVirtualLayout="true" />
									</s:layout>
								</s:List>
							</s:Group>
						</s:Scroller>
					</s:VGroup>
				</s:HGroup>
			</s:NavigatorContent>
			<s:NavigatorContent label="{Translations.MERCHANTS.getItemAt(Session.LANGUAGE)}">
				<s:VGroup horizontalAlign="right">
					<s:Scroller height="200" width="260">
						<s:Group>
							<s:List id="merchantsList"
									itemRenderer="com.uralys.tribes.renderers.MerchantListRenderer"
									dataProvider="{Session.player.units}"
									borderVisible="false"
									width="240"
									contentBackgroundAlpha="0"
									creationComplete="initMerchantsList()">
								<s:layout>
									<s:VerticalLayout gap="1" useVirtualLayout="true" />
								</s:layout>
							</s:List>
						</s:Group>
					</s:Scroller>
				</s:VGroup>
			</s:NavigatorContent>
		</mx:ViewStack>

		<!-- =============================================================================================== -->
		
		<s:Button label="{Translations.CONFLICT.getItemAt(Session.LANGUAGE)}s" click="{FlexGlobals.topLevelApplication.showconflicts.play()}" right="10"/>
		<s:HGroup width="100%" horizontalAlign="center" paddingTop="5">
			<s:Label text="X : {coordinateX}"/>
			<mx:Spacer width="200"/>
			<s:Label text="Y : {coordinateY}"/>
		</s:HGroup>
		<s:HGroup width="100%" horizontalAlign="center" bottom="35">
			<s:CheckBox id="checkBoxDetails" label="{Translations.DETAILS.getItemAt(Session.LANGUAGE)}" selected="true" skinClass="spark.skins.spark.CheckBoxSkin"/>
			<mx:Spacer width="45"/>			
			<s:CheckBox id="checkBoxImages" label="{Translations.IMAGES.getItemAt(Session.LANGUAGE)}" selected="true" skinClass="spark.skins.spark.CheckBoxSkin"/>
			<mx:Spacer width="45"/>			
			<s:CheckBox id="checkBoxTexts" label="{Translations.TEXTS.getItemAt(Session.LANGUAGE)}" selected="true" skinClass="spark.skins.spark.CheckBoxSkin"/>
		</s:HGroup>
		<s:HGroup width="200" height="200" horizontalAlign="center"
				  bottom="45"
				  right="150">
			<s:Group width="200" height="200"
					 id="minimap"
					 clipAndEnableScrolling="true"
					 mouseDown="mouseDownMiniMap(event)"
					 mouseMove="mouseMoveMiniMap(event)"
					 mouseOut="mouseUpMiniMap(event)"
					 mouseUp="mouseUpMiniMap(event)">
				<s:Rect left="0" right="0" top="0" bottom="0" radiusX="5" radiusY="5">
					<s:stroke>
						<s:SolidColorStroke color="0x000000" weight="1" scaleMode="normal"/>
					</s:stroke>			
					<s:fill>
						<s:SolidColor color="{0x000000}" alpha="0.8"/>
					</s:fill>
				</s:Rect>
				<s:Rect x="{-mapPositioner.x/15}" y="{-mapPositioner.y/15}" width="33" height="33">
					<s:stroke>
						<s:SolidColorStroke color="0xffffff" weight="1" scaleMode="normal"/>
					</s:stroke>		
					<s:fill>
						<s:SolidColor color="{0xffffff}" alpha="0.2"/>
					</s:fill>			
				</s:Rect>
			</s:Group>
		</s:HGroup>
		<s:Group width="100%">
			<s:HGroup width="100%" horizontalAlign="center" paddingTop="50">
				<s:Group width="{Session.MAP_WIDTH}" height="{Session.MAP_HEIGHT}"
						 id="boardImage"
						 clipAndEnableScrolling="true"		  
						 useHandCursor="true">
					<s:Group id="mapPositioner" 
						  buttonMode="true"
						  width="40000"
						  height="40000"
						  mouseChildren="false"
						  mouseDown="mouseDown(event)"
						  mouseMove="mouseMove(event)"
						  mouseOut="if(isDragging)mouseUp(event)"
						  mouseUp="mouseUp(event)"/>
					
				</s:Group>
			</s:HGroup>
			<s:HGroup width="100%" horizontalAlign="center" paddingTop="50"
					  mouseEnabled="false"
					  mouseEnabledWhereTransparent="false">
				<s:Group width="500" height="500"
						 clipAndEnableScrolling="true"
						 mouseChildren="false"
						 mouseEnabled="false"
						 mouseEnabledWhereTransparent="false">
						<s:Group id="mapTiles"
								 x="{mapPositioner.x}"
								 y="{mapPositioner.y}"/>
				</s:Group>
			</s:HGroup>
			<s:HGroup width="100%" horizontalAlign="center" paddingTop="50"
					  mouseEnabled="false"
					  mouseEnabledWhereTransparent="false"
					  visible="{checkBoxDetails.selected}">
				<s:Group width="500" height="500"
						 clipAndEnableScrolling="true"
						 mouseChildren="false"
						 mouseEnabled="false"
						 mouseEnabledWhereTransparent="false">
						<s:Group id="boardEntities"
								 x="{mapPositioner.x}"
								 y="{mapPositioner.y}"/>
				</s:Group>
			</s:HGroup>
			<s:HGroup width="100%" horizontalAlign="center" paddingTop="50"
					  mouseEnabled="false"
					  mouseEnabledWhereTransparent="false"
					  visible="{checkBoxImages.selected}">
				<s:Group width="500" height="500"
						 clipAndEnableScrolling="true"
						 mouseChildren="false"
						 mouseEnabled="false"
						 mouseEnabledWhereTransparent="false">
					<s:Group id="boardImages"
							 x="{mapPositioner.x}"
							 y="{mapPositioner.y}"/>
				</s:Group>
			</s:HGroup>
			<s:HGroup width="100%" horizontalAlign="center" paddingTop="50"
					  mouseEnabled="false"
					  mouseEnabledWhereTransparent="false">
				<s:Group width="500" height="500"
						 clipAndEnableScrolling="true"
						 mouseChildren="false"
						 mouseEnabled="false"
						 mouseEnabledWhereTransparent="false"
						 visible="{checkBoxTexts.selected}">
					<s:Group id="boardTexts"
							 x="{mapPositioner.x}"
							 y="{mapPositioner.y}"/>
				</s:Group>
			</s:HGroup>
			
			<!-- =============================================================================================== -->
			<!-- on board menus-->
			
			<s:HGroup width="100%" horizontalAlign="center" paddingTop="50"
					  mouseEnabled="false"
					  mouseEnabledWhereTransparent="false">
				<s:Group width="500" height="500"
						 clipAndEnableScrolling="true">
					
					<s:VGroup id="merchantChoiceGroup" 
							  includeInLayout="false">
						<s:Button label="{Translations.BUILD_HERE.getItemAt(Session.LANGUAGE)}" click="buildCity()"/>
					</s:VGroup>
						
					<s:VGroup id="selectionChoiceGroup" 
							  includeInLayout="false">
						<s:Button label="{Translations.ENTER_CITY.getItemAt(Session.LANGUAGE)}" click="enterCity(event)"/>
						
						<!-- =============================================================================================== -->
						<!-- Units Tab -->
						
						<s:TabBar id="tabsSelectionGroup" dataProvider="{viewstackSelectionGroup}" skinClass="spark.skins.spark.TabBarSkin"
								  top="70" right="35"/>
						
						<mx:ViewStack id="viewstackSelectionGroup" width="170" top="100" right="35">
							
							<s:NavigatorContent label="{Translations.ARMIES.getItemAt(Session.LANGUAGE)}">
								<s:VGroup horizontalAlign="right">
									<s:Scroller maxHeight="200">
										<s:Group>
											<s:List id="selectionChoiceArmyList"
													itemRenderer="com.uralys.tribes.renderers.ArmyListRenderer"
													dataProvider="{selectedCity.armies}"
													borderVisible="false"
													width="275"
													contentBackgroundAlpha="0"
													creationComplete="initSelectionChoiceArmyList()">
												<s:layout>
													<s:VerticalLayout gap="1" useVirtualLayout="true" />
												</s:layout>
											</s:List>
										</s:Group>
									</s:Scroller>
								</s:VGroup>
							</s:NavigatorContent>
							<s:NavigatorContent label="{Translations.MERCHANTS.getItemAt(Session.LANGUAGE)}">
								<s:VGroup horizontalAlign="right">
									<s:Scroller maxHeight="200">
										<s:Group>
											<s:List id="selectionChoiceMerchantList"
													itemRenderer="com.uralys.tribes.renderers.MerchantListRenderer"
													dataProvider="{selectedCity.merchants}"
													borderVisible="false"
													width="275"
													contentBackgroundAlpha="0"
													creationComplete="initSelectionChoiceMerchantList()">
												<s:layout>
													<s:VerticalLayout gap="1" useVirtualLayout="true" />
												</s:layout>
											</s:List>
										</s:Group>
									</s:Scroller>
								</s:VGroup>
							</s:NavigatorContent>
						</mx:ViewStack>
						
						<!-- =============================================================================================== -->
						
					</s:VGroup>
				</s:Group>
			</s:HGroup>
		</s:Group>
	</s:Group>
	
	<!-- ====================================================================================== -->
	<!-- city -->
	
	
	<s:VGroup horizontalAlign="center" 
			  paddingTop="50"
			  id="cityGroup" 
			  width="{main.width}" 
			  height="{main.height}"
			  x="1500"
			  includeInLayout="false">
		<s:HGroup>
			<s:Button label="&lt;-- Ok" 
					  click="{selectedCity.unemployed >= 0 ? backToMain() : messageUnemployed()}"/>
			<mx:Spacer width="450"/>
		</s:HGroup>
		<renderers:CityForm 
				id="cityForm"
			    city="{selectedCity}"/>
		<mx:Spacer height="55"/>
	</s:VGroup>
		
	<!-- ====================================================================================== -->
	
	<mx:Image source="{ImageContainer.LOGO}" height="80" width="300" right="70" y="-9"/>
	
</s:Group>
