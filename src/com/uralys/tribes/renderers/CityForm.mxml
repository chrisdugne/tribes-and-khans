<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:forms="com.uralys.renderers.forms.*" 
		 xmlns:renderers="com.uralys.tribes.renderers.*">
	
		<fx:Script>
			<![CDATA[
				//----------------------------------------------------------//

				import com.uralys.tribes.commons.Numbers;
				import com.uralys.tribes.commons.Session;
				import com.uralys.tribes.commons.Translations;
				import com.uralys.tribes.core.BoardDrawer;
				import com.uralys.tribes.entities.City;
				import com.uralys.tribes.entities.Equipment;
				import com.uralys.tribes.entities.Item;
				import com.uralys.tribes.entities.Move;
				import com.uralys.tribes.entities.Smith;
				import com.uralys.tribes.entities.Unit;
				import com.uralys.tribes.managers.GameManager;
				import com.uralys.tribes.skins.WorkersProgressBarSkin;
				import com.uralys.tribes.skins.WorkersProgressTrackSkin;
				import com.uralys.tribes.tooltips.ForgeToolTip;
				import com.uralys.tribes.tooltips.MerchantToolTip;
				import com.uralys.utils.Utils;
				
				import mx.collections.ArrayCollection;
				import mx.core.FlexGlobals;
				import mx.events.ItemClickEvent;
				import mx.events.ToolTipEvent;
				import mx.messaging.messages.ISmallMessage;
				import mx.utils.ObjectUtil;
				
				//----------------------------------------------------------//
				
				[Bindable]
				public var city:City;

				//----------------------------------------------------------//

				protected function wheatWorkersCheck(event:Event):void	
				{
					var peopleAdded:int = wheatWorkersSlider.value - city.peopleCreatingWheat;
					
					if(city.unemployed < peopleAdded)
						wheatWorkersSlider.value = city.peopleCreatingWheat + city.unemployed;
					
					city.peopleCreatingWheat = wheatWorkersSlider.value;
					
					city.wheatEarned = Numbers.WHEAT_EARNING_COEFF * city.peopleCreatingWheat;
					
					updateWorkersProgressBar();
				}

				protected function pickUpPeopleInPeopleCreatingWheat(peopleToPickUp:int):void{
					var peopleRequired:int = peopleToPickUp - city.unemployed;
					wheatWorkersSlider.value = city.peopleCreatingWheat - peopleRequired;
					wheatWorkersCheck(null);
				}
				

				//-------------------------------------------------------------------------//

				protected function woodWorkersCheck(event:Event):void	{
					
					var peopleAdded:int = woodWorkersSlider.value - city.peopleCreatingWood;
					
					if(city.unemployed < peopleAdded)
						woodWorkersSlider.value = city.peopleCreatingWood + city.unemployed;
					
					city.peopleCreatingWood = woodWorkersSlider.value;
					
					city.woodEarned = Numbers.WOOD_EARNING_COEFF * city.peopleCreatingWood;
					
					updateWorkersProgressBar();
				}
				
				//-------------------------------------------------------------------------//
				
				protected function ironWorkersCheck(event:Event):void	{
				
					var peopleAdded:int = ironWorkersSlider.value - city.peopleCreatingIron;
					
					if(city.unemployed < peopleAdded)
						ironWorkersSlider.value = city.peopleCreatingIron + city.unemployed;
					
					city.peopleCreatingIron = ironWorkersSlider.value;
					
					city.ironEarned = Numbers.IRON_EARNING_COEFF * city.peopleCreatingIron;
					
					updateWorkersProgressBar();
				}

				//-------------------------------------------------------------------------//

				public function updateWorkersProgressBar():void
				{
					workersProgressBar.setProgress(city.peopleCreatingWheat 
												 + city.peopleCreatingWood
												 + city.peopleCreatingIron
												 + city.bowWorkers
												 + city.swordWorkers
												 + city.armorWorkers
												 + city.armyRaised
												 - city.armyReleased
												 , city.population);
				}
				
				//-------------------------------------------------------------------------//
				// Market - Achat
				
				protected function wheatMarketBuyCheck(event:Event):void
				{
					city.goldSpent -= (int)(city.wheatBought * Numbers.WHEAT_PRICE_BUY);
					city.wheatBought = wheatMarketSlider.value;

					
					if((city.gold-city.goldSpent)/Numbers.WHEAT_PRICE_BUY < city.wheatBought)
						city.wheatBought = (city.gold-city.goldSpent)/Numbers.WHEAT_PRICE_BUY;
					
					city.goldSpent += (int)(city.wheatBought * Numbers.WHEAT_PRICE_BUY);
				}
				
				protected function woodMarketBuyCheck(event:Event):void	
				{
					city.goldSpent -= (int)(city.woodBought * Numbers.WOOD_PRICE_BUY);
					city.woodBought = woodMarketSlider.value;
					
					if((city.gold-city.goldSpent)/Numbers.WOOD_PRICE_BUY < city.woodBought)
						city.woodBought = (city.gold-city.goldSpent)/Numbers.WOOD_PRICE_BUY;
					
					city.goldSpent += (int)(city.woodBought * Numbers.WOOD_PRICE_BUY);
				}
				
				protected function ironMarketBuyCheck(event:Event):void	
				{
					city.goldSpent -= (int)(city.ironBought * Numbers.IRON_PRICE_BUY);
					city.ironBought = ironMarketSlider.value;
					
					if((city.gold-city.goldSpent)/Numbers.IRON_PRICE_BUY < city.ironBought)
						city.ironBought = (city.gold-city.goldSpent)/Numbers.IRON_PRICE_BUY;
					
					city.goldSpent += (int)(city.ironBought * Numbers.IRON_PRICE_BUY);
				}
				
				
				protected function bowsMarketBuyCheck(event:Event):void	
				{
					city.goldSpent -= (int)(city.bowsBought * Numbers.BOW_PRICE_BUY);
					city.bowsBought = bowsMarketSlider.value;
					
					if((city.gold-city.goldSpent)/Numbers.BOW_PRICE_BUY < city.bowsBought)
						city.bowsBought = (city.gold-city.goldSpent)/Numbers.BOW_PRICE_BUY;

					city.goldSpent += (int)(city.bowsBought * Numbers.BOW_PRICE_BUY);
				}
				
				protected function swordsMarketBuyCheck(event:Event):void	
				{
					city.goldSpent -= (int)(city.swordsBought * Numbers.SWORD_PRICE_BUY);
					city.swordsBought = swordsMarketSlider.value;
					
					if((city.gold-city.goldSpent)/Numbers.SWORD_PRICE_BUY < city.swordsBought)
						city.swordsBought = (city.gold-city.goldSpent)/Numbers.SWORD_PRICE_BUY;

					city.goldSpent += (int)(city.swordsBought * Numbers.SWORD_PRICE_BUY);
				}
				
				protected function armorsMarketBuyCheck(event:Event):void	
				{
					city.goldSpent -= (int)(city.armorsBought * Numbers.ARMOR_PRICE_BUY);
					city.armorsBought = armorsMarketSlider.value;
					
					if((city.gold-city.goldSpent)/Numbers.ARMOR_PRICE_BUY < city.armorsBought)
						city.armorsBought = (city.gold-city.goldSpent)/Numbers.ARMOR_PRICE_BUY;
					
					city.goldSpent += (int)(city.armorsBought * Numbers.ARMOR_PRICE_BUY);
				}
				
				
				protected function buy():void
				{
					city.gold -= city.goldSpent;
					
					city.wheat += city.wheatBought;
					city.wood += city.woodBought;
					city.iron += city.ironBought;
					city.bowStock += city.bowsBought;
					city.swordStock += city.swordsBought;
					city.armorStock += city.armorsBought;
					
					city.goldSpent = 0;
					city.wheatBought = 0;
					city.woodBought = 0;
					city.ironBought = 0;
					city.bowsBought = 0;
					city.swordsBought = 0;
					city.armorsBought = 0;
					
					GameManager.getInstance().saveCity(city);
				}
				
				//-------------------------------------------------------------------------//
				// Market - Vente
				
				
				protected function wheatMarketSellCheck(event:Event):void	
				{
					city.goldEarned -= (int)(city.wheatSold * Numbers.WHEAT_PRICE_SELL);
					city.wheatSold = wheatMarketSellSlider.value;
					
					if((city.wheat-city.wheatSold) < 0)
						city.wheatSold = city.wheat;
					
					city.goldEarned += (int)(city.wheatSold * Numbers.WHEAT_PRICE_SELL);
				}
				
				
				protected function woodMarketSellCheck(event:Event):void	
				{
					city.goldEarned -= (int)(city.woodSold * Numbers.WOOD_PRICE_SELL);
					city.woodSold = woodMarketSellSlider.value;
					
					if((city.wood-city.woodSold) < 0)
						city.woodSold = city.wood;
					
					city.goldEarned += (int)(city.woodSold * Numbers.WOOD_PRICE_SELL);
				}
				
				
				protected function ironMarketSellCheck(event:Event):void	
				{
					city.goldEarned -= (int)(city.ironSold * Numbers.IRON_PRICE_SELL);
					city.ironSold = ironMarketSellSlider.value;
					
					if((city.iron-city.ironSold) < 0)
						city.ironSold = city.iron;
					
					city.goldEarned += (int)(city.ironSold * Numbers.IRON_PRICE_SELL);
				}
				
				protected function bowsMarketSellCheck(event:Event):void	
				{
					city.goldEarned -= (int)(city.bowsSold * Numbers.BOW_PRICE_SELL);
					city.bowsSold = bowsMarketSellSlider.value;
					
					if((city.bowStock-city.bowsSold) < 0)
						city.bowsSold = city.bowStock;
					
					city.goldEarned += (int)(city.bowsSold * Numbers.BOW_PRICE_SELL);
				}
				
				protected function swordsMarketSellCheck(event:Event):void	
				{
					city.goldEarned -= (int)(city.swordsSold * Numbers.SWORD_PRICE_SELL);
					city.swordsSold = swordsMarketSellSlider.value;
					
					if((city.swordStock-city.swordsSold) < 0)
						city.swordsSold = city.swordStock;
					
					city.goldEarned += (int)(city.swordsSold * Numbers.SWORD_PRICE_SELL);
				}
				
				
				protected function armorsMarketSellCheck(event:Event):void	
				{
					city.goldEarned -= (int)(city.armorsSold * Numbers.ARMOR_PRICE_SELL);
					city.armorsSold = armorsMarketSellSlider.value;
					
					if((city.armorStock-city.armorsSold) < 0)
						city.armorsSold = city.armorStock;
					
					city.goldEarned += (int)(city.armorsSold * Numbers.ARMOR_PRICE_SELL);
				}
				
				
				protected function sell():void
				{
					city.gold += city.goldEarned;
					
					city.wheat -= city.wheatSold;
					city.wood -= city.woodSold;
					city.iron -= city.ironSold;
					city.bowStock -= city.bowsSold;
					city.swordStock -= city.swordsSold;
					city.armorStock -= city.armorsSold;
					
					city.goldEarned = 0;
					city.wheatSold = 0;
					city.woodSold = 0;
					city.ironSold = 0;
					city.bowsSold = 0;
					city.swordsSold = 0;
					city.armorsSold = 0;
					
					
					GameManager.getInstance().saveCity(city);
				}
				
				//-------------------------------------------------------------------------//
				// Forge
				
				protected function registerNewForgeWorkers(itemName:String, newNbWorkers:int):void	{
					
					for each(var smith:Smith in city.smiths){
						if(smith.item.name == itemName){
							// ici, on a trouve des workers pour la ressource
								
							// on met a jour le nbWorkers
							smith.people = newNbWorkers;

							// on calcule le nouveau cout
							city.woodSpent += smith.people * smith.item.wood;
							city.ironSpent += smith.people * smith.item.iron;
							
							city.refreshUnemployed();
							return;
						}
					}
				}
				
				//----------------------------------------------------------------//
				
				protected function bowWorkersCheck(event:Event):void
				{
					// on enleve le precedent debit de ressources 
					city.woodSpent -= city.bowWorkers * Numbers.BOW_WOOD;
					city.ironSpent -= city.bowWorkers * Numbers.BOW_IRON;
					
					var peopleAdded:int = bowWorkersSlider.value - city.bowWorkers;
					
					if(city.unemployed < peopleAdded)
						bowWorkersSlider.value = city.bowWorkers + city.unemployed;
					
					city.bowWorkers = bowWorkersSlider.value;
					
					var woodAvailable:int = city.wood - city.woodSpent;
					var ironAvailable:int = city.iron - city.ironSpent;
					
					// la depense en bois pour les arcs est plus grande que le stock de bois
					if(Numbers.BOW_WOOD * city.bowWorkers > woodAvailable)
						city.bowWorkers = Math.floor(woodAvailable/Numbers.BOW_WOOD);

					// la depense en fer pour les arcs est plus grande que le stock de fer
					if(Numbers.BOW_IRON * city.bowWorkers > ironAvailable)
						city.bowWorkers = Math.floor(ironAvailable/Numbers.BOW_IRON);
							
					
					registerNewForgeWorkers("bow", city.bowWorkers);
					
					updateSmithsProgressBar();
					updateWorkersProgressBar();
				}
				
				
				protected function swordWorkersCheck(event:Event):void
				{
					// on enleve le precedent debit de ressources 
					city.woodSpent -= city.swordWorkers * Numbers.SWORD_WOOD;
					city.ironSpent -= city.swordWorkers * Numbers.SWORD_IRON;
					
					var peopleAdded:int = swordWorkersSlider.value - city.swordWorkers;
					
					if(city.unemployed < peopleAdded)
						swordWorkersSlider.value = city.swordWorkers + city.unemployed;
					
					city.swordWorkers = swordWorkersSlider.value;
							
					var woodAvailable:int = city.wood - city.woodSpent;
					var ironAvailable:int = city.iron - city.ironSpent;
					
					// la depense en bois pour les epees est plus grande que le stock de bois
					if(Numbers.SWORD_WOOD * city.swordWorkers > woodAvailable)
						city.swordWorkers = Math.floor(woodAvailable/Numbers.SWORD_WOOD);
					
					// la depense en fer pour les epees est plus grande que le stock de fer
					if(Numbers.SWORD_IRON * city.swordWorkers > ironAvailable)
						city.swordWorkers = Math.floor(ironAvailable/Numbers.SWORD_IRON);

					registerNewForgeWorkers("sword", city.swordWorkers);
					
					updateSmithsProgressBar();
					updateWorkersProgressBar();
				}
				
				protected function armorWorkersCheck(event:Event):void
				{
					// on enleve le precedent debit de ressources 
					city.woodSpent -= city.armorWorkers * Numbers.ARMOR_WOOD;
					city.ironSpent -= city.armorWorkers * Numbers.ARMOR_IRON;
					
					var peopleAdded:int = armorWorkersSlider.value - city.armorWorkers;
					
					if(city.unemployed < peopleAdded)
						armorWorkersSlider.value = city.armorWorkers + city.unemployed;
					
					city.armorWorkers = armorWorkersSlider.value;
					
					var woodAvailable:int = city.wood - city.woodSpent;
					var ironAvailable:int = city.iron - city.ironSpent;
					
					// la depense en bois pour les armures est plus grande que le stock de bois
					if(Numbers.ARMOR_WOOD * city.armorWorkers > woodAvailable)
						city.armorWorkers = Math.floor(woodAvailable/Numbers.ARMOR_WOOD) ;
					
					// la depense en fer pour les armures est plus grande que le stock de fer
					if(Numbers.ARMOR_IRON * city.armorWorkers > ironAvailable)
						city.armorWorkers = Math.floor(ironAvailable/Numbers.ARMOR_IRON);
					
					registerNewForgeWorkers("armor", city.armorWorkers);
					
					updateSmithsProgressBar();
					updateWorkersProgressBar();
				}
				
				//-------------------------------------------------------------------------//

				public function updateSmithsProgressBar():void	
				{
					if(smithsProgressBar != null){
						smithsProgressBar.setProgress(city.bowWorkers
													+ city.swordWorkers
													+ city.armorWorkers
													, city.availableAsSmith);
					}
				}
				
				//-------------------------------------------------------------------------//
				// toolTip creation pour la forge
				
				private function onCreateForgeToolTip(e:ToolTipEvent, itemName:String, woodCost:int, ironCost:int):void 
				{
					var toolTip:ForgeToolTip = new ForgeToolTip();
					toolTip.itemName = itemName;
					toolTip.woodCost = woodCost;
					toolTip.ironCost = ironCost;
					
					e.toolTip = toolTip;
				}
				
				//---------------------------------//
				// toolTip creation pour les marchands
				
				private function onCreateMerchantToolTip(e:ToolTipEvent):void {
					var toolTip:MerchantToolTip = new MerchantToolTip();
					
					e.toolTip = toolTip;
				}
				
				
				//-------------------------------------------------------------------------//
				// merchants

				
				protected function wheatMerchantCheck(event:Event):void
				{
					var previousNbWheat:int = city.merchant.wheat;
					var newNbWheat:int = wheatMerchantSlider.value;
					
					if(newNbWheat > previousNbWheat){
						// on ajoute du ble a la caravane
						
						if(city.wheat < newNbWheat - previousNbWheat){
							// la reserve en ble n'est pas assez grande
							newNbWheat = city.wheat + previousNbWheat;
							city.wheat = 0;
						}
						else{	
							// on pioche dans la reserve de ble
							city.wheat -= newNbWheat - previousNbWheat;
						}
					}
					else{
						// on enleve du ble de la caravane
						city.wheat += previousNbWheat - newNbWheat;
					}
					
					city.merchant.wheat = newNbWheat;
					wheatMerchantSlider.value = city.merchant.wheat;
				}
				
				
				protected function woodMerchantCheck(event:Event):void
				{
					var previousNbWood:int = city.merchant.wood;
					var newNbWood:int = woodMerchantSlider.value;
					
					if(newNbWood > previousNbWood){
						// on ajoute du bois a la caravane
						
						if(city.wood < newNbWood - previousNbWood){
							// la reserve en bois n'est pas assez grande
							newNbWood = city.wood + previousNbWood;
							city.wood = 0;
						}
						else{	
							// on pioche dans la reserve de bois
							city.wood -= newNbWood - previousNbWood;
						}
					}
					else{
						// on enleve du bois de la caravane
						city.wood += previousNbWood - newNbWood;
					}
					
					city.merchant.wood = newNbWood;
					woodMerchantSlider.value = city.merchant.wood;
				}
				
				
				protected function ironMerchantCheck(event:Event):void
				{
					var previousNbIron:int = city.merchant.iron;
					var newNbIron:int = ironMerchantSlider.value;
					
					if(newNbIron > previousNbIron){
						// on ajoute du fer a la caravane
						
						if(city.iron < newNbIron - previousNbIron){
							// la reserve en fer n'est pas assez grande
							newNbIron = city.iron + previousNbIron;
							city.iron = 0;
						}
						else{	
							// on pioche dans la reserve de fer
							city.iron -= newNbIron - previousNbIron;
						}
					}
					else{
						// on enleve du fer de la caravane
						city.iron += previousNbIron - newNbIron;
					}
					
					city.merchant.iron = newNbIron;
					ironMerchantSlider.value = city.merchant.iron;
				}
				
				protected function goldMerchantCheck(event:Event):void
				{
					var previousNbGold:int = city.merchant.gold;
					var newNbGold:int = goldMerchantSlider.value;
					
					if(newNbGold > previousNbGold){
						// on ajoute du fer a la caravane
						
						if(city.gold < newNbGold - previousNbGold){
							// la reserve en fer n'est pas assez grande
							newNbGold = city.gold + previousNbGold;
							city.gold = 0;
						}
						else{	
							// on pioche dans la reserve de fer
							city.gold -= newNbGold - previousNbGold;
						}
					}
					else{
						// on enleve du fer de la caravane
						city.gold += previousNbGold - newNbGold;
					}
					
					city.merchant.gold = newNbGold;
					goldMerchantSlider.value = city.merchant.gold;
				}
				
				
				protected function bowsMerchantCheck(event:Event):void
				{
					var previousNbBows:int = city.merchant.bows;
					var newNbBows:int = bowsMerchantSlider.value;
					
					if(newNbBows > previousNbBows){
						// on ajoute des arcs a la caravane
						
						if(city.bowStock < newNbBows - previousNbBows){
							// la reserve en arcs n'est pas assez grande
							newNbBows = city.bowStock + previousNbBows;
							city.bowStock = 0;
						}
						else{	
							// on pioche dans la reserve d'arcs
							city.bowStock -= newNbBows - previousNbBows;
						}
					}
					else{
						// on enleve des arcs de la caravane
						city.bowStock += previousNbBows - newNbBows;
					}
					
					city.merchant.bows = newNbBows;
					bowsMerchantSlider.value = city.merchant.bows;
				}
				
				
				protected function swordsMerchantCheck(event:Event):void
				{
					var previousNbSwords:int = city.merchant.swords;
					var newNbSwords:int = swordsMerchantSlider.value;
					
					if(newNbSwords > previousNbSwords){
						// on ajoute des epees a la caravane
						
						if(city.swordStock < newNbSwords - previousNbSwords){
							// la reserve en epees n'est pas assez grande
							newNbSwords = city.swordStock + previousNbSwords;
							city.swordStock = 0;
						}
						else{	
							// on pioche dans la reserve d'epees
							city.swordStock -= newNbSwords - previousNbSwords;
						}
					}
					else{
						// on enleve des epees de la caravane
						city.swordStock += previousNbSwords - newNbSwords;
					}
					
					city.merchant.swords = newNbSwords;
					swordsMerchantSlider.value = city.merchant.swords;
				}
				
				protected function armorsMerchantCheck(event:Event):void
				{
					var previousNbArmors:int = city.merchant.armors;
					var newNbArmors:int = armorsMerchantSlider.value;
					
					if(newNbArmors > previousNbArmors){
						// on ajoute des armures a la caravane
						
						if(city.armorStock < newNbArmors - previousNbArmors){
							// la reserve en armures n'est pas assez grande
							newNbArmors = city.armorStock + previousNbArmors;
							city.armorStock = 0;
						}
						else{	
							// on pioche dans la reserve d'armures
							city.armorStock -= newNbArmors - previousNbArmors;
						}
					}
					else{
						// on enleve des armures de la caravane
						city.armorStock += previousNbArmors - newNbArmors;
					}
					
					city.merchant.armors = newNbArmors;
					armorsMerchantSlider.value = city.merchant.armors;
				}
				
				
				//-------------------------------------------------------------------------//
				// armies
				
				protected function bowsArmyCheck(event:Event):void
				{
					var previousNbBows:int = city.army.bows;
					var newNbBows:int = bowsArmySlider.value;
					
					if(newNbBows > previousNbBows){
						// on ajoute des arcs a l'armee
						var nbBowsAvailable:int = city.bowStock + city.bowsRestored - city.bowsEquiped;
						var nbBowsEquiped:int =  newNbBows - previousNbBows;
						
						// la reserve en arcs n'est pas assez grande
						if(nbBowsAvailable < nbBowsEquiped){
							newNbBows = nbBowsAvailable + previousNbBows;
							nbBowsEquiped = nbBowsAvailable;
						}
						
						if(city.bowsRestored > nbBowsEquiped){
							city.bowsRestored -= nbBowsEquiped;
						}
						else{
							city.bowsEquiped += nbBowsEquiped - city.bowsRestored;
							city.bowsRestored = 0;
						}
					}
					else{
						// on enleve des arcs a l'armee
						var nbBowsRestored:int = previousNbBows - newNbBows;
						
						if(city.bowsEquiped > nbBowsRestored){
							city.bowsEquiped -= nbBowsRestored;
						}
						else{
							city.bowsRestored += nbBowsRestored - city.bowsEquiped;
							city.bowsEquiped = 0;
						}
					}
					
					city.army.bows = newNbBows;
					bowsArmySlider.value = city.army.bows;
				}
				
				protected function swordsArmyCheck(event:Event):void
				{
					var previousNbSwords:int = city.army.swords;
					var newNbSwords:int = swordsArmySlider.value;
					
					if(newNbSwords > previousNbSwords){
						// on ajoute des epees a l'armee
						var nbSwordsAvailable:int = city.swordStock + city.swordsRestored - city.swordsEquiped ; 
						var nbSwordsEquiped:int =  newNbSwords - previousNbSwords;
						
						// la reserve en epees n'est pas assez grande
						if(nbSwordsAvailable < nbSwordsEquiped){
							newNbSwords = nbSwordsAvailable + previousNbSwords;
							nbSwordsEquiped = nbSwordsAvailable;
						}
						
						if(city.swordsRestored > nbSwordsEquiped){
							city.swordsRestored -= nbSwordsEquiped;
						}
						else{
							city.swordsEquiped += nbSwordsEquiped - city.swordsRestored;
							city.swordsRestored = 0;
						}
					}
					else{
						// on enleve des epees a l'armee
						var nbSwordsRestored:int = previousNbSwords - newNbSwords;
						
						if(city.swordsEquiped > nbSwordsRestored){
							city.swordsEquiped -= nbSwordsRestored;
						}
						else{
							city.swordsRestored += nbSwordsRestored - city.swordsEquiped;
							city.swordsEquiped = 0;
						}
					}
					
					city.army.swords = newNbSwords;	
					swordsArmySlider.value = city.army.swords;
				}
				
				protected function armorsArmyCheck(event:Event):void
				{
					var previousNbArmors:int = city.army.armors;
					var newNbArmors:int = armorsArmySlider.value;
					
					if(newNbArmors > previousNbArmors){
						// on ajoute des epees a l'armee
						var nbArmorsAvailable:int = city.armorStock + city.armorsRestored - city.armorsEquiped ; 
						var nbArmorsEquiped:int =  newNbArmors - previousNbArmors;
						
						// la reserve en epees n'est pas assez grande
						if(nbArmorsAvailable < nbArmorsEquiped){
							newNbArmors = nbArmorsAvailable + previousNbArmors;
							nbArmorsEquiped = nbArmorsAvailable;
						}
						
						if(city.armorsRestored > nbArmorsEquiped){
							city.armorsRestored -= nbArmorsEquiped;
						}
						else{
							city.armorsEquiped += nbArmorsEquiped - city.armorsRestored;
							city.armorsRestored = 0;
						}
					}
					else{
						// on enleve des armures a l'armee
						var nbArmorsRestored:int = previousNbArmors - newNbArmors;
						
						if(city.armorsEquiped > nbArmorsRestored){
							city.armorsEquiped -= nbArmorsRestored;
						}
						else{
							city.armorsRestored += nbArmorsRestored - city.armorsEquiped;
							city.armorsEquiped = 0;
						}
					}
					
					city.army.armors = newNbArmors;
					armorsArmySlider.value = city.army.armors;
				}
				
				//-------------------------------------------------------------------------//
				
				protected function armyCheck(event:Event):void	
				{
					var previousArmySize:int = city.army.size;
					city.army.size = armySlider.value;
					
					if(city.army.size > previousArmySize){
						// on ajoute des gens dans une armee
						var nbPeopleAdded:int =  city.army.size - previousArmySize;
						
						if(city.armyReleased > nbPeopleAdded){
							city.armyReleased -= nbPeopleAdded;
						}
						else{
							city.armyRaised += nbPeopleAdded - city.armyReleased;
							city.armyReleased = 0;
						}
					}
					else{
						// on enleve des gens de l'armee
						var nbPeopleRemoved:int = previousArmySize - city.army.size;
						
						if(city.armyRaised > nbPeopleRemoved){
							city.armyRaised -= nbPeopleRemoved;
						}
						else{
							city.armyReleased += nbPeopleRemoved - city.armyRaised;
							city.armyRaised = 0;
						}
					}
					
					updateWorkersProgressBar();
				}
				
				//-------------------------------------------------------------------------//

				protected function merchantsCheck(event:Event):void
				{
					var previousMerchantSize:int = city.merchant.size;
					city.merchant.size = merchantsSlider.value;
					
					if(city.merchant.size > previousMerchantSize){
						// on ajoute des gens dans une caravane
						var nbPeopleAdded:int =  city.merchant.size - previousMerchantSize;
						
						if(city.armyReleased > nbPeopleAdded){
							city.armyReleased -= nbPeopleAdded;
						}
						else{
							city.armyRaised += nbPeopleAdded - city.armyReleased;
							city.armyReleased = 0;
						}
					}
					else{
						// on enleve des gens de la caravane
						var nbPeopleRemoved:int = previousMerchantSize - city.merchant.size;
						
						if(city.armyRaised > nbPeopleRemoved){
							city.armyRaised -= nbPeopleRemoved;
						}
						else{
							city.armyReleased += nbPeopleRemoved - city.armyRaised;
							city.armyRaised = 0;
						}
					}
					
					updateWorkersProgressBar();
				}
				
				

				//-------------------------------------------------------------------------//
				// Armies - Merchants
				
				protected function newUnit(type:int):Unit
				{
					if(city.unemployed < 50){
						FlexGlobals.topLevelApplication.message(Translations.FREE_PEOPLE.getItemAt(Session.LANGUAGE));
						return null;
					}
					
					var newUnit:Unit = new Unit();
					newUnit.initNewUnit(city.x, city.y);
					
					newUnit.size = 0; 
					newUnit.speed = type == 1 ? Numbers.ARMY_BASE_SPEED : Numbers.MERCHANT_BASE_SPEED;
					newUnit.type = type;
					newUnit.player = Session.player;
					
					newUnit.moves = new ArrayCollection();
					var moveInCity:Move = new Move();
					moveInCity.initNewMove(newUnit.unitUID, city.x, city.y);
					newUnit.moves.addItem(moveInCity);
					
					Session.player.units.addItem(newUnit);
					
					// le contenu de la case sera refreshed au retour par unitSaved, 
					// mais si on refresh maintenant, on va pouvoir afficher la case lors du validateArmy() ou validateMerchant()
					Session.CURRENT_CASE_SELECTED.units.addItem(newUnit);
					Session.CURRENT_CASE_SELECTED.recordedMoves.addItem(moveInCity);
					Session.CURRENT_CASE_SELECTED.forceRefresh();
					
					return newUnit;
				}
				
				protected function newArmy():void
				{
					var newArmy:Unit = newUnit(1);
					if(newArmy == null)
						return;

					city.army = newArmy;

					armySlider.value = 50;
					armyCheck(null);
				}

				protected function deleteArmy():void
				{
					trace("delete army" + city.army.unitUID);
				
					if(city.army.status != Unit.TO_BE_CREATED){
						// pour une armee deja existante : on reajuste la pop, ils peuvent travailler des ce tour
						// faille : si on a enleve des unites avant elles sont dans armyReleased et ne seront pas utilisees ce tour
						city.population += city.army.size;
					}
					else{
						// pour une armee nouvelle, la pop n'a pas bouge, on reajuste armyRaised et armyReleased par contre
						trace("city.armyRaised : " + city.armyRaised);
						trace("city.armyReleased : " + city.armyReleased);
						trace("city.army.size : " + city.army.size);
						if(city.armyRaised >= city.army.size){
							city.armyRaised -= city.army.size;
						}
						else{
							city.armyReleased += city.army.size - city.armyRaised;
							city.armyRaised = 0;
						}
						trace("---");
						trace("city.armyRaised : " + city.armyRaised);
						trace("city.armyReleased : " + city.armyReleased);
						trace("city.army.size : " + city.army.size);
					}
					
					// on remet les armements dans les stocks de la ville
					// on enleve des arcs a l'armee
					var nbBowsRestored:int = city.army.bows;
					
					if(city.bowsEquiped > nbBowsRestored){
						city.bowsEquiped -= nbBowsRestored;
					}
					else{
						city.bowsRestored += nbBowsRestored - city.bowsEquiped;
						city.bowsEquiped = 0;
					}
					
					// on enleve des epees a l'armee
					var nbSwordsRestored:int = city.army.swords;
					
					if(city.swordsEquiped > nbSwordsRestored){
						city.swordsEquiped -= nbSwordsRestored;
					}
					else{
						city.swordsRestored += nbSwordsRestored - city.swordsEquiped;
						city.swordsEquiped = 0;
					}
					
					// on enleve des armures a l'armee
					var nbArmorsRestored:int = city.army.armors;
					
					if(city.armorsEquiped > nbArmorsRestored){
						city.armorsEquiped -= nbArmorsRestored;
					}
					else{
						city.armorsRestored += nbArmorsRestored - city.armorsEquiped;
						city.armorsEquiped = 0;
					}
					
					Session.player.units.removeItemAt(Session.player.units.getItemIndex(city.army));

					// on enleve le move dans la case de la ville et on refresh le contenu de la case pour afficher dans le menu des unites de droite
					var indexToRemove:int = -1;
					for each(var recordedMovesInTheCity:Move in Session.CURRENT_CASE_SELECTED.recordedMoves){
						trace("recordedMove.unitUID: " + recordedMovesInTheCity.unitUID);
						
						if(recordedMovesInTheCity.unitUID == city.army.unitUID)
						{
							indexToRemove = Session.CURRENT_CASE_SELECTED.recordedMoves.getItemIndex(recordedMovesInTheCity);
							break;
						}
					}

					if(indexToRemove >= 0)
						Session.CURRENT_CASE_SELECTED.recordedMoves.removeItemAt(indexToRemove);
					
					Session.CURRENT_CASE_SELECTED.forceRefresh();
					BoardDrawer.getInstance().refreshUnits(Session.CURRENT_CASE_SELECTED);
					
					GameManager.getInstance().deleteUnit(city.army);
					
					city.army = null;
				}
				
				protected function newMerchants():void
				{
					var newMerchant:Unit = newUnit(2);
					if(newMerchant == null)
						return;
					
					city.merchant = newMerchant;
					
					merchantsSlider.value = 50;
					merchantsCheck(null);
				}

				protected function deleteMerchant():void
				{
					trace("delete merchant" + city.merchant.unitUID);
					
					if(city.merchant.status != Unit.TO_BE_CREATED){
						// pour une caravane deja existante : on reajuste la pop, ils peuvent travailler des ce tour
						// faille : si on a enleve des unites avant elles sont dans armyReleased et ne seront pas utilisees ce tour
						city.population += city.merchant.size;
					}
					else{
						// pour une caravane nouvelle, la pop n'a pas bouge, on reajuste armyRaised et armyReleased par contre
						trace("city.armyRaised " + city.armyRaised);
						trace("city.armyReleased " + city.armyReleased);

						if(city.armyRaised >= city.merchant.size){
							city.armyRaised -= city.merchant.size;
						}
						else{
							city.armyReleased += city.merchant.size - city.armyRaised;
							city.armyRaised = 0;
						}
						
						trace("city.armyRaised " + city.armyRaised);
						trace("city.armyReleased " + city.armyReleased);
					}
					
					// on remet les provisions transportees dans les stocks de la ville
					city.wheat += city.merchant.wheat;
					city.wood += city.merchant.wood;
					city.iron += city.merchant.iron;
					city.gold += city.merchant.gold;
					
					// on enleve la caravane de la liste de la ville et du player
					Session.player.units.removeItemAt(Session.player.units.getItemIndex(city.merchant));
					
					// on enleve le move dans la case de la ville et on refresh le contenu de la case pour afficher dans le menu des unites de droite
					var indexToRemove:int = -1;
					for each(var recordedMovesInTheCity:Move in Session.CURRENT_CASE_SELECTED.recordedMoves){
						
						trace("recordedMove.unitUID: " + recordedMovesInTheCity.unitUID);
						if(recordedMovesInTheCity.unitUID == city.merchant.unitUID){
							indexToRemove = Session.CURRENT_CASE_SELECTED.recordedMoves.getItemIndex(recordedMovesInTheCity);
							break;
						}
					}
					
					if(indexToRemove >= 0)
						Session.CURRENT_CASE_SELECTED.recordedMoves.removeItemAt(indexToRemove);
					
					Session.CURRENT_CASE_SELECTED.forceRefresh();
					BoardDrawer.getInstance().refreshUnits(Session.CURRENT_CASE_SELECTED);
					
					GameManager.getInstance().deleteUnit(city.merchant);
					
					city.merchant = null;
				}
				
			]]>
		</fx:Script>
	
		<fx:Declarations>
			<s:Fade id="fader" duration="1000" alphaFrom="1" alphaTo="0"/>
			<s:Fade id="shower" duration="1000" alphaFrom="0" alphaTo="1"/>
			
			<s:State name="normal" id="normalState"/>
		</fx:Declarations>
	
		<mx:Image source="{ImageContainer.FERMIER}" x="950" y="-70" visible="{viewstack.selectedIndex == 0}" hideEffect="fader" showEffect="shower"/>
		<mx:Image source="{ImageContainer.FORGERON}" x="950" y="-70" visible="{viewstack.selectedIndex == 1 || viewstack.selectedIndex == 2}" hideEffect="fader" showEffect="shower"/>
		<mx:Image source="{ImageContainer.MARCHANDE}" x="1000" y="-70" visible="{viewstack.selectedIndex == 3}" hideEffect="fader" showEffect="shower"/>
		<mx:Image source="{ImageContainer.MARCHAND}" x="950" y="-70" visible="{viewstack.selectedIndex == 4}" hideEffect="fader" showEffect="shower"/>
		<mx:Image source="{ImageContainer.GUERRIER}" x="950" y="-70" visible="{viewstack.selectedIndex == 5}" hideEffect="fader" showEffect="shower"/>

		<s:VGroup width="100%" horizontalAlign="center">
			
			<s:HGroup horizontalAlign="center" verticalAlign="middle">
				<s:Label id="cityNameInput" text="{city.name}" fontSize="25"/>
				<mx:Spacer width="50"/>
				<s:Label text="Population"/>
				<mx:Spacer width="20"/>
				<s:Label text="{city.population}" styleName="numberLabel"/>
				<mx:Spacer width="6"/>
				<s:Label text="({city.armyReleased - city.armyRaised >= 0 ? '+' : '-'} {Math.abs(city.armyReleased - city.armyRaised)})"  
						 color="{city.armyReleased - city.armyRaised >= 0 ? Numbers.GREEN : Numbers.RED} "/>
				
				<mx:Image width="30" height="30" toolTip="{Translations.ARMY_POPULATION.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.QUESTION}"/>
			</s:HGroup>
			<s:HGroup width="100%" horizontalAlign="center" bottom="0"
					  verticalAlign="middle">
				<s:Label text="{Translations.WORKERS.getItemAt(Session.LANGUAGE)}"/>
				<mx:Spacer width="10"/>
				<s:Label text="{city.peopleCreatingWheat 
								 + city.peopleCreatingWood
								 + city.peopleCreatingIron
								 + city.bowWorkers
								 + city.swordWorkers
								 + city.armorWorkers
								 + city.armyRaised
								 - city.armyReleased}"
						 styleName="numberLabel" 
						 textAlign="right"
						 minWidth="60"/>
				<mx:Spacer width="10"/>
				<s:VGroup>
					<mx:Spacer height="11"/>
					<mx:ProgressBar width="200"
									height="100%"
									label="" 
									id="workersProgressBar"
									mode="manual"
									barSkin="{WorkersProgressBarSkin}"
									trackSkin="{WorkersProgressTrackSkin}"
									trackHeight="24"
									creationComplete="{updateWorkersProgressBar()}"/>
				</s:VGroup>
				<mx:Spacer width="10"/>
				<s:Label text="{city.unemployed}"
						 styleName="numberLabel" 
						 textAlign="right"
						 minWidth="60"/>
				<mx:Spacer width="10"/>
				<s:Label text="{Translations.UNEMPLOYED.getItemAt(Session.LANGUAGE)}" />
			</s:HGroup>
			<s:HGroup horizontalAlign="center" verticalAlign="middle">
				
				<mx:Image toolTip="{Translations.WHEAT.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WHEAT}"/>
				<mx:Spacer width="10"/>
				<s:Label text="{city.wheat}" styleName="numberLabel"/>
				
				<mx:Spacer width="15"/>
				<mx:Image toolTip="{Translations.WOOD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WOOD}"/>
				<mx:Spacer width="10"/>
				<s:Label text="{city.wood}" styleName="numberLabel"/>
				
				<mx:Spacer width="15"/>
				<mx:Image toolTip="{Translations.IRON.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.IRON}"/>
				<mx:Spacer width="10"/>
				<s:Label text="{city.iron}" styleName="numberLabel"/>

				<mx:Spacer width="15"/>
				<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
				<mx:Spacer width="10"/>
				<s:Label text="{city.gold}" styleName="numberLabel"/>
				
			</s:HGroup>
			<s:HGroup verticalAlign="top">
				<mx:Spacer width="-25"/>
				<s:Label text="({(city.wheat + city.wheatEarned - city.wheatSpent)})" color="{city.wheat + city.wheatEarned - city.wheatSpent >= 0 ? Numbers.GREEN : Numbers.RED}"/>
				
				<mx:Spacer width="87"/>
				<s:Label text="({(city.wood + city.woodEarned - city.woodSpent)})" color="{city.wood + city.woodEarned - city.woodSpent >= 0 ? Numbers.GREEN : Numbers.RED}"/>
				
				<mx:Spacer width="87"/>
				<s:Label text="({(city.iron + city.ironEarned - city.ironSpent)})" color="{city.iron + city.ironEarned - city.ironSpent >= 0 ? Numbers.GREEN : Numbers.RED}"/>
			</s:HGroup>
			
			<mx:Spacer height="15"/>
			<s:TabBar id="tabs" dataProvider="{viewstack}"
					  skinClass="com.uralys.tribes.skins.CustomTabBarSkin"/>
				
			<mx:ViewStack id="viewstack" width="650" height="100%">
				
				<!-- =============================================================================================== -->
				<!-- Resources Tab -->
				
				<s:NavigatorContent label="{Translations.RESOURCES.getItemAt(Session.LANGUAGE)}"
									show="{updateWorkersProgressBar()}">
					<s:VGroup width="100%" horizontalAlign="center">
						<mx:Grid verticalGap="10" horizontalGap="55" horizontalAlign="center" verticalAlign="middle">
							<mx:GridRow >
								<mx:GridItem/>
								<mx:GridItem horizontalAlign="center" width="100">
									<s:Label text="{Translations.WORKERS.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.HARVEST.getItemAt(Session.LANGUAGE)}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.SPENDING.getItemAt(Session.LANGUAGE)}"/>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow>
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.WHEAT.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WHEAT}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:HGroup verticalAlign="middle">
										<s:Label text="{city.peopleCreatingWheat}"
												 styleName="numberLabel" 
												 textAlign="right"
												 minWidth="60"/>
										<s:HSlider id="wheatWorkersSlider"
												   showDataTip="false"
													liveDragging="true" 
													change="wheatWorkersCheck(event)"
													value="{city.peopleCreatingWheat}"
													maximum="{city.population}"
													snapInterval="1"/>
									</s:HGroup>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="+ {city.wheatEarned}" 
											 styleName="numberLabel" 
											 color="{Numbers.GREEN}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="- {city.wheatSpent}"  
											 styleName="numberLabel" 
											 color="{city.wheatSpent > 0 ? Numbers.RED : Numbers.GREEN}"/>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.WOOD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WOOD}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:HGroup verticalAlign="middle">
										<s:Label text="{city.peopleCreatingWood}"
												 styleName="numberLabel" 
												 textAlign="right"
												 minWidth="60"/>
										<s:HSlider id="woodWorkersSlider"
												   showDataTip="false"
												   liveDragging="true" 
												   change="woodWorkersCheck(event)"
												   value="{city.peopleCreatingWood}"
												   maximum="{city.population}"
												   snapInterval="1"/>
									</s:HGroup>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle"> 
									<s:Label text="+ {city.woodEarned}"
											 styleName="numberLabel"  
											 color="{Numbers.GREEN}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="- {city.woodSpent}"
											 styleName="numberLabel"  
											 color="{city.woodSpent > 0 ? Numbers.RED : Numbers.GREEN}"/>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.IRON.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.IRON}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:HGroup verticalAlign="middle">
										<s:Label text="{city.peopleCreatingIron}"
												 styleName="numberLabel" 
												 textAlign="right"
												 minWidth="60"/>
										<s:HSlider id="ironWorkersSlider"
												   showDataTip="false"
												   liveDragging="true" 
												   change="ironWorkersCheck(event)"
												   value="{city.peopleCreatingIron}"
												   maximum="{city.population}"
												   snapInterval="1"/>
									</s:HGroup>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="+ {city.ironEarned}"
											 styleName="numberLabel" 
											 color="{Numbers.GREEN}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="- {city.ironSpent}"
											 styleName="numberLabel"  
											 color="{city.ironSpent > 0 ? Numbers.RED : Numbers.GREEN}"/>
								</mx:GridItem>
							</mx:GridRow>
						</mx:Grid>
						<mx:Spacer height="10"/>
						<s:HGroup width="100%" horizontalAlign="center" bottom="0"
								  includeInLayout="{city.wheat + city.wheatEarned - city.wheatSpent &lt; 0}">
							<s:Label text="{Translations.STARVATION.getItemAt(Session.LANGUAGE)}"
									 visible="{city.wheat + city.wheatEarned - city.wheatSpent &lt; 0}"
									 color="{Numbers.RED}"/>
						</s:HGroup>
					</s:VGroup>
				</s:NavigatorContent> 

				
				<!-- =============================================================================================== -->
				<!-- Forge Tab -->
				
				<s:NavigatorContent label="{Translations.FORGE.getItemAt(Session.LANGUAGE)}"
									show="{updateSmithsProgressBar()}">
					<s:VGroup width="100%" horizontalAlign="center">
						<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle">
						  <mx:GridRow >
							  <mx:GridItem/>
							  <mx:GridItem horizontalAlign="center">
								  <s:Label text="{Translations.WORKERS.getItemAt(Session.LANGUAGE)}" />
							  </mx:GridItem>
							  <mx:GridItem horizontalAlign="center">
								  <s:Label text="{Translations.WOOD_SPENT.getItemAt(Session.LANGUAGE)}" />
							  </mx:GridItem>
							  <mx:GridItem horizontalAlign="center">
								  <s:Label text="{Translations.IRON_SPENT.getItemAt(Session.LANGUAGE)}" />
							  </mx:GridItem>
						  </mx:GridRow>
						  <mx:GridRow >
							  <mx:GridItem horizontalAlign="center">
								  <mx:Image toolTip=" "
											toolTipCreate="{onCreateForgeToolTip(event, Translations.BOW.getItemAt(Session.LANGUAGE) as String, Numbers.BOW_WOOD, Numbers.BOW_IRON)}"
											source="{ImageContainer.BOW}"/>
							  </mx:GridItem>
							  <mx:GridItem horizontalAlign="center" verticalAlign="middle">
								  <s:HGroup verticalAlign="middle">
									  <s:Label text="{city.bowWorkers}" 
											   styleName="numberLabel" 
											   textAlign="right"
											   minWidth="60"/>
									  <s:HSlider id="bowWorkersSlider"
												 showDataTip="false"
												 liveDragging="true" 
												 change="bowWorkersCheck(event)"
												 value="{city.bowWorkers}"
												 maximum="{city.availableAsSmith}"
												 snapInterval="1"/>
								  </s:HGroup>
							  </mx:GridItem>
							  <mx:GridItem horizontalAlign="center" verticalAlign="middle">
								  <s:Label text="{Numbers.BOW_WOOD * city.bowWorkers}" styleName="numberLabel"/>
							  </mx:GridItem>
							  <mx:GridItem horizontalAlign="center" verticalAlign="middle">
								  <s:Label text="{Numbers.BOW_IRON * city.bowWorkers}" styleName="numberLabel"/>
							  </mx:GridItem>
						  </mx:GridRow>
							<mx:GridRow verticalAlign="middle">
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip=" "
											  toolTipCreate="{onCreateForgeToolTip(event, Translations.SWORD.getItemAt(Session.LANGUAGE) as String, Numbers.SWORD_WOOD, Numbers.SWORD_IRON)}"
											  source="{ImageContainer.SWORD}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:HGroup verticalAlign="middle">
										<s:Label text="{city.swordWorkers}" 
												 styleName="numberLabel" 
												 textAlign="right"
												 minWidth="60"/>
										<s:HSlider id="swordWorkersSlider"
												   showDataTip="false"
												   liveDragging="true" 
												   change="swordWorkersCheck(event)"
												   value="{city.swordWorkers}"
												   maximum="{city.availableAsSmith}"
												   snapInterval="1"/>
									</s:HGroup>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="{Numbers.SWORD_WOOD * city.swordWorkers}" styleName="numberLabel"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="{Numbers.SWORD_IRON * city.swordWorkers}" styleName="numberLabel"/>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip=" "
											  toolTipCreate="{onCreateForgeToolTip(event, Translations.ARMOR.getItemAt(Session.LANGUAGE) as String, Numbers.ARMOR_WOOD, Numbers.ARMOR_IRON)}"
											  source="{ImageContainer.ARMOR}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:HGroup verticalAlign="middle">
										<s:Label text="{city.armorWorkers}" 
												 styleName="numberLabel" 
												 textAlign="right"
												 minWidth="60"/>
										<s:HSlider id="armorWorkersSlider"
												   showDataTip="false"
												   liveDragging="true" 
												   change="armorWorkersCheck(event)"
												   value="{city.armorWorkers}"
												   maximum="{city.availableAsSmith}"
												   snapInterval="1"/>
									</s:HGroup>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="{Numbers.ARMOR_WOOD * city.armorWorkers}" styleName="numberLabel"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="{Numbers.ARMOR_IRON * city.armorWorkers}" styleName="numberLabel"/>
								</mx:GridItem>
							</mx:GridRow>
						<mx:GridRow>
							<mx:GridItem colSpan="4">
							  <mx:HRule width="100%"/>
							</mx:GridItem>
						</mx:GridRow >
						<mx:GridRow >
							<mx:GridItem/>
							<mx:GridItem horizontalAlign="center" verticalAlign="middle">
								<s:Label text="{Translations.TOTAL_SPENDING.getItemAt(Session.LANGUAGE)}"/>
							</mx:GridItem>
							<mx:GridItem horizontalAlign="center" verticalAlign="middle">
								<s:Label text="{Numbers.SWORD_WOOD * city.swordWorkers 
										 	   +Numbers.ARMOR_WOOD * city.armorWorkers
										 	   +Numbers.BOW_WOOD * city.bowWorkers}" 
										 		styleName="numberLabel"/>
							</mx:GridItem>
							<mx:GridItem horizontalAlign="center" verticalAlign="middle">
								<s:Label text="{Numbers.SWORD_IRON * city.swordWorkers
										 +Numbers.ARMOR_IRON * city.armorWorkers
										 +Numbers.BOW_IRON * city.bowWorkers}" 
										 styleName="numberLabel"/>
							</mx:GridItem>
						</mx:GridRow>
					  </mx:Grid>
						
						<s:HGroup width="100%" horizontalAlign="center" bottom="0"
								  verticalAlign="middle"
								  visible="{city.unemployed + city.bowWorkers + city.swordWorkers + city.armorWorkers &gt; 0}">
							<s:Label text="{Translations.SMITHS.getItemAt(Session.LANGUAGE)}"/>
							<mx:Spacer width="10"/>
							<s:Label text="{city.bowWorkers + city.swordWorkers + city.armorWorkers}"
									 textAlign="right"
									 minWidth="40"/>
							<mx:Spacer width="4"/>
							<s:VGroup>
								<mx:Spacer height="12"/>
								<mx:ProgressBar width="250"
												height="100%"
												label="" 
												id="smithsProgressBar"
												mode="manual"
												barSkin="{WorkersProgressBarSkin}"
												trackSkin="{WorkersProgressTrackSkin}"
												trackHeight="18"
												creationComplete="{updateSmithsProgressBar()}"/>
							</s:VGroup>
							<mx:Spacer width="4"/>
							<s:Label text="{city.unemployed}"
									 textAlign="right"
									 minWidth="40"/>
							<mx:Spacer width="4"/>
							<s:Label text="{Translations.UNEMPLOYED.getItemAt(Session.LANGUAGE)}" />
						</s:HGroup>
					</s:VGroup>
				</s:NavigatorContent>
				
				
				
				<!-- =============================================================================================== -->
				<!-- Equipment Tab -->
				
				<s:NavigatorContent label="{Translations.EQUIPMENT.getItemAt(Session.LANGUAGE)}">
					<s:VGroup width="100%" horizontalAlign="center">
						<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle">
							<mx:GridRow >
								<mx:GridItem >
								</mx:GridItem >
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.STOCK.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.PRODUCTION.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.ARMY.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.PREVISION.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<mx:Image toolTip="{Translations.BOW.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.BOW}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="{city.bowStock}" styleName="numberLabel"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="+ {city.bowWorkers}" styleName="numberLabel"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="{(city.bowsRestored - city.bowsEquiped >= 0 ? '+' : '-')} {Math.abs(city.bowsRestored - city.bowsEquiped)}" 
											 styleName="numberLabel" 
											 color="{city.bowsRestored - city.bowsEquiped >= 0 ? Numbers.GREEN : Numbers.RED}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="{(city.bowStock + city.bowWorkers + city.bowsRestored - city.bowsEquiped)}" 
											 styleName="numberLabel" 
											 color="{city.bowStock + city.bowWorkers + city.bowsRestored - city.bowsEquiped >= 0 ? Numbers.GREEN : Numbers.RED}"/>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<mx:Image toolTip="{Translations.SWORD.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.SWORD}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="{city.swordStock}" styleName="numberLabel"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="+ {city.swordWorkers}" styleName="numberLabel"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="{(city.swordsRestored - city.swordsEquiped >= 0 ? '+' : '-')} {Math.abs(city.swordsRestored - city.swordsEquiped)}" 
											 styleName="numberLabel" 
											 color="{city.swordsRestored - city.swordsEquiped >= 0 ? Numbers.GREEN : Numbers.RED}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="{(city.swordStock + city.swordWorkers + city.swordsRestored - city.swordsEquiped)}" 
											 styleName="numberLabel" 
											 color="{city.swordStock + city.swordWorkers + city.swordsRestored - city.swordsEquiped >= 0 ? Numbers.GREEN : Numbers.RED}"/>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<mx:Image toolTip="{Translations.ARMOR.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.ARMOR}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="{city.armorStock}" styleName="numberLabel"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="+ {city.armorWorkers}" styleName="numberLabel"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="{(city.armorsRestored - city.armorsEquiped >= 0 ? '+' : '-')} {Math.abs(city.armorsRestored - city.armorsEquiped)}" 
											 styleName="numberLabel" 
											 color="{city.armorsRestored - city.armorsEquiped >= 0 ? Numbers.GREEN : Numbers.RED}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="{(city.armorStock + city.armorWorkers + city.armorsRestored - city.armorsEquiped)}" 
											 styleName="numberLabel" 
											 color="{city.armorStock + city.armorWorkers + city.armorsRestored - city.armorsEquiped >= 0 ? Numbers.GREEN : Numbers.RED}"/>
								</mx:GridItem>
							</mx:GridRow>
						</mx:Grid>
					</s:VGroup>
				</s:NavigatorContent>
				
				<!-- =============================================================================================== -->
				<!-- Marche -->
				
				<s:NavigatorContent label="{Translations.MARKET.getItemAt(Session.LANGUAGE)}">
					<s:HGroup width="100%" height="100%" horizontalAlign="center">
						<s:TabBar id="tabsMarket" dataProvider="{viewstackMarket}"
								  skinClass="com.uralys.tribes.skins.CustomTabBarSkin"/>
						
						<mx:ViewStack id="viewstackMarket" width="650" height="100%">
							
							<!-- =============================================================================================== -->
							<!-- Achat -->
							
							<s:NavigatorContent label="{Translations.BUYING.getItemAt(Session.LANGUAGE)}" width="650">
								<s:Button label="{Translations.BUY.getItemAt(Session.LANGUAGE)}" left="-130" bottom="0" click="buy()" skinClass="com.uralys.tribes.skins.CustomButtonSkin"/>
								<s:VGroup left="-60">
									<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle"
											 width="520">
										<mx:GridRow >
											<mx:GridItem minWidth="60"/>
											<mx:GridItem horizontalAlign="center" minWidth="60">
												<s:Label text="{Translations.UNIT_COST.getItemAt(Session.LANGUAGE)}" />
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" minWidth="160">
												<s:Label text="{Translations.QUANTITY.getItemAt(Session.LANGUAGE)}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" minWidth="60">
												<s:Label text="{Translations.PRICE_TO_PAY.getItemAt(Session.LANGUAGE)}"/>
											</mx:GridItem>
										</mx:GridRow>
									</mx:Grid>
									<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle"
											 maxHeight="180" width="540">
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.WHEAT.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WHEAT}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.WHEAT_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.wheatBought}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="wheatMarketSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="wheatMarketBuyCheck(event)"
															   value="{city.wheatBought}"
															   maximum="{city.gold/Numbers.WHEAT_PRICE_BUY}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.wheatBought*Numbers.WHEAT_PRICE_BUY}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.WOOD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WOOD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.WOOD_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.woodBought}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="woodMarketSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="woodMarketBuyCheck(event)"
															   value="{city.woodBought}"
															   maximum="{city.gold/Numbers.WOOD_PRICE_BUY}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{(int)(city.woodBought*Numbers.WOOD_PRICE_BUY)}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.IRON.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.IRON}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.IRON_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.ironBought}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="ironMarketSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="ironMarketBuyCheck(event)"
															   value="{city.ironBought}"
															   maximum="{city.gold/Numbers.IRON_PRICE_BUY}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<s:Label text="{city.ironBought*Numbers.IRON_PRICE_BUY}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.BOW.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.BOW}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.BOW_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.bowsBought}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="bowsMarketSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="bowsMarketBuyCheck(event)"
															   value="{city.bowsBought}"
															   maximum="{city.gold/Numbers.BOW_PRICE_BUY}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.bowsBought*Numbers.BOW_PRICE_BUY}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.SWORD.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.SWORD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.SWORD_PRICE_BUY}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.swordsBought}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="swordsMarketSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="swordsMarketBuyCheck(event)"
															   value="{city.swordsBought}"
															   maximum="{city.gold/Numbers.SWORD_PRICE_BUY}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.swordsBought*Numbers.SWORD_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.ARMOR.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.ARMOR}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.ARMOR_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.armorsBought}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="armorsMarketSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="armorsMarketBuyCheck(event)"
															   value="{city.armorsBought}"
															   maximum="{city.gold/Numbers.ARMOR_PRICE_BUY}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.armorsBought*Numbers.ARMOR_PRICE_BUY}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
									</mx:Grid>
									<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle"
											 width="500">
										<mx:GridRow>
											<mx:GridItem colSpan="4">
												<mx:HRule width="100%"/>
											</mx:GridItem>
										</mx:GridRow >
										<mx:GridRow >
											<mx:GridItem/>
											<mx:GridItem/>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Translations.TOTAL_SPENDING.getItemAt(Session.LANGUAGE)} : " minWidth="150"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.goldSpent}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem/>
										</mx:GridRow>
									</mx:Grid>
								</s:VGroup>
							</s:NavigatorContent>
							
							<!-- =============================================================================================== -->
							<!-- Vente -->
							
							<s:NavigatorContent label="{Translations.SELLING.getItemAt(Session.LANGUAGE)}" width="650">
								<s:Button label="{Translations.SELL.getItemAt(Session.LANGUAGE)}" left="-130" bottom="0" click="sell()" skinClass="com.uralys.tribes.skins.CustomButtonSkin"/>
								<s:VGroup left="-60">
									<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle"
											 width="520">
										<mx:GridRow >
											<mx:GridItem minWidth="35"/>
											<mx:GridItem horizontalAlign="center" minWidth="60">
												<s:Label text="{Translations.UNIT_COST.getItemAt(Session.LANGUAGE)}" />
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" minWidth="180">
												<s:Label text="{Translations.QUANTITY.getItemAt(Session.LANGUAGE)}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" minWidth="100">
												<s:Label text="{Translations.PROFIT.getItemAt(Session.LANGUAGE)}"/>
											</mx:GridItem>
										</mx:GridRow>
									</mx:Grid>
									<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle"
											 maxHeight="180" width="540">
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.WHEAT.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WHEAT}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.WHEAT_PRICE_SELL}" styleName="numberLabel" textAlign="right"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.wheatSold}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="wheatMarketSellSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="wheatMarketSellCheck(event)"
															   value="{city.wheatSold}"
															   maximum="{city.wheat}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{(int)(city.wheatSold*Numbers.WHEAT_PRICE_SELL)}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.WOOD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WOOD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.WOOD_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.woodSold}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="woodMarketSellSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="woodMarketSellCheck(event)"
															   value="{city.woodSold}"
															   maximum="{city.wood}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.woodSold*Numbers.WOOD_PRICE_SELL}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.IRON.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.IRON}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.IRON_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.ironSold}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="ironMarketSellSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="ironMarketSellCheck(event)"
															   value="{city.ironSold}"
															   maximum="{city.iron}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{(int)(city.ironSold*Numbers.IRON_PRICE_SELL)}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.BOW.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.BOW}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.BOW_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.bowsSold}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="bowsMarketSellSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="bowsMarketSellCheck(event)"
															   value="{city.bowsSold}"
															   maximum="{city.bowStock}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.bowsSold*Numbers.BOW_PRICE_SELL}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.SWORD.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.SWORD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.SWORD_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.swordsSold}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="swordsMarketSellSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="swordsMarketSellCheck(event)"
															   value="{city.swordsSold}"
															   maximum="{city.swordStock}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.swordsSold*Numbers.SWORD_PRICE_SELL}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.ARMOR.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.ARMOR}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.ARMOR_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.armorsSold}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="armorsMarketSellSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="armorsMarketSellCheck(event)"
															   value="{city.armorsSold}"
															   maximum="{city.armorStock}"
															   snapInterval="1"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.armorsSold*Numbers.ARMOR_PRICE_SELL}" 
														 styleName="numberLabel" 
														 textAlign="right"
														 minWidth="60"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
										</mx:GridRow>
									</mx:Grid>
									<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle"
											 width="520">
										<mx:GridRow>
											<mx:GridItem colSpan="4">
												<mx:HRule width="100%"/>
											</mx:GridItem>
										</mx:GridRow >
										<mx:GridRow >
											<mx:GridItem/>
											<mx:GridItem/>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Translations.TOTAL_PROFIT.getItemAt(Session.LANGUAGE)} : " minWidth="150"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.goldEarned}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem/>
										</mx:GridRow>
									</mx:Grid>
								</s:VGroup>
							</s:NavigatorContent>
						</mx:ViewStack>
						
					</s:HGroup>
				</s:NavigatorContent>
								
				<!-- =============================================================================================== -->
				<!-- Merchants Tab -->
				
				<s:NavigatorContent label="{Translations.MERCHANTS.getItemAt(Session.LANGUAGE)}">
					<s:VGroup height="100%">
						<s:HGroup width="100%" horizontalAlign="center">
							<s:VGroup horizontalAlign="center" height="100%">
								
								<s:HGroup width="200">
									<s:Button label="{Translations.NEW_MERCHANTS.getItemAt(Session.LANGUAGE)}" 
											  click="newMerchants()"
											  skinClass="com.uralys.tribes.skins.CustomButtonSkin"
											  visible="{city.merchant == null}"/>
									<mx:Image width="30" height="30" 
											  toolTip=" "
											  toolTipCreate="{onCreateMerchantToolTip(event)}"
											  source="{ImageContainer.QUESTION}"/>
								</s:HGroup>
								<s:Button label="{Translations.DELETE.getItemAt(Session.LANGUAGE)}"
										  skinClass="com.uralys.tribes.skins.CustomButtonSkin"
										  click="deleteMerchant()"
										  visible="{city.merchant != null}"
										  enabled="{city.merchant.moves.length == 1 || city.merchant.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
								
								<renderers:MerchantsRenderer merchant="{city.merchant}" visible="{city.merchant != null}"/>
							</s:VGroup>
							<s:VGroup>
							<mx:Grid verticalGap="10" 
									 horizontalGap="10" 
									 horizontalAlign="center" 
									 verticalAlign="middle"
									 visible="{city.merchant != null}">
								<mx:GridRow >
									<mx:GridItem >
										<s:Label text="{Translations.NB_CARAVAN.getItemAt(Session.LANGUAGE)}" />
									</mx:GridItem>
									<mx:GridItem horizontalAlign="center" verticalAlign="middle">
										<s:HGroup verticalAlign="middle">
											<s:Label text="{city.merchant.size}" 
													 styleName="numberLabel" 
													 textAlign="right"
													 minWidth="60"/>
											<mx:Image source="{ImageContainer.MERCHANT1}"/>
											<s:HSlider id="merchantsSlider"
													   showDataTip="false"
													   liveDragging="true" 
													   change="merchantsCheck(event)"
													   value="{city.merchant.size}"
													   minimum="50"
													   maximum="{city.unemployed + city.merchant.size}"
													   snapInterval="1"
													   enabled="{city.merchant.moves.length == 1 || city.merchant.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
										</s:HGroup>
									</mx:GridItem>
									<mx:GridItem/>
								</mx:GridRow>
								<mx:GridRow>
									<mx:GridItem colSpan="3">
										<mx:HRule width="100%"/>
									</mx:GridItem>
								</mx:GridRow >
							</mx:Grid>
							<s:Scroller maxHeight="200" width="100%"
										visible="{city.merchant != null}" >
								<s:Group width="100%"
										 visible="{city.merchant != null}">
									<mx:Grid verticalGap="10" 
											 horizontalGap="10" 
											 horizontalAlign="center" 
											 verticalAlign="middle"
											 width="100%">
										<mx:GridRow >
											<mx:GridItem />
											<mx:GridItem horizontalAlign="center">
												<s:Label text="{Translations.CARRIAGE.getItemAt(Session.LANGUAGE)}" />
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<s:Label text="{Translations.AVAILABLE_STOCK.getItemAt(Session.LANGUAGE)}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.WHEAT.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WHEAT}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.merchant.wheat}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="wheatMerchantSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="wheatMerchantCheck(event)"
															   value="{city.merchant.wheat}"
															   maximum="{city.wheat + city.merchant.wheat}"
															   snapInterval="1"
															   enabled="{city.merchant.moves.length == 1 || city.merchant.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.wheat}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.WOOD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WOOD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.merchant.wood}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="woodMerchantSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="woodMerchantCheck(event)"
															   value="{city.merchant.wood}"
															   maximum="{city.wood + city.merchant.wood}"
															   snapInterval="1"
															   enabled="{city.merchant.moves.length == 1 || city.merchant.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.wood}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.IRON.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.IRON}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.merchant.iron}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="ironMerchantSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="ironMerchantCheck(event)"
															   value="{city.merchant.iron}"
															   maximum="{city.iron + city.merchant.iron}"
															   snapInterval="1"
															   enabled="{city.merchant.moves.length == 1 || city.merchant.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.iron}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.merchant.gold}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="goldMerchantSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="goldMerchantCheck(event)"
															   value="{city.merchant.gold}"
															   maximum="{city.gold + city.merchant.gold}"
															   snapInterval="1"
															   enabled="{city.merchant.moves.length == 1 || city.merchant.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.gold}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.BOW.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.BOW}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.merchant.bows}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="bowsMerchantSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="bowsMerchantCheck(event)"
															   value="{city.merchant.bows}"
															   maximum="{city.bowStock + city.merchant.bows}"
															   snapInterval="1"
															   enabled="{city.merchant.moves.length == 1 || city.merchant.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.bowStock}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.SWORD.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.SWORD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.merchant.swords}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="swordsMerchantSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="swordsMerchantCheck(event)"
															   value="{city.merchant.swords}"
															   maximum="{city.swordStock + city.merchant.swords}"
															   snapInterval="1"
															   enabled="{city.merchant.moves.length == 1 || city.merchant.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.swordStock}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.ARMOR.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.ARMOR}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:HGroup verticalAlign="middle">
													<s:Label text="{city.merchant.armors}" 
															 styleName="numberLabel" 
															 textAlign="right"
															 minWidth="60"/>
													<s:HSlider id="armorsMerchantSlider"
															   showDataTip="false"
															   liveDragging="true" 
															   change="armorsMerchantCheck(event)"
															   value="{city.merchant.armors}"
															   maximum="{city.armorStock + city.merchant.armors}"
															   snapInterval="1"
															   enabled="{city.merchant.moves.length == 1 || city.merchant.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
												</s:HGroup>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.armorStock}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem colSpan="4">
												<mx:HRule width="100%"/>
											</mx:GridItem>
										</mx:GridRow >
									</mx:Grid>
								</s:Group>
							</s:Scroller>
							</s:VGroup>
						</s:HGroup>
					</s:VGroup>
				</s:NavigatorContent>
				
				<!-- =============================================================================================== -->
				<!-- Armies Tab -->
				
				<s:NavigatorContent label="{Translations.ARMY.getItemAt(Session.LANGUAGE)}">
					<s:HGroup width="100%" horizontalAlign="center">
						<s:VGroup horizontalAlign="center">
							<s:Button label="{Translations.NEW_ARMY.getItemAt(Session.LANGUAGE)}" 
									  skinClass="com.uralys.tribes.skins.CustomButtonSkin"
									  click="newArmy()"
									  visible="{city.army == null}"/>
							<s:Button label="{Translations.DELETE.getItemAt(Session.LANGUAGE)}" 
									  skinClass="com.uralys.tribes.skins.CustomButtonSkin"
									  click="deleteArmy()"
									  visible="{city.army != null}"
									  enabled="{city.army.moves.length == 1 || city.army.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
							
							<renderers:ArmyRenderer army="{city.army}" visible="{city.army != null}"/>
						</s:VGroup>
						<mx:Grid verticalGap="10" 
								 horizontalGap="10" 
								 horizontalAlign="center" 
								 verticalAlign="middle"
								 visible="{city.army != null}">
							<mx:GridRow >
								<mx:GridItem >
									<s:Label text="{Translations.NB_ARMY.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:HGroup verticalAlign="middle">
										<s:Label text="{city.army.size}" 
												 styleName="numberLabel" 
												 textAlign="right"
												 minWidth="60"/>
										<mx:Image source="{ImageContainer.WARRIOR1}"/>
										<s:HSlider id="armySlider"
												   showDataTip="false"
												   liveDragging="true" 
												   change="armyCheck(event)"
												   value="{city.army.size}"
												   minimum="50"
												   maximum="{city.unemployed + city.army.size}"
												   snapInterval="1"
												   enabled="{city.army.moves.length == 1 || city.army.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
									</s:HGroup>
								</mx:GridItem>
								<mx:GridItem/>
							</mx:GridRow>
							<mx:GridRow>
								<mx:GridItem colSpan="4">
									<mx:HRule width="100%"/>
								</mx:GridItem>
							</mx:GridRow >
							<mx:GridRow >
								<mx:GridItem />
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.EQUIPMENT.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.AVAILABLE_STOCK.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.BOW.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.BOW}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:HGroup verticalAlign="middle">
										<s:Label text="{city.army.bows}" 
												 styleName="numberLabel" 
												 textAlign="right"
												 minWidth="60"/>
										<s:HSlider id="bowsArmySlider"
												   showDataTip="false"
												   liveDragging="true" 
												   change="bowsArmyCheck(event)"
												   value="{city.army.bows}"
												   maximum="{city.bowStock + city.bowsRestored - city.bowsEquiped + city.army.bows}"
												   snapInterval="1"
												   enabled="{city.army.moves.length == 1 || city.army.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
									</s:HGroup>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="{city.bowStock + city.bowsRestored - city.bowsEquiped}" />
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.SWORD.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.SWORD}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:HGroup verticalAlign="middle">
										<s:Label text="{city.army.swords}" 
												 styleName="numberLabel" 
												 textAlign="right"
												 minWidth="60"/>
										<s:HSlider id="swordsArmySlider"
												   showDataTip="false"
												   liveDragging="true" 
												   change="swordsArmyCheck(event)"
												   value="{city.army.swords}"
												   maximum="{city.swordStock + city.swordsRestored - city.swordsEquiped + city.army.swords}"
												   snapInterval="1"
												   enabled="{city.army.moves.length == 1 || city.army.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
									</s:HGroup>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="{city.swordStock + city.swordsRestored - city.swordsEquiped}" />
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.ARMOR.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.ARMOR}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:HGroup verticalAlign="middle">
										<s:Label text="{city.army.armors}" 
												 styleName="numberLabel" 
												 textAlign="right"
												 minWidth="60"/>
										<s:HSlider id="armorsArmySlider"
												   showDataTip="false"
												   liveDragging="true" 
												   change="armorsArmyCheck(event)"
												   value="{city.army.armors}"
												   maximum="{city.armorStock + city.armorsRestored - city.armorsEquiped + city.army.armors}"
												   snapInterval="1"
												   enabled="{city.army.moves.length == 1 || city.army.status == Unit.INTERCEPTED_ON_THIS_CASE}"/>
									</s:HGroup>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center" verticalAlign="middle">
									<s:Label text="{city.armorStock + city.armorsRestored - city.armorsEquiped}" />
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow>
								<mx:GridItem colSpan="4">
									<mx:HRule width="100%"/>
								</mx:GridItem>
							</mx:GridRow >
						</mx:Grid>
					</s:HGroup>
				</s:NavigatorContent>
			</mx:ViewStack>
		</s:VGroup>
</s:Group>
