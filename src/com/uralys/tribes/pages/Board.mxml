<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:renderers="com.uralys.tribes.renderers.*"
		 xmlns:windows="com.uralys.tribes.windows.*" 
		 width="100%" height="100%"
		 creationComplete="init()" >
	
	<fx:Declarations>
		<s:State name="classic"/>
		<s:State name="moveUnit"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.uralys.tribes.commons.Numbers;
			import com.uralys.tribes.commons.Session;
			import com.uralys.tribes.commons.Translations;
			import com.uralys.tribes.core.BoardClickAnalyser;
			import com.uralys.tribes.core.BoardDrawer;
			import com.uralys.tribes.core.Pager;
			import com.uralys.tribes.core.UnitMover;
			import com.uralys.tribes.entities.Case;
			import com.uralys.tribes.entities.City;
			import com.uralys.tribes.entities.Conflict;
			import com.uralys.tribes.entities.Equipment;
			import com.uralys.tribes.entities.Game;
			import com.uralys.tribes.entities.Move;
			import com.uralys.tribes.entities.Player;
			import com.uralys.tribes.entities.Smith;
			import com.uralys.tribes.entities.Unit;
			import com.uralys.tribes.managers.GameManager;
			import com.uralys.tribes.renderers.Pawn;
			import com.uralys.tribes.windows.MessageWindow;
			import com.uralys.tribes.windows.ReportsWindow;
			import com.uralys.utils.Utils;
			
			import flash.sampler.getInvocationCount;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.core.FlexGlobals;
			import mx.effects.easing.Quadratic;
			import mx.events.ItemClickEvent;
			import mx.graphics.GradientEntry;
			import mx.graphics.GradientStroke;
			import mx.graphics.LinearGradientStroke;
			import mx.graphics.RadialGradientStroke;
			import mx.graphics.SolidColor;
			import mx.graphics.SolidColorStroke;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			
			import spark.components.supportClasses.ItemRenderer;
			import spark.primitives.Ellipse;
			import spark.primitives.Line;


			//---------------------------------------------------------------------------------------//
			
			[Bindable] public var selectedCity:City;
			[Bindable] private var selectedUnit:Unit;
			
			//----------------------------------------------------------//

			protected function init():void
			{
				Session.timer.start();

				limitLeft = Session.MAP_WIDTH - mapPositioner.width;
				limitUp = Session.MAP_HEIGHT - mapPositioner.height;
				
				initBoard();
				
				currentState = 'classic';
			}
			
			//---------------------------------------------------------------------------------------------------//
			// click sur une ville dans la barre laterale ou dans la page du profile
			public function onCityClick(event:ItemClickEvent):void
			{
				var city:City = event.currentTarget.selectedItem;
				mapPositioner.x = Session.MAP_WIDTH/2 
									- city.x * (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4) 
									- Numbers.LAND_WIDTH/2;
				mapPositioner.y = Session.MAP_HEIGHT/2 
									- city.y * (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2) 
									- Numbers.LAND_HEIGHT/2;
				
				checkToLoadCases(Session.MAP_WIDTH/2 - mapPositioner.x, Session.MAP_HEIGHT/2 - mapPositioner.y);
				
				return;
			}
			
			// click sur une unitÃ© dans la barre laterale ou dans la page du profile
			public function onMyUnitClick(event:ItemClickEvent):void
			{
				var unit:Unit = event.currentTarget.selectedItem;
				unit.currentCaseUID = (unit.moves.getItemAt(0) as com.uralys.tribes.entities.Move).caseUID;
				
				mapPositioner.x = Session.MAP_WIDTH/2 
									- Utils.getXFromCaseUID(unit.currentCaseUID) * (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4) 
									- Numbers.LAND_WIDTH/2;
				mapPositioner.y = Session.MAP_HEIGHT/2 
									- Utils.getYFromCaseUID(unit.currentCaseUID) * (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2) 
									- Numbers.LAND_HEIGHT/2;
				
				checkToLoadCases(Session.MAP_WIDTH/2 - mapPositioner.x, Session.MAP_HEIGHT/2 - mapPositioner.y);
				
				return;
			}
			
			//---------------------------------------------------------------------------------------------------//

			private function checkToLoadCases(x:int, y:int):void
			{
				if(x < Session.LEFT_LIMIT_LOADED
				|| x > Session.RIGHT_LIMIT_LOADED 
				|| y < Session.TOP_LIMIT_LOADED 
				|| y > Session.BOTTOM_LIMIT_LOADED)
				{
					var centerX:int = x / (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4); 
					var centerY:int = y / (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2);
					
					GameManager.getInstance().loadCases(centerX, centerY);
				}
			}
			
			//---------------------------------------------------------------------//
			
			// click sur une armee dans la barre laterale
			// ou dans la liste sous 'enter city'
			public function onUnitClick():void
			{
				if(selectedUnit.status == Unit.TO_BE_CREATED)
					return;

				if(selectedUnit.ownerStatus != Unit.PLAYER)
					return;
				
				if(Session.MOVE_A_UNIT)
					return;
				
				mapPositioner.x = Session.MAP_WIDTH/2 
									- Utils.getXFromCaseUID(selectedUnit.currentCaseUID) * (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4) 
									- Numbers.LAND_WIDTH/2;
				mapPositioner.y = Session.MAP_HEIGHT/2 
									- Utils.getYFromCaseUID(selectedUnit.currentCaseUID) * (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2) 
									- Numbers.LAND_WIDTH/2;
				
				
				Session.MOVE_A_UNIT = true;
				currentState = "moveUnit";
				
				refreshCurrentMoves();
			}
			
			private function refreshCurrentMoves():void
			{
				UnitMover.getInstance().refreshMoves(selectedUnit);
				UnitMover.getInstance().resetPendingMoves(selectedUnit);
				BoardDrawer.getInstance().removeAllUnitMovesImages();
				
				var xPreviousMove:int = -1;
				var yPreviousMove:int = -1;
				var now:Number = new Date().getTime();
				
				for each(var move:com.uralys.tribes.entities.Move in selectedUnit.moves)
				{
					var displayProgress:Boolean = move.timeFrom < now && move.timeTo > now;
					BoardDrawer.getInstance().addMoveImages(move, xPreviousMove, yPreviousMove, displayProgress);
					
					xPreviousMove = Utils.getXFromCaseUID(move.caseUID);
					yPreviousMove = Utils.getYFromCaseUID(move.caseUID); 
				}	
			}
			
			//-----------------------------------------------------------//
			
			// set params est appelee avant creationComplete (init())
			public function set params(args:Array):void
			{
				FlexGlobals.topLevelApplication.loginWindow.closeWindow();
				selectedCity = Session.player.cities.getItemAt(0) as City;
				refreshUnits();
				
				if(Session.player.name == "New Player"){
					showChangeName.play();
				}
			}
			
			public function refreshUnits():void
			{
				var unitUIDsToDelete:ArrayCollection = new ArrayCollection();
				var uidsToRemove:ArrayCollection = new ArrayCollection();
				
				trace("refreshUnits : " + Session.player.units.length);
				
				for each(var unit:Unit in Session.player.units)
				{
					var unitIsPrepared:Boolean = GameManager.getInstance().prepareUnitForClientSide(unit);
					trace("status : " + unit.status);
					
					if(!unitIsPrepared){
						trace("unit is not prepared");
						if(unit.status == Unit.DESTROYED){
							trace("unit is to be deleted");							
							unitUIDsToDelete.addItem(unit.unitUID);
						}
						
						uidsToRemove.addItem(unit.unitUID);
					}
				}
				
				for each(var unitToRemoveUID:String in uidsToRemove){
					trace("removing : " + unitToRemoveUID);
					var indexToRremove:int = -1;
					
					for each(var unit:Unit in Session.player.units){
						if(unit.unitUID == unitToRemoveUID){
							indexToRremove = Session.player.units.getItemIndex(unit);
							break;
						}
					}
					
					if(indexToRremove >= 0)
						Session.player.units.removeItemAt(indexToRremove);
				}
				
				GameManager.getInstance().deleteUnits(unitUIDsToDelete);
			}
			
			
			//-----------------------------------------------------------//
			
			// appelee apres le BoardDrawer.refreshDisplay, qui raffraichit toutes les currentCaseUID des units de toutes les cases.
			public function refreshUnitsInCity(unitBeingMovedUID:String = null):void
			{
				trace("refreshUnitsInCity");
				
				for each(var city:City in Session.player.cities){
					city.merchant = null;
					city.army = null;
					city.unitsToFeed = 0;
				}
				
				for each(var unit:Unit in Session.player.units)
				{
					if(unitBeingMovedUID != null
					&& unitBeingMovedUID == unit.unitUID){
						// pas forcemement le meilleur endroit, mais ils est appele a chaque UnitMover.moveIsDone
						// et ca refresh unit.currentCaseUID
						UnitMover.getInstance().refreshMoves(unit);
					}
					
					if(unit.status == Unit.DESTROYED)
						continue;

					if(unit.type == 2){
						for each(var city:City in Session.player.cities)
						{
							if(Utils.getXFromCaseUID(unit.currentCaseUID) == city.x && Utils.getYFromCaseUID(unit.currentCaseUID) == city.y){
								city.merchant = unit;
								city.unitsToFeed += unit.size;
								break;
							}
						}
					}
					
					else if(unit.type == 1){
						for each(var city:City in Session.player.cities)
						{
							if(Utils.getXFromCaseUID(unit.currentCaseUID) == city.x && Utils.getYFromCaseUID(unit.currentCaseUID) == city.y){
								city.army = unit;
								city.unitsToFeed += unit.size;
								break;
							}
						}
					}
					
				}
				
			}
			
			//-----------------------------------------------------------//
			
			protected function initCitiesList():void{
				citiesList.addEventListener(ItemClickEvent.ITEM_CLICK, onCityClick);
			}

			protected function initUnitsList():void{
				unitsList.addEventListener(ItemClickEvent.ITEM_CLICK, onMyUnitClick);
			}
			
			// ------------------------------------------------------------------------// 
			// 		map scrolling
			
			private var mayDrag:Boolean = false;
			private var isDragging:Boolean = false;
			private var draggingImageXFrom:int;
			private var draggingImageYFrom:int;
			private var limitLeft:int;
			private var limitUp:int;
			
			protected function mouseDown(event:MouseEvent):void
			{
				mayDrag = true;
				draggingImageXFrom = event.currentTarget.mouseX; // le x de la souris sur le mapContainer
				draggingImageYFrom = event.currentTarget.mouseY; // le y de la souris sur le mapContainer
				
				if(Session.MOVE_A_UNIT){
					// manipulation d'une unite
				}
			}
			
			protected function mouseMove(event:MouseEvent):void
			{
				if(mayDrag)
					isDragging = true;
				
				if(Session.MOVE_A_UNIT){
					// manipulation d'une unite
				}
				
				if(isDragging)
				{
					// on decale l'image du nombre de pixels du dernier mouvement
					// donc elle suit bien la souris et event.localXY a bien lieu au meme endroit sur l'image apres chaque mouseMove
					mapPositioner.x += (event.currentTarget.mouseX - draggingImageXFrom);
					mapPositioner.y += (event.currentTarget.mouseY - draggingImageYFrom);
				}
			}
			
			protected function doubleClick(event:MouseEvent):void
			{
				mouseUp(event);
				
				if(Session.CURRENT_CASE_SELECTED.army != null)
					selectedUnit = Session.CURRENT_CASE_SELECTED.army; 
				else if(Session.CURRENT_CASE_SELECTED.merchants != null)
					selectedUnit = Session.CURRENT_CASE_SELECTED.merchants; 
				
				if(selectedUnit != null)
					onUnitClick();
			}
				
			protected function mouseUp(event:MouseEvent):void
			{
				mayDrag = false;
				
				enterCityForm.visible = false;
				enterCityForm.includeInLayout = false;
				buildCityForm.visible = false;
				buildCityForm.includeInLayout = false;
				
				if(!isDragging && Session.MOVE_A_UNIT){
					newMoveAdded = UnitMover.getInstance().recordMove(selectedUnit);
				}
				else{
					Session.CURRENT_SELECTION_X = Session.COORDINATE_X;
					Session.CURRENT_SELECTION_Y = Session.COORDINATE_Y;
					
					Session.CURRENT_CASE_SELECTED = Session.map[Session.CURRENT_SELECTION_X][Session.CURRENT_SELECTION_Y];
					Session.CURRENT_CASE_SELECTED.tryRefresh();
				}
				
				isDragging = false;
				Mouse.show();
				checkToLoadCases(Session.MAP_WIDTH/2 - mapPositioner.x, Session.MAP_HEIGHT/2 - mapPositioner.y);
			}
			
			// ------------------------------------------------------------------------// 
			// 	minimap scrolling
			
			protected function mouseUpMiniMap(event:MouseEvent):void{
				isDragging = false;
			}

			protected function mouseDownMiniMap(event:MouseEvent):void{
				mapPositioner.x = 250 - event.localX*15;
				mapPositioner.y = 250 - event.localY*15;
				
				isDragging = true;
			}

			protected function mouseMoveMiniMap(event:MouseEvent):void{
				if(isDragging){
					mapPositioner.x = Session.MAP_WIDTH/2 - event.localX*15;
					mapPositioner.y = Session.MAP_WIDTH/2 - event.localY*15;
				}
			}
				
			//==============================================================================================================//
			// 	Game management
			
			private function initBoard():void
			{
				if(selectedCity == null){
					FlexGlobals.topLevelApplication.message('GAME OVER ON THIS SERVER', 700);
					Session.GAME_OVER = true;
					
					selectedCity = new City();
					selectedCity.x = 100;
					selectedCity.y = 100;
				}
				
				//------------------------------------------------------------//

				Session.board = this;

				/*
					1 - loadItems
					2 - calculate missed steps
					3 - save lastmissed step
					4 - load cases
				*/
				GameManager.getInstance().loadItems();
				
				mapPositioner.x = Session.MAP_WIDTH/2 - (selectedCity.x * (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4) + Numbers.LAND_WIDTH/2)
				mapPositioner.y = Session.MAP_WIDTH/2 - (selectedCity.y * (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2) + Numbers.LAND_HEIGHT/2)

				//------------------------------------------------------------//
			
				try{
					FlexGlobals.topLevelApplication.createConflicts();	
				}
				catch(error:Error){}

				//------------------------------------------------------------//
				
			}
	
			//----------------------------------------------------------------------------------------//

			[Bindable]
			private var newMoveAdded:Boolean = false;
			
			private function validateUnitMoves(cancel:Boolean):void
			{
				Session.MOVE_A_UNIT = false;
				Session.REMOVING_MOVES_ENABLE = true;
				
				if(!cancel){
					if(removingMoves)
						selectedUnit.moves.getItemAt(selectedUnit.moves.length-1).timeTo = -1;
					
					UnitMover.getInstance().validatePendingMoves(selectedUnit);					
					GameManager.getInstance().updateUnit(selectedUnit);
					
				}
				else if(removingMoves){
					for(var i:int = movesBeingRemoved.length-1; i >= 0; i--){
						selectedUnit.moves.addItem(movesBeingRemoved[i]);
					}

					movesBeingRemoved = [];
				}

				selectedUnit = null;
				currentState = "classic";
				newMoveAdded = false;
				removingMoves = false;
				
				BoardDrawer.getInstance().removeAllUnitMovesImages();
				
			}

			private var removingMoves:Boolean = false;
			private var movesBeingRemoved:Array = [];
			private function deleteLastMove():void
			{
				removingMoves = true;
				newMoveAdded = true;
				
				movesBeingRemoved.push(selectedUnit.removeLastMove());
				refreshCurrentMoves();
			}
			
			//----------------------------------------------------------------------------------------//
			
			public function showBuildCity(merchant:Unit):void
			{
				if(Session.MOVE_A_UNIT){
					return;
				}
				
				selectedUnit = merchant;
				
				buildCityForm.includeInLayout = true;
				buildCityForm.visible = true;
			}

			/**
			 * le BoardClickListener regarde si il y a une ville dans la case clickee et arrive ici
			 */ 
			public function showEnterCity(city:City):void{
				if(Session.MOVE_A_UNIT){
					return;
				}
				
				for each(var cityInSession:City in Session.player.cities){
					if(cityInSession.cityUID == city.cityUID){
						selectedCity = cityInSession;
						break;
					}
				}
				
				// on calcule si ce n'a pas Ã©tÃ© fait avant
				GameManager.getInstance().calculateCityData(false, false, selectedCity, false);
				
				enterCityForm.includeInLayout = true;
				enterCityForm.visible = true;				
				enterCityButton.enabled = selectedCity.beginTime < new Date().getTime();
				enterCityButtonAvailableLabel.text = Translations.READY.getItemAt(Session.LANGUAGE) + " : " + new Date(selectedCity.beginTime);
				
			}
			
			private function enterCity(event:MouseEvent):void
			{
				cityForm.updateWorkersProgressBar();
				cityForm.updateSmithsProgressBar();
				goLeft.play();
				appearCity.play();
			}
			
			private function buildCity():void
			{
				trace("Build a city | " + Session.CURRENT_CASE_SELECTED.caseUID);
				
				var city:City = new City();
				city.cityUID = "new";
				city.name = "Ville en construction";
				city.gold = selectedUnit.gold;
				city.wheat = selectedUnit.wheat;
				city.wood = selectedUnit.wood - (Numbers.CITY_WOOD_BASE_PRICE + selectedUnit.size * 10);
				city.iron = selectedUnit.iron - (Numbers.CITY_IRON_BASE_PRICE + selectedUnit.size * 10);
				city.population = selectedUnit.size;
				
				city.bowStock = selectedUnit.bows;
				city.swordStock = selectedUnit.swords;
				city.armorStock = selectedUnit.armors;
				
				city.x = Utils.getXFromCaseUID(Session.CURRENT_CASE_SELECTED.caseUID);
				city.y = Utils.getYFromCaseUID(Session.CURRENT_CASE_SELECTED.caseUID);
				
				city.beginTime = new Date().getTime() + Numbers.TIME_TO_BUILD_A_CITY;
				
				try{
					Session.player.units.removeItemAt(Session.player.units.getItemIndex(selectedUnit));	
				}
				catch(e:Error){
					// cest qd on reclick sur buildcity une deuxieme fois : index -1 outofbounds
					// todo : empecher l'affichage du bouton build bordel
					return;
				}
				BoardDrawer.getInstance().drawCity(city);
				
				Session.player.cities.addItem(city);
				
				buildCityForm.visible = false;
				buildCityForm.includeInLayout = false;
				
				selectedUnit.gold = 0;
				selectedUnit.iron = 0;
				selectedUnit.wood = 0;
				selectedUnit.wheat = 0;
				selectedUnit.armors = 0;
				selectedUnit.bows = 0;
				selectedUnit.swords = 0;
				selectedUnit.endTime = 1;
				
				try{
					Session.CURRENT_CASE_SELECTED.merchants = null;
					Session.CURRENT_CASE_SELECTED.forceRefresh();
				}
				catch(e:Error){}
				
				trace("build city on ["+city.x+"]["+city.y+"]");
				GameManager.getInstance().buildCity(city, selectedUnit);
			}

			//-----------------------------------------------------------//

			private function saveCityAndGoBackToBoard():void
			{				
				trace("-----");
				trace("saveCityAndGoBackToBoard");
				// on force la validation du marchand si il existe et qu'il reste dans la ville
				// si il est en mouvement, on ne peut pas l'editer donc pas besoin d'appeler le validateMerchants (qui casserait tout en placant le timeTo Ã  -1) 
				if(selectedCity.merchant != null 
				&& (selectedCity.merchant.moves.length == 1 || selectedCity.merchant.status == Unit.INTERCEPTED_ON_THIS_CASE)){
					for each(var m:com.uralys.tribes.entities.Move in selectedCity.merchant.moves){
						trace("selectedCity.merchant.move : " + m.moveUID);
					}
					GameManager.getInstance().validateMerchants(selectedCity);
				}

				// IDEM pour army
				if(selectedCity.army != null 
				&& (selectedCity.army.moves.length == 1 || selectedCity.army.status == Unit.INTERCEPTED_ON_THIS_CASE)){
					for each(var m:com.uralys.tribes.entities.Move in selectedCity.army.moves){
						trace("selectedCity.army.move : " + m.moveUID);
					}
					GameManager.getInstance().validateArmy(selectedCity);
				}
				
				GameManager.getInstance().saveCity(selectedCity);
				hideCity.play();
				comeBack.play();
			}
			
			//-------------------------------------------------------------------------//
			
			public var messageWindow:MessageWindow = new MessageWindow();
			private function openWriteMessage():void
			{
				messageWindow.closeWindow(); 
				
				PopUpManager.addPopUp(messageWindow, this, false);
				PopUpManager.centerPopUp(messageWindow);
			}
//			
//			private function saveTurn():void{
//				
//				Session.TURN_SAVING_DONE = false;
//				
//				//------------------------------------------------------------------//
//
//				for each(var city:City in Session.currentPlayer.cities){
//					
//					city.wheat += city.wheatEarned - city.wheatSpent;
//					city.wood += city.woodEarned - city.woodSpent;
//					city.iron += city.ironEarned - city.ironSpent;
//					city.population += city.armyReleased - city.armyRaised;
//					
//					for each(var equipment:Equipment in city.equipmentStock){
//						switch(equipment.item.name){
//							case "bow" :
//								equipment.size = city.bowStock
//												+ city.bowsRestored
//												- city.bowsEquiped
//												+ city.bowWorkers * equipment.item.peopleRequired;
//								
//								break;
//							case "sword" :
//								equipment.size = city.swordStock
//												+ city.swordsRestored
//												- city.swordsEquiped
//												+ city.swordWorkers * equipment.item.peopleRequired;
//								break;
//							case "armor" :
//								equipment.size = city.armorStock
//											+ city.armorsRestored
//											- city.armorsEquiped
//											+ city.armorWorkers * equipment.item.peopleRequired;
//								break;
//						}
//					}
//
//					for each(var smith:Smith in city.smiths){
//						switch(smith.item.name){
//							case "bow" :
//								smith.people = city.bowWorkers;
//								break;
//							case "sword" :
//								smith.people = city.swordWorkers;
//								break;
//							case "armor" :
//								smith.people = city.armorWorkers;
//								break;
//						}
//					}
//				}
//				
//				for each(var army:Army in Session.currentPlayer.armies){
//					if(army.armyUID == "new"){
//						var bows:Equipment = new Equipment();
//						var swords:Equipment = new Equipment();
//						var armors:Equipment = new Equipment();
//						
//						bows.size = army.bows;
//						swords.size = army.swords;
//						armors.size = army.armors;
//						
//						for each(var equipment:Equipment in city.equipmentStock){
//							switch(equipment.item.name){
//								case "bow" :
//									bows.item = equipment.item;
//									break;
//								case "sword" :
//									swords.item = equipment.item;
//									break;
//								case "armor" :
//									armors.item = equipment.item;
//									break;
//							}
//						}
//						
//						army.equipments.addItem(bows);
//						army.equipments.addItem(swords);
//						army.equipments.addItem(armors);
//					}
//					else{
//						for each(var equipment:Equipment in army.equipments){
//							switch(equipment.item.name){
//								case "bow" :
//									equipment.size = army.bows;
//									break;
//								case "sword" :
//									equipment.size = army.swords;
//									break;
//								case "armor" :
//									equipment.size = army.armors;
//									break;
//							}
//						}
//					}
//					
//					// on ne passe pas les info graphiques par BlazesDS : inutile et surtout ca casse tout (objets enormes passes en AMF, ce qui casse le transfert)
//					army.armyCircle = null;
//					army.ellipseTo = null;
//					army.lineTo = null;
//					army.tmpLandSquare = null;
//				}
//				
//				for each(var merchant:Army in Session.currentPlayer.merchants){
//					
//					// on ne passe pas les info graphiques par BlazesDS : inutile et surtout ca casse tout (objets enormes passes en AMF, ce qui casse le transfert)
//					merchant.armyCircle = null;
//					merchant.ellipseTo = null;
//					merchant.lineTo = null;
//					merchant.tmpLandSquare = null;
//				}
//				
//				//------------------------------------------------------------------//
//				
//				FlexGlobals.topLevelApplication.conflictsWindow.conflictsGroup.removeAllElements();
//				Session.currentPlayer.lastTurnPlayed ++;
//				GameManager.getInstance().saveTurn(Session.currentPlayer);
//				Pager.getInstance().goToPage(Home, Home.CURRENT_GAMES, Session.GAMES_PLAYING);
//			}
// 
			//================================================================================//
//			
//			private function calculateLands():void{
//				for each (var player:Player in game.players){
//					var lands:ArrayCollection = new ArrayCollection();
//					for each (var city:City in player.cities){
//						
//						// de 0 a 29
//						var cityLandXmin:int = Math.floor((city.x - city.radius)/Numbers.LAND_WIDTH);	
//						var cityLandXmax:int = Math.floor((city.x + city.radius)/Numbers.LAND_WIDTH);	
//						var cityLandYmin:int = Math.floor((city.y - city.radius)/Numbers.LAND_HEIGHT);	
//						var cityLandYmax:int = Math.floor((city.y + city.radius)/Numbers.LAND_HEIGHT);
//						
//						for(var i:int=cityLandXmin; i <= cityLandXmax; i++){
//							for(var j:int=cityLandYmin; j <= cityLandYmax; j++){
//								var landNumber:int = mapPositioner.width/Numbers.LAND_WIDTH * j + i;
//								lands.addItem(landNumber);
//							}
//						}
//					}
//
//					for each(var landNumberOwnedYet:int in player.lands){
//						var found:Boolean = false;
//						
//						for each(var landNumberFromPreviousCities:int in lands){
//							if(landNumberFromPreviousCities == landNumberOwnedYet){
//								found = true;
//								break;
//							}
//						}
//						
//						if(!found){
//							lands.addItem(landNumberOwnedYet);
//						}
//					}
//					
//					player.lands = lands;
//					if(Session.player.uralysUID == player.uralysUID) // refresh
//						Session.player.lands = player.lands;
//					
//				}
//			}
//			

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:Move id="goLeft"
				 xTo="-1500"
				 target="{main}"
				 duration="350"
				 easingFunction="{Quadratic.easeIn}"/>
		<mx:Move id="comeBack"
				 xTo="0"
				 target="{main}"
				 easingFunction="{Quadratic.easeIn}"/>

		<mx:Move id="appearCity"
				 xTo="0"
				 target="{cityGroup}"
				 easingFunction="{Quadratic.easeIn}"/>
		<mx:Move id="hideCity"
				 xTo="1500"
				 target="{cityGroup}"
				 easingFunction="{Quadratic.easeIn}"/>
		
		
		<s:Move id="hideChangeName" target="{changeNameWindow}" xTo="-375"/>
		<s:Move id="showChangeName" target="{changeNameWindow}" xTo="0"/>

		<s:Move id="hideCityChangeName" target="{changeCityNameWindow}" xTo="-375"/>
		<s:Move id="showCityChangeName" target="{changeCityNameWindow}" xTo="0"/>
		
	</fx:Declarations>
	
	<s:Group id="main" width="100%" height="100%">
		
		<s:VGroup horizontalAlign="left" top="70" left="15">
			<s:Label text="{Translations.MY_CITIES.getItemAt(Session.LANGUAGE)}"/>
			<s:Scroller height="200">
				<s:Group>
					<s:List id="citiesList"
							itemRenderer="com.uralys.tribes.renderers.CityListRenderer"
							dataProvider="{Session.player.cities}"
							borderVisible="false"
							width="240"
							contentBackgroundAlpha="0"
							creationComplete="initCitiesList()">
						<s:layout>
							<s:VerticalLayout gap="1" useVirtualLayout="true" />
						</s:layout>
					</s:List>
				</s:Group>
			</s:Scroller>
			<s:Label text="{Translations.MY_UNITS.getItemAt(Session.LANGUAGE)}"
					 visible="{Session.player.units.length > 0}"/>
			<s:Scroller height="200">
				<s:Group>
					<s:List id="unitsList"
							itemRenderer="com.uralys.tribes.renderers.UnitListRenderer"
							dataProvider="{Session.player.units}"
							borderVisible="false"
							width="240"
							contentBackgroundAlpha="0"
							creationComplete="initUnitsList()">
						<s:layout>
							<s:VerticalLayout gap="1" useVirtualLayout="true" />
						</s:layout>
					</s:List>
				</s:Group>
			</s:Scroller>
		</s:VGroup>
		
		<!-- =============================================================================================== -->
		<!-- Units Tab -->
		
		<s:VGroup id="enterCityForm"
				  top="70" 
				  x="{boardImage.x+Session.MAP_WIDTH + 25}"
				  visible="false"
				  includeInLayout="false"
				  excludeFrom="moveUnit"
				  horizontalAlign="center"
				  paddingTop="5">
			<s:HGroup>
				<s:Label text="{Translations.CITY.getItemAt(Session.LANGUAGE)} : {Session.CURRENT_CASE_SELECTED.city.name} ({Session.CURRENT_CASE_SELECTED.city.population})"
						  click="if(Session.player.playerUID == Session.CURRENT_CASE_SELECTED.landOwner.playerUID)showCityChangeName.play()"/>
				<mx:Image source="{ImageContainer.getImage(ImageContainer.EDIT)}"
					  click="showCityChangeName.play()"
					  visible="{Session.player.playerUID == Session.CURRENT_CASE_SELECTED.landOwner.playerUID}"/>
			</s:HGroup>
			<s:HGroup>
				<renderers:PlayerName player="{Session.player.playerUID == Session.CURRENT_CASE_SELECTED.landOwner.playerUID ? Session.player : Session.CURRENT_CASE_SELECTED.landOwner}"/>
				<mx:Image source="{ImageContainer.getImage(ImageContainer.EDIT)}"
					  click="openWriteMessage()"
					  visible="{Session.player.playerUID != Session.CURRENT_CASE_SELECTED.landOwner.playerUID}"/>
			</s:HGroup>
			
			<s:Button label="{Translations.ENTER_CITY.getItemAt(Session.LANGUAGE)}" 
					  id="enterCityButton"
					  click="enterCity(event)"
					  skinClass="com.uralys.tribes.skins.CustomButtonSkin"
					  visible="{Session.player.playerUID == Session.CURRENT_CASE_SELECTED.landOwner.playerUID}"/>
			<s:Label id="enterCityButtonAvailableLabel" visible="{!enterCityButton.enabled}"/>
		</s:VGroup>

		<s:TabBar id="tabs" dataProvider="{viewstack}"
				  top="210" right="135"
				  excludeFrom="moveUnit"
				  skinClass="com.uralys.tribes.skins.CustomTabBarSkin"
				  visible="{Session.CURRENT_CASE_SELECTED != null 
				  &amp;&amp; 
				  			((Session.CURRENT_CASE_SELECTED.army !=null 
				  			&amp;&amp; Session.CURRENT_CASE_SELECTED.army.size > 0)
				  				||
				  			(Session.CURRENT_CASE_SELECTED.merchants !=null 
				  			&amp;&amp; Session.CURRENT_CASE_SELECTED.merchants.size > 0))}"/>
		
		<mx:ViewStack id="viewstack" width="200" top="240" right="95"
					  excludeFrom="moveUnit">
			
			<s:NavigatorContent label="{Translations.ARMY.getItemAt(Session.LANGUAGE)}">
				<renderers:ArmyRenderer army="{Session.CURRENT_CASE_SELECTED.army}" 
										visible="{Session.CURRENT_CASE_SELECTED != null &amp;&amp; Session.CURRENT_CASE_SELECTED.army !=null &amp;&amp; Session.CURRENT_CASE_SELECTED.army.size > 0}"
										click="selectedUnit = Session.CURRENT_CASE_SELECTED.army; onUnitClick();"/>
			</s:NavigatorContent>
			<s:NavigatorContent label="{Translations.MERCHANTS.getItemAt(Session.LANGUAGE)}">
				<renderers:MerchantsRenderer merchant="{Session.CURRENT_CASE_SELECTED.merchants}" 
											 visible="{Session.CURRENT_CASE_SELECTED != null &amp;&amp; Session.CURRENT_CASE_SELECTED.merchants !=null &amp;&amp; Session.CURRENT_CASE_SELECTED.merchants.size > 0}"
											 click="selectedUnit = Session.CURRENT_CASE_SELECTED.merchants; onUnitClick();"/>
			</s:NavigatorContent>
		</mx:ViewStack>
		<s:Label visible="{Session.CURRENT_CASE_SELECTED != null &amp;&amp; Session.CURRENT_CASE_SELECTED.pawn.status == Pawn.CONQUERING_LAND}"
				 text="{Translations.CONQUERING_LAND.getItemAt(Session.LANGUAGE)}"
				 bottom="200"
				 right="95"/>
		
		<s:CheckBox id="checkboxBars"
					selected="@{Session.LANDS_VISIBLE}" 
					label="{Translations.SHOW_LANDS.getItemAt(Session.LANGUAGE)}"
					x="{viewstack.x}"
					bottom="70"/>
		<s:CheckBox id="checkboxLands"
					selected="@{Session.SHOW_MOVES_PROGRESS_BARS}" 
					label="{Translations.PROGRESS_BARS.getItemAt(Session.LANGUAGE)}"
					x="{viewstack.x}"
					bottom="44"/>

		<s:VGroup top="150" right="95"
				  excludeFrom="classic"
				  horizontalAlign="center">
			<s:Label text="{Translations.WAY_SELECTION.getItemAt(Session.LANGUAGE)}"/>
			<s:Button label="{Translations.VALIDATE.getItemAt(Session.LANGUAGE)}" click="{validateUnitMoves(false)}" visible="{selectedUnit != null}" enabled="{newMoveAdded}" skinClass="com.uralys.tribes.skins.CustomButtonSkin"/>
			<s:Button label="{Translations.CANCEL.getItemAt(Session.LANGUAGE)}" click="{validateUnitMoves(true)}" visible="{selectedUnit != null}" skinClass="com.uralys.tribes.skins.CustomButtonSkin"/>
			<s:Button label="{Translations.DELETE_LAST_MOVE.getItemAt(Session.LANGUAGE)}" 
					  click="{deleteLastMove()}"
					  enabled="{Session.REMOVING_MOVES_ENABLE &amp;&amp; selectedUnit != null &amp;&amp; selectedUnit.moves.length &gt; 2}" 
					  skinClass="com.uralys.tribes.skins.CustomButtonSkin"/>
		</s:VGroup>
		
		<s:VGroup id="buildCityForm"
				  top="150" right="95"
				  visible="false"
				  includeInLayout="false"
				  excludeFrom="moveUnit">
			<s:Button label="{Translations.BUILD_HERE.getItemAt(Session.LANGUAGE)}" click="buildCity()" skinClass="com.uralys.tribes.skins.CustomButtonSkin"/>
		</s:VGroup>
		
		
		<!-- =============================================================================================== -->
		
		<!--
		<s:Button label="{Translations.CONFLICT.getItemAt(Session.LANGUAGE)}s" click="{FlexGlobals.topLevelApplication.showconflicts.play()}" right="10"/>
		-->
		<s:HGroup width="100%" horizontalAlign="center" paddingTop="5">
			<s:Label text="X : {Session.COORDINATE_X}"/>
			<mx:Spacer width="200"/>
			<s:Label text="Y : {Session.COORDINATE_Y}"/>
		</s:HGroup>

		<!-- =============================================================================================== -->
		<!--
		<s:HGroup width="200" height="200" horizontalAlign="center"
				  bottom="45"
				  right="150">
			<s:Group width="200" height="200"
					 id="minimap"
					 clipAndEnableScrolling="true"
					 mouseDown="mouseDownMiniMap(event)"
					 mouseMove="mouseMoveMiniMap(event)"
					 mouseOut="mouseUpMiniMap(event)"
					 mouseUp="mouseUpMiniMap(event)">
				<s:Rect left="0" right="0" top="0" bottom="0" radiusX="5" radiusY="5">
					<s:stroke>
						<s:SolidColorStroke color="0x000000" weight="1" scaleMode="normal"/>
					</s:stroke>			
					<s:fill>
						<s:SolidColor color="{0x000000}" alpha="0.8"/>
					</s:fill>
				</s:Rect>
				<s:Rect x="{-mapPositioner.x/15}" y="{-mapPositioner.y/15}" width="33" height="33">
					<s:stroke>
						<s:SolidColorStroke color="0xffffff" weight="1" scaleMode="normal"/>
					</s:stroke>		
					<s:fill>
						<s:SolidColor color="{0xffffff}" alpha="0.2"/>
					</s:fill>			
				</s:Rect>
			</s:Group>
		</s:HGroup>
		-->
		<s:Group width="100%">
			<s:HGroup width="100%" horizontalAlign="center" paddingTop="50">
				<s:Group width="{Session.MAP_WIDTH}" height="{Session.MAP_HEIGHT}"
						 id="boardImage"
						 clipAndEnableScrolling="true"	  
						 useHandCursor="true">
					<s:Group id="mapPositioner" 
						  buttonMode="true"
						  width="{Numbers.LAND_WIDTH*400}"
						  height="{Numbers.LAND_HEIGHT*400}"
						  mouseDown="mouseDown(event)"
						  mouseMove="mouseMove(event)"
						  mouseUp="mouseUp(event)"
						  doubleClick="doubleClick(event)"
						  doubleClickEnabled="true"/>
					<s:Group id="landLayer"
							 visible="{Session.LANDS_VISIBLE}"
							 width="{Numbers.LAND_WIDTH*400}"
							 height="{Numbers.LAND_HEIGHT*400}"
							 x="{mapPositioner.x}"
							 y="{mapPositioner.y}"
							 mouseEnabled="false"
							 mouseChildren="false"
							 mouseEnabledWhereTransparent="false"/>
					<s:Group id="pawnLayer"
							 width="{Numbers.LAND_WIDTH*400}"
							 height="{Numbers.LAND_HEIGHT*400}"
							 x="{mapPositioner.x}"
							 y="{mapPositioner.y}"
							 mouseEnabled="false"
							 mouseChildren="false"
							 mouseEnabledWhereTransparent="false"/>
					<s:Group id="highlighters"
							 width="{Numbers.LAND_WIDTH*400}"
							 height="{Numbers.LAND_HEIGHT*400}"
							 x="{mapPositioner.x}"
							 y="{mapPositioner.y}"
							 mouseEnabled="false"
							 mouseChildren="true"
							 mouseEnabledWhereTransparent="false">
						
						<mx:Image id="currentMouseHighLightNormal"
								  source="{ImageContainer.getImage(ImageContainer.HIGHLIGHT_BLEU)}"
								  visible="{!Session.MOVE_A_UNIT}"
								  x="{Session.COORDINATE_X * (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4)}"
								  y="{Session.COORDINATE_Y * (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2)}"
								  mouseEnabled="false"/>

						<mx:Image id="currentMouseHighLight4UnitMoves"
								  source="{ImageContainer.getImage(ImageContainer.HIGHLIGHT_BLANC)}"
								  visible="{Session.MOVE_A_UNIT}"
								  x="{Session.COORDINATE_X * (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4)}"
								  y="{Session.COORDINATE_Y * (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2)}"
								  mouseEnabled="false"/>

						<mx:Image id="currentSelectionHighLight"
								  source="{ImageContainer.getImage(ImageContainer.HIGHLIGHT_BLANC)}"
								  x="{Session.CURRENT_SELECTION_X * (Numbers.LAND_WIDTH - Numbers.LAND_WIDTH/4)}"
								  y="{Session.CURRENT_SELECTION_Y * (Numbers.LAND_HEIGHT - Numbers.LAND_HEIGHT/2)}"
								  mouseEnabled="false"/>
						
					</s:Group>
 				</s:Group>
					
			</s:HGroup>
			<mx:Image source="{ImageContainer.MAP_BORDER_TOP}"
					  x="{boardImage.x-31}"
					  y="{boardImage.y-31}"/>
			<mx:Image source="{ImageContainer.MAP_BORDER_BOTTOM}"
					  x="{boardImage.x-31}"
					  y="{boardImage.y+Session.MAP_HEIGHT - 31}"/>
			<mx:Image source="{ImageContainer.MAP_BORDER_LEFT}"
					  x="{boardImage.x-31}"
					  y="{boardImage.y + 31}"/>
			<mx:Image source="{ImageContainer.MAP_BORDER_RIGHT}"
					  x="{boardImage.x+Session.MAP_WIDTH - 31}"
					  y="{boardImage.y + 31}"/>
		</s:Group>
	</s:Group>
	
	<!-- ====================================================================================== -->
	<!-- city -->
	
	
	<s:VGroup horizontalAlign="center" 
			  paddingTop="50"
			  id="cityGroup" 
			  width="{main.width}" 
			  height="{main.height}"
			  x="1500"
			  includeInLayout="false">
		<s:HGroup>
			<s:Button label="&lt;-- {Translations.VALIDATE_MODIFICATIONS.getItemAt(Session.LANGUAGE)}" 
					  click="{saveCityAndGoBackToBoard()}"
					  skinClass="com.uralys.tribes.skins.CustomButtonSkin"
					  enabled="{cityForm.currentState != 'recordingUnit'}"/>
			<mx:Spacer width="450"/>
		</s:HGroup>
		<renderers:CityForm 
				id="cityForm"
			    city="@{selectedCity}"/>
		<mx:Spacer height="55"/>
	</s:VGroup>
		 
	<!-- ====================================================================================== -->
	
	<mx:Image source="{ImageContainer.MINI_LOGO}" right="70" y="-7"/>
	<renderers:StepProgress top="7" left="20"/>
			  
	<mx:SWFLoader source="{ImageContainer.LOADING}" 
		 		  visible="{Session.WAIT_FOR_SERVER}"
				  x="{boardImage.x+50}"
				  y="{boardImage.y+Session.MAP_HEIGHT - 16}"
				  rotation="2"/>
	
	<!-- ====================================================================================== -->
	
	<windows:ChangeName id="changeNameWindow" x="-375" y="100" type="1"/>
	<windows:ChangeName id="changeCityNameWindow" x="-375" y="100" type="2"/>
</s:Group>
