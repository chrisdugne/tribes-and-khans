<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:forms="com.uralys.renderers.forms.*" 
		 xmlns:renderers="com.uralys.tribes.renderers.*">
	
		<fx:Script>
			<![CDATA[
				import com.uralys.tribes.commons.Numbers;
				import com.uralys.tribes.commons.Session;
				import com.uralys.tribes.commons.Translations;
				import com.uralys.tribes.core.BoardDrawer;
				import com.uralys.tribes.entities.City;
				import com.uralys.tribes.entities.Equipment;
				import com.uralys.tribes.entities.Item;
				import com.uralys.tribes.entities.Move;
				import com.uralys.tribes.entities.Smith;
				import com.uralys.tribes.entities.Unit;
				import com.uralys.tribes.tooltips.ForgeToolTip;
				import com.uralys.tribes.tooltips.MerchantToolTip;
				import com.uralys.utils.Utils;
				
				import mx.collections.ArrayCollection;
				import mx.core.FlexGlobals;
				import mx.events.ItemClickEvent;
				import mx.events.ToolTipEvent;
				import mx.utils.ObjectUtil;
				
				//----------------------------------------------------------//
				
				protected function initArmiesList():void{
					armiesList.addEventListener(ItemClickEvent.ITEM_CLICK, onArmyClick);
				}

				protected function initMerchantsList():void{
					merchantsList.addEventListener(ItemClickEvent.ITEM_CLICK, onMerchantClick);
				}

				//----------------------------------------------------------//
				
				[Bindable] public var city:City;
				[Bindable] private var army:Unit;
				[Bindable] private var merchant:Unit;

				//----------------------------------------------------------//

				protected function cityNameInputHandler(event:KeyboardEvent):void	{
					city.name = cityNameInput.text;
					BoardDrawer.getInstance().redrawTexts();
				}
				
				//-------------------------------------------------------------------------//
				
				protected function wheatWorkersCheck(newNumber:int):void	{
					
					var peopleAdded:int = newNumber - city.peopleCreatingWheat;
					
					if(city.unemployed < peopleAdded)
						newNumber = city.peopleCreatingWheat + city.unemployed;
					
					city.peopleCreatingWheat = newNumber;
					
					city.wheatEarned = Numbers.WHEAT_EARNING_COEFF * city.peopleCreatingWheat;
					wheatWorkersStepper.data = city.peopleCreatingWheat;
				}

				protected function  addAllUnemployedToWheat():void	{
					city.peopleCreatingWheat += city.unemployed;
					city.wheatEarned = Numbers.WHEAT_EARNING_COEFF * city.peopleCreatingWheat;
				}

				//-------------------------------------------------------------------------//

				protected function woodWorkersCheck(newNumber:int):void	{
					
					var peopleAdded:int = newNumber - city.peopleCreatingWood;
					
					if(city.unemployed < peopleAdded)
						newNumber = city.peopleCreatingWood + city.unemployed;
					
					city.peopleCreatingWood = newNumber;
					
					city.woodEarned = Numbers.WOOD_EARNING_COEFF * city.peopleCreatingWood;
					woodWorkersStepper.data = city.peopleCreatingWood;
				}
				
				protected function  addAllUnemployedToWood():void	{
					city.peopleCreatingWood += city.unemployed;
					city.woodEarned = Numbers.WOOD_EARNING_COEFF * city.peopleCreatingWood;
				}
				
				//-------------------------------------------------------------------------//
				
				protected function ironWorkersCheck(newNumber:int):void	{
				
					var peopleAdded:int = newNumber - city.peopleCreatingIron;
					
					if(city.unemployed < peopleAdded)
						newNumber = city.peopleCreatingIron + city.unemployed;
					
					city.peopleCreatingIron = newNumber;
					
					city.ironEarned = Numbers.IRON_EARNING_COEFF * city.peopleCreatingIron;
					ironWorkersStepper.data = city.peopleCreatingIron;
				}

				protected function  addAllUnemployedToIron():void	{
					city.peopleCreatingIron += city.unemployed;
					city.ironEarned = Numbers.IRON_EARNING_COEFF * city.peopleCreatingIron;
				}
				

				//-------------------------------------------------------------------------//
				// Market - Achat
				
				protected function wheatMarketBuyCheck(newNumber:int):void	{
					
					city.goldSpent -= (int)(city.wheatBought * Numbers.WHEAT_PRICE_BUY);
					city.wheatBought = newNumber;
					
					if((city.gold-city.goldSpent)/Numbers.WHEAT_PRICE_BUY < city.wheatBought)
						city.wheatBought = (city.gold-city.goldSpent)/Numbers.WHEAT_PRICE_BUY;
					
					city.goldSpent += (int)(city.wheatBought * Numbers.WHEAT_PRICE_BUY);
				}
				
				protected function spendAllMoneyForWheat():void	{
					var newWheatBought:int = (city.gold-city.goldSpent)/Numbers.WHEAT_PRICE_BUY;
					city.wheatBought += newWheatBought;
					city.goldSpent += (int)(newWheatBought*Numbers.WHEAT_PRICE_BUY);
				}
				
				
				protected function woodMarketBuyCheck(newNumber:int):void	{
					
					city.goldSpent -= (int)(city.woodBought * Numbers.WOOD_PRICE_BUY);
					city.woodBought = newNumber;
					
					if((city.gold-city.goldSpent)/Numbers.WOOD_PRICE_BUY < city.woodBought)
						city.woodBought = (city.gold-city.goldSpent)/Numbers.WOOD_PRICE_BUY;
					
					city.goldSpent += (int)(city.woodBought * Numbers.WOOD_PRICE_BUY);
				}
				
				protected function spendAllMoneyForWood():void	{
					var newWoodBought:int = (city.gold-city.goldSpent)/Numbers.WOOD_PRICE_BUY;
					city.woodBought += newWoodBought;
					city.goldSpent += (int)(newWoodBought*Numbers.WOOD_PRICE_BUY);
				}
				
				
				protected function ironMarketBuyCheck(newNumber:int):void	{
					
					city.goldSpent -= (int)(city.ironBought * Numbers.IRON_PRICE_BUY);
					city.ironBought = newNumber;
					
					if((city.gold-city.goldSpent)/Numbers.IRON_PRICE_BUY < city.ironBought)
						city.ironBought = (city.gold-city.goldSpent)/Numbers.IRON_PRICE_BUY;
					
					city.goldSpent += (int)(city.ironBought * Numbers.IRON_PRICE_BUY);
				}
				
				
				protected function spendAllMoneyForIron():void	{
					var newIronBought:int = (city.gold-city.goldSpent)/Numbers.IRON_PRICE_BUY;
					city.ironBought += newIronBought;
					city.goldSpent += (int)(newIronBought*Numbers.IRON_PRICE_BUY);
				}
				
				
				
				protected function bowsMarketBuyCheck(newNumber:int):void	{
					
					city.goldSpent -= (int)(city.bowsBought * Numbers.BOW_PRICE_BUY);
					city.bowsBought = newNumber;
					
					if((city.gold-city.goldSpent)/Numbers.BOW_PRICE_BUY < city.bowsBought)
						city.bowsBought = (city.gold-city.goldSpent)/Numbers.BOW_PRICE_BUY;
					
					city.goldSpent += (int)(city.bowsBought * Numbers.BOW_PRICE_BUY);
				}
				
				protected function spendAllMoneyForBows():void	{
					var newBowsBought:int = (city.gold-city.goldSpent)/Numbers.BOW_PRICE_BUY;
					city.bowsBought += newBowsBought;
					city.goldSpent += (int)(newBowsBought*Numbers.BOW_PRICE_BUY);
				}
				
				
				protected function swordsMarketBuyCheck(newNumber:int):void	{
					
					city.goldSpent -= (int)(city.swordsBought * Numbers.SWORD_PRICE_BUY);
					city.swordsBought = newNumber;
					
					if((city.gold-city.goldSpent)/Numbers.SWORD_PRICE_BUY < city.swordsBought)
						city.swordsBought = (city.gold-city.goldSpent)/Numbers.SWORD_PRICE_BUY;
					
					city.goldSpent += (int)(city.swordsBought * Numbers.SWORD_PRICE_BUY);
				}
				
				protected function spendAllMoneyForSwords():void	{
					var newSwordsBought:int = (city.gold-city.goldSpent)/Numbers.SWORD_PRICE_BUY;
					city.swordsBought += newSwordsBought;
					city.goldSpent += (int)(newSwordsBought*Numbers.SWORD_PRICE_BUY);
				}
				
				
				protected function armorsMarketBuyCheck(newNumber:int):void	{
					
					city.goldSpent -= (int)(city.armorsBought * Numbers.ARMOR_PRICE_BUY);
					city.armorsBought = newNumber;
					
					if((city.gold-city.goldSpent)/Numbers.ARMOR_PRICE_BUY < city.armorsBought)
						city.armorsBought = (city.gold-city.goldSpent)/Numbers.ARMOR_PRICE_BUY;
					
					city.goldSpent += (int)(city.armorsBought * Numbers.ARMOR_PRICE_BUY);
				}
				
				protected function spendAllMoneyForArmors():void{
					var newArmorsBought:int = (city.gold-city.goldSpent)/Numbers.ARMOR_PRICE_BUY;
					city.armorsBought += newArmorsBought;
					city.goldSpent += (int)(newArmorsBought*Numbers.ARMOR_PRICE_BUY);
				}
				
				
				protected function buy():void{
					city.gold -= city.goldSpent;
					
					city.wheat += city.wheatBought;
					city.wood += city.woodBought;
					city.iron += city.ironBought;
					city.bowStock += city.bowsBought;
					city.swordStock += city.swordsBought;
					city.armorStock += city.armorsBought;
					
					city.goldSpent = 0;
					city.wheatBought = 0;
					city.woodBought = 0;
					city.ironBought = 0;
					city.bowsBought = 0;
					city.swordsBought = 0;
					city.armorsBought = 0;
				}
				
				//-------------------------------------------------------------------------//
				// Market - Vente
				
				
				protected function wheatMarketSellCheck(newNumber:int):void	{
					
					city.goldEarned -= (int)(city.wheatSold * Numbers.WHEAT_PRICE_SELL);
					city.wheatSold = newNumber;
					
					if((city.wheat-city.wheatSold) < 0)
						city.wheatSold = city.wheat;
					
					city.goldEarned += (int)(city.wheatSold * Numbers.WHEAT_PRICE_SELL);
				}
				
				protected function sellAllWheat():void	{
					city.wheatSold = city.wheat;
					city.goldEarned += (int)(city.wheatSold*Numbers.WHEAT_PRICE_SELL);
				}

				
				protected function woodMarketSellCheck(newNumber:int):void	{
					
					city.goldEarned -= (int)(city.woodSold * Numbers.WOOD_PRICE_SELL);
					city.woodSold = newNumber;
					
					if((city.wood-city.woodSold) < 0)
						city.woodSold = city.wood;
					
					city.goldEarned += (int)(city.woodSold * Numbers.WOOD_PRICE_SELL);
				}
				
				protected function sellAllWood():void	{
					city.woodSold = city.wood;
					city.goldEarned += (int)(city.woodSold*Numbers.WOOD_PRICE_SELL);
				}
				
				protected function ironMarketSellCheck(newNumber:int):void	{
					
					city.goldEarned -= (int)(city.ironSold * Numbers.IRON_PRICE_SELL);
					city.ironSold = newNumber;
					
					if((city.iron-city.ironSold) < 0)
						city.ironSold = city.iron;
					
					city.goldEarned += (int)(city.ironSold * Numbers.IRON_PRICE_SELL);
				}
				
				protected function sellAllIron():void	{
					city.ironSold = city.iron;
					city.goldEarned += (int)(city.ironSold*Numbers.IRON_PRICE_SELL);
				}
				
				
				protected function bowsMarketSellCheck(newNumber:int):void	{
					
					city.goldEarned -= (int)(city.bowsSold * Numbers.BOW_PRICE_SELL);
					city.bowsSold = newNumber;
					
					if((city.bowStock-city.bowsSold) < 0)
						city.bowsSold = city.bowStock;
					
					city.goldEarned += (int)(city.bowsSold * Numbers.BOW_PRICE_SELL);
				}
				
				protected function sellAllBows():void	{
					city.bowsSold = city.bowStock;
					city.goldEarned += (int)(city.bowsSold*Numbers.BOW_PRICE_SELL);
				}
				
				
				protected function swordsMarketSellCheck(newNumber:int):void	{
					
					city.goldEarned -= (int)(city.swordsSold * Numbers.SWORD_PRICE_SELL);
					city.swordsSold = newNumber;
					
					if((city.swordStock-city.swordsSold) < 0)
						city.swordsSold = city.swordStock;
					
					city.goldEarned += (int)(city.swordsSold * Numbers.SWORD_PRICE_SELL);
				}
				
				protected function sellAllSwords():void	{
					city.swordsSold = city.swordStock;
					city.goldEarned += (int)(city.swordsSold*Numbers.SWORD_PRICE_SELL);
				}

				
				protected function armorsMarketSellCheck(newNumber:int):void	{
					
					city.goldEarned -= (int)(city.armorsSold * Numbers.ARMOR_PRICE_SELL);
					city.armorsSold = newNumber;
					
					if((city.armorStock-city.armorsSold) < 0)
						city.armorsSold = city.armorStock;
					
					city.goldEarned += (int)(city.armorsSold * Numbers.ARMOR_PRICE_SELL);
				}
				
				protected function sellAllArmors():void	{
					city.armorsSold = city.armorStock;
					city.goldEarned += (int)(city.armorsSold*Numbers.ARMOR_PRICE_SELL);
				}
				
				
				protected function sell():void{
					city.gold += city.goldEarned;
					
					city.wheat -= city.wheatSold;
					city.wood -= city.woodSold;
					city.iron -= city.ironSold;
					city.bowStock -= city.bowsSold;
					city.swordStock -= city.swordsSold;
					city.armorStock -= city.armorsSold;
					
					city.goldEarned = 0;
					city.wheatSold = 0;
					city.woodSold = 0;
					city.ironSold = 0;
					city.bowsSold = 0;
					city.swordsSold = 0;
					city.armorsSold = 0;
				}
				
				//-------------------------------------------------------------------------//
				// Forge
				
				protected function registerNewForgeWorkers(itemName:String, newNbWorkers:int):void	{
					
					for each(var smith:Smith in city.smiths){
						if(smith.item.name == itemName){
							// ici, on a trouve des workers pour la ressource
								
							// on met a jour le nbWorkers
							smith.people = newNbWorkers;

							// on calcule le nouveau cout
							city.woodSpent += smith.people * smith.item.wood;
							city.ironSpent += smith.people * smith.item.iron;
							
							city.refreshUnemployed();
							return;
						}
					}
				}

				protected function bowWorkersCheck(newNumber:int):void{
					
					// on enleve le precedent debit de ressources 
					city.woodSpent -= city.bowWorkers * Numbers.BOW_WOOD;
					city.ironSpent -= city.bowWorkers * Numbers.BOW_IRON;
					
					var peopleAdded:int = newNumber - city.bowWorkers;
					
					if(city.unemployed < peopleAdded)
						newNumber = city.bowWorkers + city.unemployed;
					
					city.bowWorkers = newNumber;
					
					var woodAvailable:int = city.wood - city.woodSpent;
					var ironAvailable:int = city.iron - city.ironSpent;
					
					// la depense en bois pour les arcs est plus grande que le stock de bois
					if(Numbers.BOW_WOOD * city.bowWorkers > woodAvailable)
						city.bowWorkers = Math.floor(woodAvailable/Numbers.BOW_WOOD);

					// la depense en fer pour les arcs est plus grande que le stock de fer
					if(Numbers.BOW_IRON * city.bowWorkers > ironAvailable)
						city.bowWorkers = Math.floor(ironAvailable/Numbers.BOW_IRON);
							
					
					registerNewForgeWorkers("bow", city.bowWorkers);
				}
				
				
				protected function  addAllUnemployedToBow():void	{
					
					// on enleve le precedent debit de ressources 
					city.woodSpent -= city.bowWorkers * Numbers.BOW_WOOD;
					city.ironSpent -= city.bowWorkers * Numbers.BOW_IRON;
					
					city.bowWorkers += city.unemployed;

					var woodAvailable:int = city.wood - city.woodSpent;
					var ironAvailable:int = city.iron - city.ironSpent;
					
					// la depense en bois pour les arcs est plus grande que le stock de bois
					if(Numbers.BOW_WOOD * city.bowWorkers > woodAvailable)
						city.bowWorkers = Math.floor(woodAvailable/Numbers.BOW_WOOD);
					
					// la depense en fer pour les arcs est plus grande que le stock de fer
					if(Numbers.BOW_IRON * city.bowWorkers > ironAvailable)
						city.bowWorkers = Math.floor(ironAvailable/Numbers.BOW_IRON);
					
					
					registerNewForgeWorkers("bow", city.bowWorkers);
					
				}
				
				protected function swordWorkersCheck(newNumber:int):void{
				
					// on enleve le precedent debit de ressources 
					city.woodSpent -= city.swordWorkers * Numbers.SWORD_WOOD;
					city.ironSpent -= city.swordWorkers * Numbers.SWORD_IRON;
					
					var peopleAdded:int = newNumber - city.swordWorkers;
					
					if(city.unemployed < peopleAdded)
						newNumber = city.swordWorkers + city.unemployed;
					
					city.swordWorkers = newNumber;
							
					var woodAvailable:int = city.wood - city.woodSpent;
					var ironAvailable:int = city.iron - city.ironSpent;
					
					// la depense en bois pour les epees est plus grande que le stock de bois
					if(Numbers.SWORD_WOOD * city.swordWorkers > woodAvailable)
						city.swordWorkers = Math.floor(woodAvailable/Numbers.SWORD_WOOD);
					
					// la depense en fer pour les epees est plus grande que le stock de fer
					if(Numbers.SWORD_IRON * city.swordWorkers > ironAvailable)
						city.swordWorkers = Math.floor(ironAvailable/Numbers.SWORD_IRON);

					registerNewForgeWorkers("sword", city.swordWorkers);
				}
				
				protected function  addAllUnemployedToSword():void	{
					
					// on enleve le precedent debit de ressources 
					city.woodSpent -= city.swordWorkers * Numbers.SWORD_WOOD;
					city.ironSpent -= city.swordWorkers * Numbers.SWORD_IRON;

					city.swordWorkers += city.unemployed;
					
					var woodAvailable:int = city.wood - city.woodSpent;
					var ironAvailable:int = city.iron - city.ironSpent;
					
					// la depense en bois pour les epees est plus grande que le stock de bois
					if(Numbers.SWORD_WOOD * city.swordWorkers > woodAvailable)
						city.swordWorkers = Math.floor(woodAvailable/Numbers.SWORD_WOOD);
					
					// la depense en fer pour les epees est plus grande que le stock de fer
					if(Numbers.SWORD_IRON * city.swordWorkers > ironAvailable)
						city.swordWorkers = Math.floor(ironAvailable/Numbers.SWORD_IRON);

					registerNewForgeWorkers("sword", city.swordWorkers);
				}
				
				protected function armorWorkersCheck(newNumber:int):void{
					
					// on enleve le precedent debit de ressources 
					city.woodSpent -= city.armorWorkers * Numbers.ARMOR_WOOD;
					city.ironSpent -= city.armorWorkers * Numbers.ARMOR_IRON;
					
					var peopleAdded:int = newNumber - city.armorWorkers;
					
					if(city.unemployed < peopleAdded)
						newNumber = city.armorWorkers + city.unemployed;
					
					city.armorWorkers = newNumber;
					
					var woodAvailable:int = city.wood - city.woodSpent;
					var ironAvailable:int = city.iron - city.ironSpent;
					
					// la depense en bois pour les armures est plus grande que le stock de bois
					if(Numbers.ARMOR_WOOD * city.armorWorkers > woodAvailable)
						city.armorWorkers = Math.floor(woodAvailable/Numbers.ARMOR_WOOD) ;
					
					// la depense en fer pour les armures est plus grande que le stock de fer
					if(Numbers.ARMOR_IRON * city.armorWorkers > ironAvailable)
						city.armorWorkers = Math.floor(ironAvailable/Numbers.ARMOR_IRON);
					
					registerNewForgeWorkers("armor", city.armorWorkers);
				}
				
				protected function  addAllUnemployedToArmor():void	{
					
					// on enleve le precedent debit de ressources 
					city.woodSpent -= city.armorWorkers * Numbers.ARMOR_WOOD;
					city.ironSpent -= city.armorWorkers * Numbers.ARMOR_IRON;
					
					city.armorWorkers += city.unemployed;
					
					var woodAvailable:int = city.wood - city.woodSpent;
					var ironAvailable:int = city.iron - city.ironSpent;
					
					
					// la depense en bois pour les armures est plus grande que le stock de bois
					if(Numbers.ARMOR_WOOD * city.armorWorkers > woodAvailable)
						city.armorWorkers = Math.floor(woodAvailable/Numbers.ARMOR_WOOD) ;
					
					// la depense en fer pour les armures est plus grande que le stock de fer
					if(Numbers.ARMOR_IRON * city.armorWorkers > ironAvailable)
						city.armorWorkers = Math.floor(ironAvailable/Numbers.ARMOR_IRON);
					
					registerNewForgeWorkers("armor", city.armorWorkers);
				}
				
				//---------------------------------//
				// toolTip creation pour la forge
				
				private function onCreateForgeToolTip(e:ToolTipEvent, itemName:String, woodCost:int, ironCost:int):void {
					var toolTip:ForgeToolTip = new ForgeToolTip();
					toolTip.itemName = itemName;
					toolTip.woodCost = woodCost;
					toolTip.ironCost = ironCost;
					
					e.toolTip = toolTip;
				}
				
				//---------------------------------//
				// toolTip creation pour les marchands
				
				private function onCreateMerchantToolTip(e:ToolTipEvent):void {
					var toolTip:MerchantToolTip = new MerchantToolTip();
					
					e.toolTip = toolTip;
				}
				
				
				//-------------------------------------------------------------------------//
				// merchants

				
				protected function wheatMerchantCheck(newNumber:int):void{
					
					var previousNbWheat:int = merchant.wheat;
					var newNbWheat:int = newNumber;
					
					if(newNbWheat > previousNbWheat){
						// on ajoute du ble a la caravane
						
						if(city.wheat < newNbWheat - previousNbWheat){
							// la reserve en ble n'est pas assez grande
							newNbWheat = city.wheat + previousNbWheat;
							city.wheat = 0;
						}
						else{	
							// on pioche dans la reserve de ble
							city.wheat -= newNbWheat - previousNbWheat;
						}
					}
					else{
						// on enleve du ble de la caravane
						city.wheat += previousNbWheat - newNbWheat;
					}
					
					merchant.wheat = newNbWheat;
					wheatMerchantStepper.data = merchant.wheat;
				}
				
				protected function addAllWheatToMerchant():void{
					merchant.wheat += city.wheat;
					city.wheat = 0;
				}
				
				
				protected function woodMerchantCheck(newNumber:int):void{
					
					var previousNbWood:int = merchant.wood;
					var newNbWood:int = newNumber;
					
					if(newNbWood > previousNbWood){
						// on ajoute du bois a la caravane
						
						if(city.wood < newNbWood - previousNbWood){
							// la reserve en bois n'est pas assez grande
							newNbWood = city.wood + previousNbWood;
							city.wood = 0;
						}
						else{	
							// on pioche dans la reserve de bois
							city.wood -= newNbWood - previousNbWood;
						}
					}
					else{
						// on enleve du bois de la caravane
						city.wood += previousNbWood - newNbWood;
					}
					
					merchant.wood = newNbWood;
					woodMerchantStepper.data = merchant.wood;
				}
				
				protected function addAllWoodToMerchant():void{
					merchant.wood += city.wood;
					city.wood = 0;
				}
				
				protected function ironMerchantCheck(newNumber:int):void{
					
					var previousNbIron:int = merchant.iron;
					var newNbIron:int = newNumber;
					
					if(newNbIron > previousNbIron){
						// on ajoute du fer a la caravane
						
						if(city.iron < newNbIron - previousNbIron){
							// la reserve en fer n'est pas assez grande
							newNbIron = city.iron + previousNbIron;
							city.iron = 0;
						}
						else{	
							// on pioche dans la reserve de fer
							city.iron -= newNbIron - previousNbIron;
						}
					}
					else{
						// on enleve du fer de la caravane
						city.iron += previousNbIron - newNbIron;
					}
					
					merchant.iron = newNbIron;
					ironMerchantStepper.data = merchant.iron;
				}
				
				protected function addAllIronToMerchant():void{
					merchant.iron += city.iron;
					city.iron = 0;
				}
				
				protected function goldMerchantCheck(newNumber:int):void{
					
					var previousNbGold:int = merchant.gold;
					var newNbGold:int = newNumber;
					
					if(newNbGold > previousNbGold){
						// on ajoute du fer a la caravane
						
						if(city.gold < newNbGold - previousNbGold){
							// la reserve en fer n'est pas assez grande
							newNbGold = city.gold + previousNbGold;
							city.gold = 0;
						}
						else{	
							// on pioche dans la reserve de fer
							city.gold -= newNbGold - previousNbGold;
						}
					}
					else{
						// on enleve du fer de la caravane
						city.gold += previousNbGold - newNbGold;
					}
					
					merchant.gold = newNbGold;
					goldMerchantStepper.data = merchant.gold;
				}
				
				protected function addAllGoldToMerchant():void{
					merchant.gold += city.gold;
					city.gold = 0;
				}
				
				protected function bowsMerchantCheck(newNumber:int):void{
					
					var previousNbBows:int = merchant.bows;
					var newNbBows:int = newNumber;
					
					if(newNbBows > previousNbBows){
						// on ajoute des arcs a la caravane
						
						if(city.bowStock < newNbBows - previousNbBows){
							// la reserve en arcs n'est pas assez grande
							newNbBows = city.bowStock + previousNbBows;
							city.bowStock = 0;
						}
						else{	
							// on pioche dans la reserve d'arcs
							city.bowStock -= newNbBows - previousNbBows;
						}
					}
					else{
						// on enleve des arcs de la caravane
						city.bowStock += previousNbBows - newNbBows;
					}
					
					merchant.bows = newNbBows;
					bowsMerchantStepper.data = merchant.bows;
				}
				
				protected function addAllBowsToMerchant():void{
					merchant.bows += city.bowStock;
					city.bowStock = 0;
				}
				
				protected function swordsMerchantCheck(newNumber:int):void{
					
					var previousNbSwords:int = merchant.swords;
					var newNbSwords:int = newNumber;
					
					if(newNbSwords > previousNbSwords){
						// on ajoute des epees a la caravane
						
						if(city.swordStock < newNbSwords - previousNbSwords){
							// la reserve en epees n'est pas assez grande
							newNbSwords = city.swordStock + previousNbSwords;
							city.swordStock = 0;
						}
						else{	
							// on pioche dans la reserve d'epees
							city.swordStock -= newNbSwords - previousNbSwords;
						}
					}
					else{
						// on enleve des epees de la caravane
						city.swordStock += previousNbSwords - newNbSwords;
					}
					
					merchant.swords = newNbSwords;
					swordsMerchantStepper.data = merchant.swords;
				}
				
				protected function addAllSwordsToMerchant():void{
					merchant.swords += city.swordStock;
					city.swordStock = 0;
				}
				
				
				protected function armorsMerchantCheck(newNumber:int):void{
					
					var previousNbArmors:int = merchant.armors;
					var newNbArmors:int = newNumber;
					
					if(newNbArmors > previousNbArmors){
						// on ajoute des armures a la caravane
						
						if(city.armorStock < newNbArmors - previousNbArmors){
							// la reserve en armures n'est pas assez grande
							newNbArmors = city.armorStock + previousNbArmors;
							city.armorStock = 0;
						}
						else{	
							// on pioche dans la reserve d'armures
							city.armorStock -= newNbArmors - previousNbArmors;
						}
					}
					else{
						// on enleve des armures de la caravane
						city.armorStock += previousNbArmors - newNbArmors;
					}
					
					merchant.armors = newNbArmors;
					armorsMerchantStepper.data = merchant.armors;
				}
				
				protected function addAllArmorsToMerchant():void{
					merchant.armors += city.armorStock;
					city.armorStock = 0;
				}
				
				//-------------------------------------------------------------------------//
				// armies
				
				protected function bowsArmyCheck(newNumber:int):void{
					
					var previousNbBows:int = army.bows;
					var newNbBows:int = newNumber;
					
					if(newNbBows > previousNbBows){
						// on ajoute des arcs a l'armee
						var nbBowsAvailable:int = city.bowStock + city.bowsRestored - city.bowsEquiped;
						var nbBowsEquiped:int =  newNbBows - previousNbBows;
						
						// la reserve en arcs n'est pas assez grande
						if(nbBowsAvailable < nbBowsEquiped){
							newNbBows = nbBowsAvailable + previousNbBows;
							nbBowsEquiped = nbBowsAvailable;
						}
						
						if(city.bowsRestored > nbBowsEquiped){
							city.bowsRestored -= nbBowsEquiped;
						}
						else{
							city.bowsEquiped += nbBowsEquiped - city.bowsRestored;
							city.bowsRestored = 0;
						}
					}
					else{
						// on enleve des arcs a l'armee
						var nbBowsRestored:int = previousNbBows - newNbBows;
						
						if(city.bowsEquiped > nbBowsRestored){
							city.bowsEquiped -= nbBowsRestored;
						}
						else{
							city.bowsRestored += nbBowsRestored - city.bowsEquiped;
							city.bowsEquiped = 0;
						}
					}
					
					army.bows = newNbBows;
					bowsArmyStepper.data = army.bows;
				}
				
				protected function addAllBowsToArmy():void{
					bowsArmyCheck(army.bows + city.bowStock);
				}
				
				protected function swordsArmyCheck(newNumber:int):void{
					
					var previousNbSwords:int = army.swords;
					var newNbSwords:int = newNumber;
					
					if(newNbSwords > previousNbSwords){
						// on ajoute des epees a l'armee
						var nbSwordsAvailable:int = city.swordStock + city.swordsRestored - city.swordsEquiped ; 
						var nbSwordsEquiped:int =  newNbSwords - previousNbSwords;
						
						// la reserve en epees n'est pas assez grande
						if(nbSwordsAvailable < nbSwordsEquiped){
							newNbSwords = nbSwordsAvailable + previousNbSwords;
							nbSwordsEquiped = nbSwordsAvailable;
						}
						
						if(city.swordsRestored > nbSwordsEquiped){
							city.swordsRestored -= nbSwordsEquiped;
						}
						else{
							city.swordsEquiped += nbSwordsEquiped - city.swordsRestored;
							city.swordsRestored = 0;
						}
					}
					else{
						// on enleve des epees a l'armee
						var nbSwordsRestored:int = previousNbSwords - newNbSwords;
						
						if(city.swordsEquiped > nbSwordsRestored){
							city.swordsEquiped -= nbSwordsRestored;
						}
						else{
							city.swordsRestored += nbSwordsRestored - city.swordsEquiped;
							city.swordsEquiped = 0;
						}
					}
					
					army.swords = newNbSwords;	
					swordsArmyStepper.data = army.swords;
				}
				
				protected function addAllSwordsToArmy():void{
					swordsArmyCheck(army.swords + city.swordStock);
				}
				
				protected function armorsArmyCheck(newNumber:int):void{
					
					var previousNbArmors:int = army.armors;
					var newNbArmors:int = newNumber;
					
					if(newNbArmors > previousNbArmors){
						// on ajoute des epees a l'armee
						var nbArmorsAvailable:int = city.armorStock + city.armorsRestored - city.armorsEquiped ; 
						var nbArmorsEquiped:int =  newNbArmors - previousNbArmors;
						
						// la reserve en epees n'est pas assez grande
						if(nbArmorsAvailable < nbArmorsEquiped){
							newNbArmors = nbArmorsAvailable + previousNbArmors;
							nbArmorsEquiped = nbArmorsAvailable;
						}
						
						if(city.armorsRestored > nbArmorsEquiped){
							city.armorsRestored -= nbArmorsEquiped;
						}
						else{
							city.armorsEquiped += nbArmorsEquiped - city.armorsRestored;
							city.armorsRestored = 0;
						}
					}
					else{
						// on enleve des armures a l'armee
						var nbArmorsRestored:int = previousNbArmors - newNbArmors;
						
						if(city.armorsEquiped > nbArmorsRestored){
							city.armorsEquiped -= nbArmorsRestored;
						}
						else{
							city.armorsRestored += nbArmorsRestored - city.armorsEquiped;
							city.armorsEquiped = 0;
						}
					}
					
					army.armors = newNbArmors;
					armorsArmyStepper.data = army.armors;
				}
				
				protected function addAllArmorsToArmy():void{
					armorsArmyCheck(army.armors + city.armorStock);
				}
				
				//-------------------------------------------------------------------------//
				
				protected function addAllUnemployedToArmy():void	{
					armyCheck(army.size + city.unemployed);
				}
				
				protected function armyCheck(newNumber:int):void	{
					
					
					var previousArmySize:int = army.size;
					var newArmySize:int = newNumber;
					
					// caravan : min 50, max : population
					if(newArmySize < 50)
						newArmySize = 50;
					
					var peopleAddedWithStepper:int = newArmySize - previousArmySize;
					
					if(city.unemployed < peopleAddedWithStepper)
						newArmySize = previousArmySize + city.unemployed;
					
					army.size = newArmySize;
					armyStepper.data = army.size;
					
					
					if(newArmySize > previousArmySize){
						// on ajoute des gens dans une armee
						var nbPeopleAdded:int =  newArmySize - previousArmySize;
						
						if(city.armyReleased > nbPeopleAdded){
							city.armyReleased -= nbPeopleAdded;
						}
						else{
							city.armyRaised += nbPeopleAdded - city.armyReleased;
							city.armyReleased = 0;
						}
					}
					else{
						// on enleve des gens de l'armee
						var nbPeopleRemoved:int = previousArmySize - newArmySize;
						
						if(city.armyRaised > nbPeopleRemoved){
							city.armyRaised -= nbPeopleRemoved;
						}
						else{
							city.armyReleased += nbPeopleRemoved - city.armyRaised;
							city.armyRaised = 0;
						}
					}
					
					
//					if(army.ellipseTo){
//						army.ellipseTo.width = army.radius*2;
//						army.ellipseTo.height = army.radius*2;
//					}
						
					// on refresh le drawing au board
					BoardDrawer.getInstance().refreshArmyOnBoard(army);
				}
				
				//-------------------------------------------------------------------------//

				protected function addAllUnemployedToMerchants():void	{
					merchantsCheck(merchant.size + city.unemployed);
				}
				
				protected function merchantsCheck(newNumber:int):void	{
					
					var previousMerchantSize:int = merchant.size;
					var newMerchantSize:int = newNumber;
					
					// caravan : min 50, max : population
					if(newMerchantSize < 50)
						newMerchantSize = 50;
					
					var peopleAddedWithStepper:int = newMerchantSize - previousMerchantSize;

					if(city.unemployed < peopleAddedWithStepper)
						newMerchantSize = previousMerchantSize + city.unemployed;
					
					merchant.size = newMerchantSize;
					merchantsStepper.data = merchant.size;
					
					if(newMerchantSize > previousMerchantSize){
						// on ajoute des gens dans une caravane
						var nbPeopleAdded:int =  newMerchantSize - previousMerchantSize;
						
						if(city.armyReleased > nbPeopleAdded){
							city.armyReleased -= nbPeopleAdded;
						}
						else{
							city.armyRaised += nbPeopleAdded - city.armyReleased;
							city.armyReleased = 0;
						}
					}
					else{
						// on enleve des gens de la caravane
						var nbPeopleRemoved:int = previousMerchantSize - newMerchantSize;
						
						if(city.armyRaised > nbPeopleRemoved){
							city.armyRaised -= nbPeopleRemoved;
						}
						else{
							city.armyReleased += nbPeopleRemoved - city.armyRaised;
							city.armyRaised = 0;
						}
					}
					
					
//					if(merchant.ellipseTo){
//						merchant.ellipseTo.width = merchant.radius*2;
//						merchant.ellipseTo.height = merchant.radius*2;
//					}
						
					// on refresh le drawing au board
					BoardDrawer.getInstance().refreshMerchantOnBoard(merchant);
				}
				
				

				//-------------------------------------------------------------------------//
				// Armies - Merchants
				
				protected function onArmyClick(event:ItemClickEvent):void{
					army = event.currentTarget.selectedItem as Unit;
				}
				
				protected function onMerchantClick(event:ItemClickEvent):void{
					merchant = event.currentTarget.selectedItem as Unit;
				}
				
				protected function newUnit(type:int):Unit{
					
					if(city.unemployed < 50){
						FlexGlobals.topLevelApplication.message(Translations.FREE_PEOPLE.getItemAt(Session.LANGUAGE));
						return null;
					}
					
					var newUnit:Unit = new Unit();
					newUnit.initNewUnit(city.x, city.y);
					
					newUnit.size = 0; 
					newUnit.speed = type == 1 ? Numbers.ARMY_BASE_SPEED : Numbers.MERCHANT_BASE_SPEED;
					newUnit.type = type;
					newUnit.playerUID = Session.player.playerUID;
					
					newUnit.moves = new ArrayCollection();
					var moveInCity:Move = new Move();
					moveInCity.initNewMove(newUnit.unitUID.substr(4), city.x, city.y);
					newUnit.moves.addItem(moveInCity);
					
					Session.player.units.addItem(newUnit);
					
					return newUnit;
				}
				
				protected function newArmy():void{
					
					var newArmy:Unit = newUnit(1);
					if(newArmy == null)
						return;
					
					city.armies.addItem(newArmy);
					
					armiesList.selectedIndex = city.armies.length - 1;
					
					army = newArmy;
					armyCheck(50);
				}

				protected function deleteArmy():void{
					
					
					// on enleve les drawings du board (hack : je redessine la ville par dessus, armyCircle ne veut pas seffacer...: pose probleme affichage si la ville est trop petite)
					BoardDrawer.getInstance().removeArmyFromBoard(army);
				//	BoardDrawer.getInstance().drawCity(city, false);
					
					if(army.unitUID != "new"){
						// pour une armee deja existante : on reajuste la pop, ils peuvent travailler des ce tour
						// faille : si on a enleve des unites avant elles sont dans armyReleased et ne seront pas utilisees ce tour
						city.population += army.size;
					}
					else{
						// pour une armee nouvelle, la pop n'a pas bouge, on reajuste armyRaised et armyReleased par contre
						
						if(city.armyRaised > army.size){
							city.armyRaised -= army.size;
						}
						else{
							city.armyReleased += army.size - city.armyRaised;
							city.armyRaised = 0;
						}
						
					}
					
					// on remet les armements dans les stocks de la ville
					// on enleve des arcs a l'armee
					var nbBowsRestored:int = army.bows;
					
					if(city.bowsEquiped > nbBowsRestored){
						city.bowsEquiped -= nbBowsRestored;
					}
					else{
						city.bowsRestored += nbBowsRestored - city.bowsEquiped;
						city.bowsEquiped = 0;
					}
					
					// on enleve des epees a l'armee
					var nbSwordsRestored:int = army.swords;
					
					if(city.swordsEquiped > nbSwordsRestored){
						city.swordsEquiped -= nbSwordsRestored;
					}
					else{
						city.swordsRestored += nbSwordsRestored - city.swordsEquiped;
						city.swordsEquiped = 0;
					}
					
					// on enleve des armures a l'armee
					var nbArmorsRestored:int = army.armors;
					
					if(city.armorsEquiped > nbArmorsRestored){
						city.armorsEquiped -= nbArmorsRestored;
					}
					else{
						city.armorsRestored += nbArmorsRestored - city.armorsEquiped;
						city.armorsEquiped = 0;
					}
					
					
					// on enleve l'armee de la liste de la ville et du player
					city.armies.removeItemAt(city.armies.getItemIndex(army));
					Session.player.units.removeItemAt(Session.player.units.getItemIndex(army));

					
					// on selectionne l'entree suivante dans la liste des armees
					try{
						armiesList.selectedIndex = 0;
						army = city.armies.getItemAt(0) as Unit;	
					}
					catch(e:Error){
						army = null;
					}
					
				}
				
				
				protected function newMerchants():void{
					
					
					var newMerchant:Unit = newUnit(2);
					if(newMerchant == null)
						return;
					
					city.merchants.addItem(newMerchant);
					
					merchantsList.selectedIndex = city.merchants.length - 1;
					
					merchant = newMerchant;
					merchantsCheck(50);
				}

				protected function deleteMerchant():void{
					
					// on enleve les drawings du board (hack : je redessine la ville par dessus, armyCircle ne veut pas seffacer...: pose probleme affichage si la ville est trop petite)
					BoardDrawer.getInstance().removeArmyFromBoard(merchant);
				//	BoardDrawer.getInstance().drawCity(city, false);
					
					if(merchant.unitUID != "new"){
						// pour une caravane deja existante : on reajuste la pop, ils peuvent travailler des ce tour
						// faille : si on a enleve des unites avant elles sont dans armyReleased et ne seront pas utilisees ce tour
						city.population += merchant.size;
					}
					else{
						// pour une caravane nouvelle, la pop n'a pas bouge, on reajuste armyRaised et armyReleased par contre
						
						if(city.armyRaised > merchant.size){
							city.armyRaised -= merchant.size;
						}
						else{
							city.armyReleased += merchant.size - city.armyRaised;
							city.armyRaised = 0;
						}
						
					}
					
					// on remet les provisions transportees dans les stocks de la ville
					city.wheat += merchant.wheat;
					city.wood += merchant.wood;
					city.iron += merchant.iron;
					city.gold += merchant.gold;
					
					// on enleve la caravane de la liste de la ville et du player
					city.merchants.removeItemAt(city.merchants.getItemIndex(merchant));
					Session.player.units.removeItemAt(Session.player.units.getItemIndex(merchant));
					
					
					// on selectionne l'entree suivante dans la liste des armees
					try{
						merchantsList.selectedIndex = 0;
						merchant = city.merchants.getItemAt(0) as Unit;	
					}
					catch(e:Error){
						merchant = null;
					}
					
				}
				
			]]>
		</fx:Script>
	
		<fx:Declarations>
			<s:Fade id="fader" duration="1000" alphaFrom="1" alphaTo="0"/>
			<s:Fade id="shower" duration="1000" alphaFrom="0" alphaTo="1"/>
		</fx:Declarations>
	
		<mx:Image source="{ImageContainer.FERMIER}" x="950" y="-70" visible="{viewstack.selectedIndex == 0}" hideEffect="fader" showEffect="shower"/>
		<mx:Image source="{ImageContainer.MARCHANDE}" x="1000" y="-70" visible="{viewstack.selectedIndex == 1}" hideEffect="fader" showEffect="shower"/>
		<mx:Image source="{ImageContainer.FORGERON}" x="950" y="-70" visible="{viewstack.selectedIndex == 2 || viewstack.selectedIndex == 3}" hideEffect="fader" showEffect="shower"/>
		<mx:Image source="{ImageContainer.MARCHAND}" x="950" y="-70" visible="{viewstack.selectedIndex == 4}" hideEffect="fader" showEffect="shower"/>
		<mx:Image source="{ImageContainer.GUERRIER}" x="950" y="-70" visible="{viewstack.selectedIndex == 5}" hideEffect="fader" showEffect="shower"/>

		<s:VGroup width="100%" horizontalAlign="center">
			
			<s:TextInput id="cityNameInput" text="{city.name}" keyUp="cityNameInputHandler(event)"/>
			<mx:Spacer height="10"/>
			<s:HGroup horizontalAlign="center" verticalAlign="middle">
				<s:Label text="Population"/>
				<mx:Spacer width="20"/>
				<s:Label text="{city.population}" styleName="numberLabel"/>
				<mx:Spacer width="6"/>
				<s:Label text="({city.armyReleased - city.armyRaised >= 0 ? '+' : '-'} {Math.abs(city.armyReleased - city.armyRaised)})"  
						 color="{city.armyReleased - city.armyRaised >= 0 ? Numbers.GREEN : Numbers.RED} "/>
				
				<mx:Image width="30" height="30" toolTip="{Translations.ARMY_POPULATION.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.QUESTION}"/>
				
				<mx:Spacer width="35"/>
				<s:Label text="{Translations.UNEMPLOYED.getItemAt(Session.LANGUAGE)}"/>
				<mx:Spacer width="20"/>
				<s:Label text="{city.unemployed}" styleName="numberLabel" color="{city.unemployed >= 0 ? 0x1111ee : 0xCC0000}"/>
			</s:HGroup>
			<s:HGroup horizontalAlign="center" verticalAlign="middle">
				
				<mx:Image toolTip="{Translations.WHEAT.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WHEAT}"/>
				<mx:Spacer width="10"/>
				<s:Label text="{city.wheat}" styleName="numberLabel"/>
				
				<mx:Spacer width="15"/>
				<mx:Image toolTip="{Translations.WOOD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WOOD}"/>
				<mx:Spacer width="10"/>
				<s:Label text="{city.wood}" styleName="numberLabel"/>
				
				<mx:Spacer width="15"/>
				<mx:Image toolTip="{Translations.IRON.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.IRON}"/>
				<mx:Spacer width="10"/>
				<s:Label text="{city.iron}" styleName="numberLabel"/>

				<mx:Spacer width="15"/>
				<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
				<mx:Spacer width="10"/>
				<s:Label text="{city.gold}" styleName="numberLabel"/>
				
			</s:HGroup>
			<s:HGroup verticalAlign="top">
				<mx:Spacer width="-25"/>
				<s:Label text="({(city.wheat + city.wheatEarned - city.wheatSpent)})" color="{city.wheat + city.wheatEarned - city.wheatSpent >= 0 ? Numbers.GREEN : Numbers.RED}"/>
				
				<mx:Spacer width="87"/>
				<s:Label text="({(city.wood + city.woodEarned - city.woodSpent)})" color="{city.wood + city.woodEarned - city.woodSpent >= 0 ? Numbers.GREEN : Numbers.RED}"/>
				
				<mx:Spacer width="87"/>
				<s:Label text="({(city.iron + city.ironEarned - city.ironSpent)})" color="{city.iron + city.ironEarned - city.ironSpent >= 0 ? Numbers.GREEN : Numbers.RED}"/>
			</s:HGroup>
			
			<mx:Spacer height="15"/>
			<s:TabBar id="tabs" dataProvider="{viewstack}" skinClass="spark.skins.spark.TabBarSkin"/>
				
			<mx:ViewStack id="viewstack" width="650">
				
				<!-- =============================================================================================== -->
				<!-- Resources Tab -->
				
				<s:NavigatorContent label="{Translations.RESOURCES.getItemAt(Session.LANGUAGE)}">
					<s:HGroup width="100%" horizontalAlign="center">
						<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle">
							<mx:GridRow >
								<mx:GridItem/>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.WORKERS.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.HARVEST.getItemAt(Session.LANGUAGE)}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.SPENDING.getItemAt(Session.LANGUAGE)}"/>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.WHEAT.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WHEAT}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<renderers:SpecialNumStepper id="wheatWorkersStepper"
																 data="{city.peopleCreatingWheat}"
																 step="{1/Numbers.WHEAT_EARNING_COEFF + 1}"
																 check="wheatWorkersCheck"
																 wantMax="addAllUnemployedToWheat"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="+ {city.wheatEarned}" color="{Numbers.GREEN}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="- {city.wheatSpent}"  color="{city.wheatSpent > 0 ? Numbers.RED : Numbers.GREEN}"/>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.WOOD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WOOD}" click="addAllUnemployedToWood()"/>
								</mx:GridItem>
								<mx:GridItem>
									<renderers:SpecialNumStepper id="woodWorkersStepper"
																 data="{city.peopleCreatingWood}"
																 step="{1/Numbers.WOOD_EARNING_COEFF + 1}"
																 check="woodWorkersCheck"
																 wantMax="addAllUnemployedToWood"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="+ {city.woodEarned}" color="{Numbers.GREEN}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="- {city.woodSpent}" color="{city.woodSpent > 0 ? Numbers.RED : Numbers.GREEN}"/>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.IRON.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.IRON}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<renderers:SpecialNumStepper id="ironWorkersStepper"
																 data="{city.peopleCreatingIron}"
																 step="{1/Numbers.IRON_EARNING_COEFF + 1}"
																 check="ironWorkersCheck"
																 wantMax="addAllUnemployedToIron"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="+ {city.ironEarned}" color="{Numbers.GREEN}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="- {city.ironSpent}" color="{city.ironSpent > 0 ? Numbers.RED : Numbers.GREEN}"/>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow>
								<mx:GridItem colSpan="4">
									<mx:HRule width="100%"/>
								</mx:GridItem>
							</mx:GridRow >
							<mx:GridRow >
								<mx:GridItem/>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="Total" />
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{city.peopleCreatingWheat + city.peopleCreatingWood + city.peopleCreatingIron}" />
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow>
								<mx:GridItem horizontalAlign="center"
											 colSpan="5"
											 color="{Numbers.RED}">
									<s:Label text="{Translations.STARVATION.getItemAt(Session.LANGUAGE)}"
											 visible="{city.wheat + city.wheatEarned - city.wheatSpent &lt; 0}"
											 includeInLayout="{city.wheat + city.wheatEarned - city.wheatSpent &lt; 0}"/>
								</mx:GridItem>
							</mx:GridRow>
						</mx:Grid>
					</s:HGroup>
					
				</s:NavigatorContent>
				
				<!-- =============================================================================================== -->
				<!-- Marche -->
				
				<s:NavigatorContent label="{Translations.MARKET.getItemAt(Session.LANGUAGE)}">
					<s:HGroup width="100%" height="100%" horizontalAlign="center">
						<s:TabBar id="tabsMarket" dataProvider="{viewstackMarket}" skinClass="spark.skins.spark.TabBarSkin"/>
						
						<mx:ViewStack id="viewstackMarket" width="650" height="100%">
							
							<!-- =============================================================================================== -->
							<!-- Achat -->
							
							<s:NavigatorContent label="{Translations.BUYING.getItemAt(Session.LANGUAGE)}" width="650">
								<s:Button label="{Translations.BUY.getItemAt(Session.LANGUAGE)}" left="-130" bottom="0" click="buy()"/>
								<s:VGroup>
									<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle"
											 width="520">
										<mx:GridRow >
											<mx:GridItem minWidth="60"/>
											<mx:GridItem horizontalAlign="center" minWidth="80">
												<s:Label text="{Translations.UNIT_COST.getItemAt(Session.LANGUAGE)}" />
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" minWidth="160">
												<s:Label text="{Translations.QUANTITY.getItemAt(Session.LANGUAGE)}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" minWidth="80">
												<s:Label text="{Translations.PRICE_TO_PAY.getItemAt(Session.LANGUAGE)}"/>
											</mx:GridItem>
										</mx:GridRow>
									</mx:Grid>
									<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle"
											 maxHeight="180" width="500">
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.WHEAT.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WHEAT}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.WHEAT_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<renderers:SpecialNumStepper id="wheatMarketStepper"
																			 data="{city.wheatBought}"
																			 step="{1}"
																			 check="wheatMarketBuyCheck"
																			 wantMax="spendAllMoneyForWheat"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.wheatBought*Numbers.WHEAT_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.WOOD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WOOD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.WOOD_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<renderers:SpecialNumStepper id="woodMarketStepper"
																			 data="{city.woodBought}"
																			 step="{1}"
																			 check="woodMarketBuyCheck"
																			 wantMax="spendAllMoneyForWood"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{(int)(city.woodBought*Numbers.WOOD_PRICE_BUY)}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.IRON.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.IRON}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.IRON_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<renderers:SpecialNumStepper id="ironMarketStepper"
																			 data="{city.ironBought}"
																			 step="{1}"
																			 check="ironMarketBuyCheck"
																			 wantMax="spendAllMoneyForIron"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<s:Label text="{city.ironBought*Numbers.IRON_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.BOW.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.BOW}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.BOW_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<renderers:SpecialNumStepper id="bowsMarketStepper"
																			 data="{city.bowsBought}"
																			 step="{1}"
																			 check="bowsMarketBuyCheck"
																			 wantMax="spendAllMoneyForBows"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.bowsBought*Numbers.BOW_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.SWORD.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.SWORD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.SWORD_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<renderers:SpecialNumStepper id="swordsMarketStepper"
																			 data="{city.swordsBought}"
																			 step="{1}"
																			 check="swordsMarketBuyCheck"
																			 wantMax="spendAllMoneyForSwords"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.swordsBought*Numbers.SWORD_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.ARMOR.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.ARMOR}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.ARMOR_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<renderers:SpecialNumStepper id="armorsMarketStepper"
																			 data="{city.armorsBought}"
																			 step="{1}"
																			 check="armorsMarketBuyCheck"
																			 wantMax="spendAllMoneyForArmors"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.armorsBought*Numbers.ARMOR_PRICE_BUY}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
										</mx:GridRow>
									</mx:Grid>
									<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle"
											 width="500">
										<mx:GridRow>
											<mx:GridItem colSpan="4">
												<mx:HRule width="100%"/>
											</mx:GridItem>
										</mx:GridRow >
										<mx:GridRow >
											<mx:GridItem/>
											<mx:GridItem/>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Translations.TOTAL_SPENDING.getItemAt(Session.LANGUAGE)} : " minWidth="150"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.goldSpent}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
											<mx:GridItem/>
										</mx:GridRow>
									</mx:Grid>
								</s:VGroup>
							</s:NavigatorContent>
							
							<!-- =============================================================================================== -->
							<!-- Vente -->
							
							<s:NavigatorContent label="{Translations.SELLING.getItemAt(Session.LANGUAGE)}" width="650">
								<s:Button label="{Translations.SELL.getItemAt(Session.LANGUAGE)}" left="-130" bottom="0" click="sell()"/>
								<s:VGroup>
									<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle"
											 width="520">
										<mx:GridRow >
											<mx:GridItem minWidth="70"/>
											<mx:GridItem horizontalAlign="center" minWidth="80">
												<s:Label text="{Translations.UNIT_COST.getItemAt(Session.LANGUAGE)}" />
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" minWidth="160">
												<s:Label text="{Translations.QUANTITY.getItemAt(Session.LANGUAGE)}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" minWidth="80">
												<s:Label text="{Translations.PROFIT.getItemAt(Session.LANGUAGE)}"/>
											</mx:GridItem>
										</mx:GridRow>
									</mx:Grid>
									<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle"
											 maxHeight="180" width="520">
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.WHEAT.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WHEAT}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.WHEAT_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<renderers:SpecialNumStepper id="wheatMarketSellStepper"
																			 data="{city.wheatSold}"
																			 step="{1}"
																			 check="wheatMarketSellCheck"
																			 wantMax="sellAllWheat"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{(int)(city.wheatSold*Numbers.WHEAT_PRICE_SELL)}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.WOOD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WOOD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.WOOD_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<renderers:SpecialNumStepper id="woodMarketSellStepper"
																			 data="{city.woodSold}"
																			 step="{1}"
																			 check="woodMarketSellCheck"
																			 wantMax="sellAllWood"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.woodSold*Numbers.WOOD_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.IRON.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.IRON}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.IRON_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<renderers:SpecialNumStepper id="ironMarketSellStepper"
																			 data="{city.ironSold}"
																			 step="{1}"
																			 check="ironMarketSellCheck"
																			 wantMax="sellAllIron"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{(int)(city.ironSold*Numbers.IRON_PRICE_SELL)}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.BOW.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.BOW}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.BOW_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<renderers:SpecialNumStepper id="bowsMarketSellStepper"
																			 data="{city.bowsSold}"
																			 step="{1}"
																			 check="bowsMarketSellCheck"
																			 wantMax="sellAllBows"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.bowsSold*Numbers.BOW_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.SWORD.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.SWORD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.SWORD_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<renderers:SpecialNumStepper id="swordsMarketSellStepper"
																			 data="{city.swordsSold}"
																			 step="{1}"
																			 check="swordsMarketSellCheck"
																			 wantMax="sellAllSwords"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.swordsSold*Numbers.SWORD_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.ARMOR.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.ARMOR}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Numbers.ARMOR_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<renderers:SpecialNumStepper id="armorsMarketSellStepper"
																			 data="{city.armorsSold}"
																			 step="{1}"
																			 check="armorsMarketSellCheck"
																			 wantMax="sellAllArmors"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.armorsSold*Numbers.ARMOR_PRICE_SELL}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
										</mx:GridRow>
									</mx:Grid>
									<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle"
											 width="520">
										<mx:GridRow>
											<mx:GridItem colSpan="4">
												<mx:HRule width="100%"/>
											</mx:GridItem>
										</mx:GridRow >
										<mx:GridRow >
											<mx:GridItem/>
											<mx:GridItem/>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{Translations.TOTAL_PROFIT.getItemAt(Session.LANGUAGE)} : " minWidth="150"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center" verticalAlign="middle">
												<s:Label text="{city.goldEarned}" styleName="numberLabel"/>
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}"/>
											</mx:GridItem>
											<mx:GridItem/>
										</mx:GridRow>
									</mx:Grid>
								</s:VGroup>
							</s:NavigatorContent>
						</mx:ViewStack>

					</s:HGroup>
				</s:NavigatorContent>
				
				
				<!-- =============================================================================================== -->
				<!-- Forge Tab -->
				
				<s:NavigatorContent label="{Translations.FORGE.getItemAt(Session.LANGUAGE)}">
					<s:VGroup width="100%" horizontalAlign="center">
						<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle">
						  <mx:GridRow >
							  <mx:GridItem/>
							  <mx:GridItem horizontalAlign="center">
								  <s:Label text="{Translations.WORKERS.getItemAt(Session.LANGUAGE)}" />
							  </mx:GridItem>
							  <mx:GridItem horizontalAlign="center">
								  <s:Label text="{Translations.WOOD_SPENT.getItemAt(Session.LANGUAGE)}" />
							  </mx:GridItem>
							  <mx:GridItem horizontalAlign="center">
								  <s:Label text="{Translations.IRON_SPENT.getItemAt(Session.LANGUAGE)}" />
							  </mx:GridItem>
						  </mx:GridRow>
						  <mx:GridRow >
							  <mx:GridItem horizontalAlign="center">
								  <mx:Image toolTip=" "
											toolTipCreate="{onCreateForgeToolTip(event, Translations.BOW.getItemAt(Session.LANGUAGE) as String, Numbers.BOW_WOOD, Numbers.BOW_IRON)}"
											source="{ImageContainer.BOW}"/>
							  </mx:GridItem>
							  <mx:GridItem horizontalAlign="center">
								  <renderers:SpecialNumStepper id="bowWorkersStepper"
															   data="{city.bowWorkers}"
															   step="{1}"
															   check="bowWorkersCheck"
															   wantMax="addAllUnemployedToBow"/>
							  </mx:GridItem>
							  <mx:GridItem horizontalAlign="center">
								  <s:Label text="{Numbers.BOW_WOOD * city.bowWorkers}" styleName="numberLabel"/>
							  </mx:GridItem>
							  <mx:GridItem horizontalAlign="center">
								  <s:Label text="{Numbers.BOW_IRON * city.bowWorkers}" styleName="numberLabel"/>
							  </mx:GridItem>
						  </mx:GridRow>
							<mx:GridRow verticalAlign="middle">
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip=" "
											  toolTipCreate="{onCreateForgeToolTip(event, Translations.SWORD.getItemAt(Session.LANGUAGE) as String, Numbers.SWORD_WOOD, Numbers.SWORD_IRON)}"
											  source="{ImageContainer.SWORD}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<renderers:SpecialNumStepper id="swordWorkersStepper"
																 data="{city.swordWorkers}"
																 step="{1}"
																 check="swordWorkersCheck"
																 wantMax="addAllUnemployedToSword"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Numbers.SWORD_WOOD * city.swordWorkers}" styleName="numberLabel"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Numbers.SWORD_IRON * city.swordWorkers}" styleName="numberLabel"/>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip=" "
											  toolTipCreate="{onCreateForgeToolTip(event, Translations.ARMOR.getItemAt(Session.LANGUAGE) as String, Numbers.ARMOR_WOOD, Numbers.ARMOR_IRON)}"
											  source="{ImageContainer.ARMOR}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<renderers:SpecialNumStepper id="armorWorkersStepper"
																 data="{city.armorWorkers}"
																 step="{1}"
																 check="armorWorkersCheck"
																 wantMax="addAllUnemployedToArmor"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Numbers.ARMOR_WOOD * city.armorWorkers}" styleName="numberLabel"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Numbers.ARMOR_IRON * city.armorWorkers}" styleName="numberLabel"/>
								</mx:GridItem>
							</mx:GridRow>
						<mx:GridRow>
							<mx:GridItem colSpan="4">
							  <mx:HRule width="100%"/>
							</mx:GridItem>
						</mx:GridRow >
						<mx:GridRow >
							<mx:GridItem horizontalAlign="center">
								<s:Label text="Total" />
							</mx:GridItem>
							<mx:GridItem horizontalAlign="center">
								<s:Label text="{city.bowWorkers + city.swordWorkers + city.armorWorkers}" />
							</mx:GridItem>
							<mx:GridItem horizontalAlign="center">
								<s:Label text="{Numbers.SWORD_WOOD * city.swordWorkers 
										 	   +Numbers.ARMOR_WOOD * city.armorWorkers
										 	   +Numbers.BOW_WOOD * city.bowWorkers}" 
										 		styleName="numberLabel"/>
							</mx:GridItem>
							<mx:GridItem horizontalAlign="center">
								<s:Label text="{Numbers.SWORD_IRON * city.swordWorkers
										 +Numbers.ARMOR_IRON * city.armorWorkers
										 +Numbers.BOW_IRON * city.bowWorkers}" 
										 styleName="numberLabel"/>
							</mx:GridItem>
						</mx:GridRow>
					  </mx:Grid>
					</s:VGroup>
				</s:NavigatorContent>
				
				
				
				<!-- =============================================================================================== -->
				<!-- Equipment Tab -->
				
				<s:NavigatorContent label="{Translations.EQUIPMENT.getItemAt(Session.LANGUAGE)}">
					<s:VGroup width="100%" horizontalAlign="center">
						<mx:Grid verticalGap="10" horizontalGap="25" horizontalAlign="center" verticalAlign="middle">
							<mx:GridRow >
								<mx:GridItem >
								</mx:GridItem >
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.STOCK.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.PRODUCTION.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.ARMIES.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.PREVISION.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.BOW.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.BOW}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{city.bowStock}" styleName="numberLabel"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="+ {city.bowWorkers}" styleName="numberLabel"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{(city.bowsRestored - city.bowsEquiped >= 0 ? '+' : '-')} {Math.abs(city.bowsRestored - city.bowsEquiped)}" 
											 styleName="numberLabel" 
											 color="{city.bowsRestored - city.bowsEquiped >= 0 ? Numbers.GREEN : Numbers.RED}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{(city.bowStock + city.bowWorkers + city.bowsRestored - city.bowsEquiped)}" 
											 styleName="numberLabel" 
											 color="{city.bowStock + city.bowWorkers + city.bowsRestored - city.bowsEquiped >= 0 ? Numbers.GREEN : Numbers.RED}"/>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.SWORD.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.SWORD}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{city.swordStock}" styleName="numberLabel"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="+ {city.swordWorkers}" styleName="numberLabel"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{(city.swordsRestored - city.swordsEquiped >= 0 ? '+' : '-')} {Math.abs(city.swordsRestored - city.swordsEquiped)}" 
											 styleName="numberLabel" 
											 color="{city.swordsRestored - city.swordsEquiped >= 0 ? Numbers.GREEN : Numbers.RED}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{(city.swordStock + city.swordWorkers + city.swordsRestored - city.swordsEquiped)}" 
											 styleName="numberLabel" 
											 color="{city.swordStock + city.swordWorkers + city.swordsRestored - city.swordsEquiped >= 0 ? Numbers.GREEN : Numbers.RED}"/>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.ARMOR.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.ARMOR}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{city.armorStock}" styleName="numberLabel"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="+ {city.armorWorkers}" styleName="numberLabel"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{(city.armorsRestored - city.armorsEquiped >= 0 ? '+' : '-')} {Math.abs(city.armorsRestored - city.armorsEquiped)}" 
											 styleName="numberLabel" 
											 color="{city.armorsRestored - city.armorsEquiped >= 0 ? Numbers.GREEN : Numbers.RED}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{(city.armorStock + city.armorWorkers + city.armorsRestored - city.armorsEquiped)}" 
											 styleName="numberLabel" 
											 color="{city.armorStock + city.armorWorkers + city.armorsRestored - city.armorsEquiped >= 0 ? Numbers.GREEN : Numbers.RED}"/>
								</mx:GridItem>
							</mx:GridRow>
						</mx:Grid>
					</s:VGroup>
				</s:NavigatorContent>
				
				<!-- =============================================================================================== -->
				<!-- Merchants Tab -->
				
				<s:NavigatorContent label="{Translations.MERCHANTS.getItemAt(Session.LANGUAGE)}">
					<s:VGroup height="100%">
						<s:HGroup width="100%" horizontalAlign="center">
							<s:VGroup horizontalAlign="center" height="100%">
								<s:HGroup>
									<mx:Image width="30" height="30" 
											  toolTip=" "
											  toolTipCreate="{onCreateMerchantToolTip(event)}"
											  source="{ImageContainer.QUESTION}"/>
									<s:Button label="{Translations.NEW_MERCHANTS.getItemAt(Session.LANGUAGE)}" click="newMerchants()"/>
								</s:HGroup>
								<s:Scroller maxHeight="200">
									<s:Group>
										<s:List id="merchantsList"
												itemRenderer="com.uralys.tribes.renderers.MerchantListRenderer"
												dataProvider="{city.merchants}"
												borderVisible="false"
												width="275"
												contentBackgroundAlpha="0"
												creationComplete="initMerchantsList()">
											<s:layout>
												<s:VerticalLayout gap="1" useVirtualLayout="true" />
											</s:layout>
										</s:List>
									</s:Group>
								</s:Scroller>
							</s:VGroup>
							<s:VGroup>
							<mx:Grid verticalGap="10" 
									 horizontalGap="10" 
									 horizontalAlign="center" 
									 verticalAlign="middle"
									 visible="{merchant != null}">
								<mx:GridRow >
									<mx:GridItem >
										<s:Label text="{Translations.NB_CARAVAN.getItemAt(Session.LANGUAGE)}" />
									</mx:GridItem>
									<mx:GridItem>
										<renderers:SpecialNumStepper id="merchantsStepper"
																	 data="{merchant.size}"
																	 step="{1}"
																	 check="merchantsCheck"
																	 wantMax="addAllUnemployedToMerchants"/>
									</mx:GridItem>
									<mx:GridItem>
										<s:Button label="{Translations.DELETE.getItemAt(Session.LANGUAGE)}" click="deleteMerchant()"/>
									</mx:GridItem>
								</mx:GridRow>
								<mx:GridRow>
									<mx:GridItem colSpan="3">
										<mx:HRule width="100%"/>
									</mx:GridItem>
								</mx:GridRow >
							</mx:Grid>
							<s:Scroller maxHeight="200" width="100%">
								<s:Group width="100%">
									<mx:Grid verticalGap="10" 
											 horizontalGap="10" 
											 horizontalAlign="center" 
											 verticalAlign="middle"
											 visible="{merchant != null}" 
											 width="100%">
										<mx:GridRow >
											<mx:GridItem />
											<mx:GridItem horizontalAlign="center">
												<s:Label text="{Translations.CARRIAGE.getItemAt(Session.LANGUAGE)}" />
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<s:Label text="{Translations.AVAILABLE_STOCK.getItemAt(Session.LANGUAGE)}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.WHEAT.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WHEAT}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<renderers:SpecialNumStepper id="wheatMerchantStepper"
																			 data="{merchant.wheat}"
																			 step="{1}"
																			 check="wheatMerchantCheck"
																			 wantMax="addAllWheatToMerchant"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<s:Label text="{city.wheat}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.WOOD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.WOOD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<renderers:SpecialNumStepper id="woodMerchantStepper"
																			 data="{merchant.wood}"
																			 step="{1}"
																			 check="woodMerchantCheck"
																			 wantMax="addAllWoodToMerchant"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<s:Label text="{city.wood}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.IRON.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.IRON}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<renderers:SpecialNumStepper id="ironMerchantStepper"
																			 data="{merchant.iron}"
																			 step="{1}"
																			 check="ironMerchantCheck"
																			 wantMax="addAllIronToMerchant"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<s:Label text="{city.iron}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.GOLD.getItemAt(Session.LANGUAGE)}" source="{ImageContainer.GOLD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<renderers:SpecialNumStepper id="goldMerchantStepper"
																			 data="{merchant.gold}"
																			 step="{1}"
																			 check="goldMerchantCheck"
																			 wantMax="addAllGoldToMerchant"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<s:Label text="{city.gold}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.BOW.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.BOW}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<renderers:SpecialNumStepper id="bowsMerchantStepper"
																			 data="{merchant.bows}"
																			 step="{1}"
																			 check="bowsMerchantCheck"
																			 wantMax="addAllBowsToMerchant"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<s:Label text="{city.bowStock}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.SWORD.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.SWORD}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<renderers:SpecialNumStepper id="swordsMerchantStepper"
																			 data="{merchant.swords}"
																			 step="{1}"
																			 check="swordsMerchantCheck"
																			 wantMax="addAllSwordsToMerchant"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<s:Label text="{city.swordStock}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow >
											<mx:GridItem horizontalAlign="center">
												<mx:Image toolTip="{Translations.ARMOR.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.ARMOR}" width="25" height="25"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<renderers:SpecialNumStepper id="armorsMerchantStepper"
																			 data="{merchant.armors}"
																			 step="{1}"
																			 check="armorsMerchantCheck"
																			 wantMax="addAllArmorsToMerchant"/>
											</mx:GridItem>
											<mx:GridItem horizontalAlign="center">
												<s:Label text="{city.armorStock}" />
											</mx:GridItem>
										</mx:GridRow>
										<mx:GridRow>
											<mx:GridItem colSpan="4">
												<mx:HRule width="100%"/>
											</mx:GridItem>
										</mx:GridRow >
									</mx:Grid>
								</s:Group>
							</s:Scroller>
							</s:VGroup>
						</s:HGroup>
					</s:VGroup>
				</s:NavigatorContent>
				
				<!-- =============================================================================================== -->
				<!-- Armies Tab -->
				
				<s:NavigatorContent label="{Translations.ARMIES.getItemAt(Session.LANGUAGE)}">
					<s:HGroup width="100%" horizontalAlign="center">
						<s:VGroup horizontalAlign="center">
							<s:Button label="{Translations.NEW_ARMY.getItemAt(Session.LANGUAGE)}" click="newArmy()"/>
							<s:Scroller height="200">
								<s:Group>
									<s:List id="armiesList"
											itemRenderer="com.uralys.tribes.renderers.ArmyListRenderer"
											dataProvider="{city.armies}"
											borderVisible="false"
											width="275"
											contentBackgroundAlpha="0"
											creationComplete="initArmiesList()">
										<s:layout>
											<s:VerticalLayout gap="1" useVirtualLayout="true" />
										</s:layout>
									</s:List>
								</s:Group>
							</s:Scroller>
						</s:VGroup>
						<mx:Grid verticalGap="10" 
								 horizontalGap="10" 
								 horizontalAlign="center" 
								 verticalAlign="middle"
								 visible="{army != null}">
							<mx:GridRow >
								<mx:GridItem >
									<s:Label text="{Translations.NB_ARMY.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
								<mx:GridItem>
									<renderers:SpecialNumStepper id="armyStepper"
																 data="{army.size}"
																 step="{1}"
																 check="armyCheck"
																 wantMax="addAllUnemployedToArmy"/>
								</mx:GridItem>
								<mx:GridItem>
									<s:Button label="{Translations.DELETE.getItemAt(Session.LANGUAGE)}" click="deleteArmy()"/>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow>
								<mx:GridItem colSpan="4">
									<mx:HRule width="100%"/>
								</mx:GridItem>
							</mx:GridRow >
							<mx:GridRow >
								<mx:GridItem />
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.EQUIPMENT.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{Translations.AVAILABLE_STOCK.getItemAt(Session.LANGUAGE)}" />
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.BOW.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.BOW}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<renderers:SpecialNumStepper id="bowsArmyStepper"
																 data="{army.bows}"
																 step="{1}"
																 check="bowsArmyCheck"
																 wantMax="addAllBowsToArmy"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{city.bowStock + city.bowsRestored - city.bowsEquiped}" />
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.SWORD.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.SWORD}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<renderers:SpecialNumStepper id="swordsArmyStepper"
																 data="{army.swords}"
																 step="{1}"
																 check="swordsArmyCheck"
																 wantMax="addAllSwordsToArmy"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{city.swordStock + city.swordsRestored - city.swordsEquiped}" />
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow >
								<mx:GridItem horizontalAlign="center">
									<mx:Image toolTip="{Translations.ARMOR.getItemAt(Session.LANGUAGE)}s" source="{ImageContainer.ARMOR}"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<renderers:SpecialNumStepper id="armorsArmyStepper"
																 data="{army.armors}"
																 step="{1}"
																 check="armorsArmyCheck"
																 wantMax="addAllArmorsToArmy"/>
								</mx:GridItem>
								<mx:GridItem horizontalAlign="center">
									<s:Label text="{city.armorStock + city.armorsRestored - city.armorsEquiped}" />
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow>
								<mx:GridItem colSpan="4">
									<mx:HRule width="100%"/>
								</mx:GridItem>
							</mx:GridRow >
						</mx:Grid>
					</s:HGroup>
				</s:NavigatorContent>
			</mx:ViewStack>

		</s:VGroup>
</s:Group>
